"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.activate = activate;
exports.deactivate = deactivate;
// The module 'vscode' contains the VS Code extensibility API
// Import the module and reference it with the alias vscode in your code below
const vscode = __importStar(require("vscode"));
const AudioRecorder_1 = require("./core/AudioRecorder");
const WhisperClient_1 = require("./core/WhisperClient");
const TextInserter_1 = require("./ui/TextInserter");
const StatusBarManager_1 = require("./ui/StatusBarManager");
const ErrorHandler_1 = require("./utils/ErrorHandler");
const RetryManager_1 = require("./utils/RetryManager");
const RecoveryActionHandler_1 = require("./utils/RecoveryActionHandler");
// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
let audioRecorder;
let whisperClient;
let textInserter;
let statusBarManager;
// –°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
let errorHandler;
let retryManager;
let recoveryHandler;
// –°–æ—Å—Ç–æ—è–Ω–∏–µ hold-to-record
let isHoldToRecordActive = false;
let holdToRecordDisposable = null;
// –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
let extensionContext;
// –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
let lastTranscribedText = null;
/**
 * –§—É–Ω–∫—Ü–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
 * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
 */
function activate(context) {
    console.log('üé§ VoiceScribe extension is now active!');
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    extensionContext = context;
    try {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
        initializeErrorHandling();
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        initializeComponents();
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã
        registerCommands(context);
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
        setupKeyBindings(context);
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º WhisperClient –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
        initializeWhisperClient();
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        showWelcomeMessage();
        console.log('‚úÖ VoiceScribe extension successfully activated');
    }
    catch (error) {
        const errorMessage = `Failed to activate VoiceScribe: ${error.message}`;
        console.error(errorMessage);
        vscode.window.showErrorMessage(errorMessage);
    }
}
/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
 */
function initializeErrorHandling() {
    console.log('üîß Initializing error handling system...');
    // –°–æ–∑–¥–∞–µ–º ErrorHandler —Å VS Code display handler
    errorHandler = new ErrorHandler_1.ErrorHandler(new ErrorHandler_1.VSCodeErrorDisplayHandler());
    // –°–æ–∑–¥–∞–µ–º RetryManager
    retryManager = new RetryManager_1.RetryManager(errorHandler);
    // –°–æ–∑–¥–∞–µ–º RecoveryActionHandler —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
    const recoveryDependencies = {
        checkMicrophone: async () => {
            const compatibility = AudioRecorder_1.AudioRecorder.checkBrowserCompatibility();
            const permission = await AudioRecorder_1.AudioRecorder.checkMicrophonePermission();
            return compatibility && permission.state === 'granted';
        },
        testApiKey: async () => {
            if (!whisperClient) {
                return false;
            }
            try {
                // –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π blob
                const testBlob = new Blob(['test'], { type: 'audio/wav' });
                await whisperClient.transcribe(testBlob);
                return true;
            }
            catch (error) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ - –µ—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ API –∫–ª—é—á–∞, —Ç–æ false
                const errorMessage = error.message.toLowerCase();
                return !errorMessage.includes('api key') && !errorMessage.includes('unauthorized');
            }
        },
        openSettings: () => {
            vscode.commands.executeCommand('workbench.action.openSettings', 'voiceScribe');
        },
        reloadExtension: () => {
            vscode.commands.executeCommand('workbench.action.reloadWindow');
        },
        retryLastOperation: async () => {
            // –≠—Ç–æ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö
            throw new Error('No operation to retry');
        }
    };
    recoveryHandler = new RecoveryActionHandler_1.RecoveryActionHandler(recoveryDependencies);
    console.log('‚úÖ Error handling system initialized');
}
/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
 */
function initializeComponents() {
    console.log('üîß Initializing VoiceScribe components...');
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º TextInserter
    textInserter = new TextInserter_1.TextInserter();
    // –°–æ–±—ã—Ç–∏—è –¥–ª—è AudioRecorder
    const audioRecorderEvents = {
        onRecordingStart: () => {
            console.log('üé§ Recording started');
            statusBarManager.updateRecordingState(true);
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –≤ hold-to-record —Ä–µ–∂–∏–º–µ
            if (!isHoldToRecordActive) {
                vscode.window.showInformationMessage('üé§ Recording started...');
            }
        },
        onRecordingStop: async (audioBlob) => {
            console.log('‚èπÔ∏è Recording stopped');
            statusBarManager.updateRecordingState(false);
            await handleTranscription(audioBlob);
        },
        onError: async (error) => {
            console.error('‚ùå Recording error:', error);
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
            const context = {
                operation: 'audio_recording',
                isHoldToRecordMode: isHoldToRecordActive,
                timestamp: new Date()
            };
            const userAction = await errorHandler.handleErrorFromException(error, context);
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ—Å—Ç—å
            if (userAction) {
                await handleUserRecoveryAction(userAction, context);
            }
        }
    };
    // –°–æ–±—ã—Ç–∏—è –¥–ª—è StatusBar
    const statusBarEvents = {
        onRecordingToggle: () => {
            toggleRecording();
        },
        onSettings: () => {
            openSettings();
        },
        onHelp: () => {
            showHelp();
        }
    };
    // –°–æ–∑–¥–∞–µ–º AudioRecorder
    audioRecorder = new AudioRecorder_1.AudioRecorder(audioRecorderEvents);
    // –°–æ–∑–¥–∞–µ–º StatusBarManager —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    const config = vscode.workspace.getConfiguration('voiceScribe');
    const statusBarConfig = {
        position: config.get('statusBarPosition', 'right'),
        showTooltips: config.get('showTooltips', true),
        enableAnimations: config.get('enableAnimations', true),
        autoHideOnSuccess: config.get('autoHideSuccess', true),
        successDisplayDuration: config.get('successDuration', 2000),
        errorDisplayDuration: config.get('errorDuration', 3000)
    };
    statusBarManager = new StatusBarManager_1.StatusBarManager(statusBarEvents, statusBarConfig);
    // –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º StatusBarManager —Å ErrorHandler
    errorHandler.setStatusBarManager(statusBarManager);
    console.log('‚úÖ Components initialized successfully');
}
/**
 * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
 */
function registerCommands(context) {
    console.log('üìù Registering commands...');
    const commands = [
        // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∑–∞–ø–∏—Å–∏
        vscode.commands.registerCommand('voiceScribe.startRecording', startRecording),
        vscode.commands.registerCommand('voiceScribe.stopRecording', stopRecording),
        vscode.commands.registerCommand('voiceScribe.toggleRecording', toggleRecording),
        // Hold-to-record –∫–æ–º–∞–Ω–¥—ã
        vscode.commands.registerCommand('voiceScribe.startHoldToRecord', startHoldToRecord),
        vscode.commands.registerCommand('voiceScribe.stopHoldToRecord', stopHoldToRecord),
        // –ö–æ–º–∞–Ω–¥—ã —Ä–µ–∂–∏–º–æ–≤ –≤—Å—Ç–∞–≤–∫–∏
        vscode.commands.registerCommand('voiceScribe.insertAtCursor', () => insertLastTranscription('cursor')),
        vscode.commands.registerCommand('voiceScribe.insertAsComment', () => insertLastTranscription('comment')),
        vscode.commands.registerCommand('voiceScribe.replaceSelection', () => insertLastTranscription('replace')),
        vscode.commands.registerCommand('voiceScribe.copyToClipboard', () => insertLastTranscription('clipboard')),
        // –£—Ç–∏–ª–∏—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        vscode.commands.registerCommand('voiceScribe.openSettings', openSettings),
        vscode.commands.registerCommand('voiceScribe.showHelp', showHelp),
        vscode.commands.registerCommand('voiceScribe.showStatus', showStatus),
        vscode.commands.registerCommand('voiceScribe.checkMicrophone', checkMicrophone),
        vscode.commands.registerCommand('voiceScribe.testApiKey', testApiKey),
        // –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        vscode.commands.registerCommand('voiceScribe.resetConfiguration', resetConfiguration),
        vscode.commands.registerCommand('voiceScribe.toggleStatusBar', toggleStatusBar)
    ];
    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –≤ –ø–æ–¥–ø–∏—Å–∫–∏
    context.subscriptions.push(...commands, statusBarManager);
    console.log(`‚úÖ Registered ${commands.length} commands`);
}
/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à –∏ key bindings
 */
function setupKeyBindings(context) {
    console.log('‚å®Ô∏è Setting up key bindings...');
    // F9 hold-to-record: –Ω–∞–∂–∞–ª = –Ω–∞—á–∞–ª –∑–∞–ø–∏—Å—å, –æ—Ç–ø—É—Å—Ç–∏–ª = –æ—Å—Ç–∞–Ω–æ–≤–∏–ª
    const keyDownCommand = vscode.commands.registerCommand('voiceScribe.keyDown', () => {
        if (!isHoldToRecordActive) {
            startHoldToRecord();
        }
    });
    const keyUpCommand = vscode.commands.registerCommand('voiceScribe.keyUp', () => {
        if (isHoldToRecordActive) {
            stopHoldToRecord();
        }
    });
    context.subscriptions.push(keyDownCommand, keyUpCommand);
    console.log('‚úÖ Key bindings configured');
}
/**
 * –ö–æ–º–∞–Ω–¥—ã –∑–∞–ø–∏—Å–∏
 */
async function startRecording() {
    const context = {
        operation: 'start_recording',
        isHoldToRecordMode: isHoldToRecordActive,
        timestamp: new Date()
    };
    try {
        console.log('‚ñ∂Ô∏è Starting recording...');
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ —Å retry
        const microphoneResult = await retryManager.retryMicrophoneOperation(async () => {
            const hasPermission = await AudioRecorder_1.AudioRecorder.checkMicrophonePermission();
            if (hasPermission.state !== 'granted') {
                throw new Error('Microphone permission not granted');
            }
            return hasPermission;
        }, 'microphone_permission_check');
        if (!microphoneResult.success) {
            const error = microphoneResult.lastError || new Error('Microphone access failed');
            const userAction = await errorHandler.handleErrorFromException(error, context);
            if (userAction) {
                await handleUserRecoveryAction(userAction, context);
            }
            return;
        }
        await audioRecorder.startRecording();
    }
    catch (error) {
        console.error('‚ùå Failed to start recording:', error);
        const userAction = await errorHandler.handleErrorFromException(error, context);
        if (userAction) {
            await handleUserRecoveryAction(userAction, context);
        }
    }
}
function stopRecording() {
    const context = {
        operation: 'stop_recording',
        isHoldToRecordMode: isHoldToRecordActive,
        timestamp: new Date()
    };
    try {
        console.log('‚èπÔ∏è Stopping recording...');
        audioRecorder.stopRecording();
    }
    catch (error) {
        console.error('‚ùå Failed to stop recording:', error);
        // –î–ª—è stop recording –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
        errorHandler.handleErrorFromException(error, context);
    }
}
function toggleRecording() {
    if (audioRecorder.getIsRecording()) {
        stopRecording();
    }
    else {
        startRecording();
    }
}
/**
 * Hold-to-record —Ñ—É–Ω–∫—Ü–∏–∏ (F9)
 */
async function startHoldToRecord() {
    if (isHoldToRecordActive) {
        return; // –£–∂–µ –∞–∫—Ç–∏–≤–µ–Ω
    }
    console.log('üéØ Starting hold-to-record mode');
    isHoldToRecordActive = true;
    try {
        await startRecording();
    }
    catch (error) {
        isHoldToRecordActive = false;
        throw error;
    }
}
function stopHoldToRecord() {
    if (!isHoldToRecordActive) {
        return; // –ù–µ –∞–∫—Ç–∏–≤–µ–Ω
    }
    console.log('üéØ Stopping hold-to-record mode');
    isHoldToRecordActive = false;
    if (audioRecorder.getIsRecording()) {
        stopRecording();
    }
}
/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
 */
async function handleTranscription(audioBlob) {
    const context = {
        operation: 'transcription',
        isHoldToRecordMode: isHoldToRecordActive,
        timestamp: new Date(),
        additionalData: { audioBlobSize: audioBlob.size }
    };
    try {
        console.log('üîÑ Starting transcription process...');
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        statusBarManager.showProcessing();
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ WhisperClient
        if (!whisperClient) {
            initializeWhisperClient();
            if (!whisperClient) {
                await errorHandler.handleError(ErrorHandler_1.ErrorType.API_KEY_MISSING, context);
                return;
            }
        }
        // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
        statusBarManager.showTranscribing();
        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        const config = vscode.workspace.getConfiguration('voiceScribe');
        const language = config.get('language', 'auto');
        const insertMode = config.get('insertMode', 'cursor');
        const prompt = config.get('prompt', '');
        // –û–ø—Ü–∏–∏ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
        const transcriptionOptions = {
            language: language === 'auto' ? undefined : language,
            prompt: prompt || undefined,
            temperature: config.get('temperature', 0.1)
        };
        console.log('üéØ Sending audio to Whisper API...');
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º retry –¥–ª—è API –∑–∞–ø—Ä–æ—Å–∞
        const transcriptionResult = await retryManager.retryApiRequest(() => whisperClient.transcribe(audioBlob, transcriptionOptions), 'whisper_transcription', {
            maxAttempts: config.get('maxRetries', 3),
            baseDelay: config.get('retryDelay', 1000)
        });
        if (!transcriptionResult.success) {
            // –ï—Å–ª–∏ retry –Ω–µ –ø–æ–º–æ–≥, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ ErrorHandler
            const error = transcriptionResult.lastError || new Error('Transcription failed after retries');
            const userAction = await errorHandler.handleErrorFromException(error, context);
            if (userAction) {
                await handleUserRecoveryAction(userAction, context);
            }
            return;
        }
        const transcribedText = transcriptionResult.result;
        if (transcribedText && transcribedText.trim()) {
            console.log('‚úÖ Transcription successful:', transcribedText.substring(0, 100));
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é
            lastTranscribedText = transcribedText.trim();
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å—Ç–∞–≤–∫–∏
            statusBarManager.showInserting();
            // –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
            await insertTranscribedTextWithErrorHandling(lastTranscribedText, insertMode, context);
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—Ö —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            const truncatedText = lastTranscribedText.substring(0, 50) + (lastTranscribedText.length > 50 ? '...' : '');
            statusBarManager.showSuccess(`Inserted: "${truncatedText}"`);
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –≤ hold-to-record —Ä–µ–∂–∏–º–µ
            if (!isHoldToRecordActive) {
                vscode.window.showInformationMessage(`‚úÖ Transcribed: "${truncatedText}"`);
            }
        }
        else {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Å—Ç–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
            const userAction = await errorHandler.handleError(ErrorHandler_1.ErrorType.TRANSCRIPTION_EMPTY, context);
            if (userAction) {
                await handleUserRecoveryAction(userAction, context);
            }
        }
    }
    catch (error) {
        console.error('‚ùå Transcription process failed:', error);
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ ErrorHandler
        const userAction = await errorHandler.handleErrorFromException(error, context);
        if (userAction) {
            await handleUserRecoveryAction(userAction, context);
        }
    }
}
/**
 * –í—Å—Ç–∞–≤–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
 */
async function insertTranscribedTextWithErrorHandling(text, mode, parentContext) {
    const context = {
        operation: 'text_insertion',
        isHoldToRecordMode: parentContext.isHoldToRecordMode,
        timestamp: new Date(),
        additionalData: {
            textLength: text.length,
            insertMode: mode,
            parentOperation: parentContext.operation
        }
    };
    try {
        console.log(`üìù Inserting text in ${mode} mode...`);
        const config = vscode.workspace.getConfiguration('voiceScribe');
        const formatText = config.get('formatText', true);
        const addNewLine = config.get('addNewLine', true);
        const indentToSelection = config.get('indentToSelection', false);
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º retry –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—Å—Ç–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞
        const insertResult = await retryManager.retry(() => textInserter.insertText(text, {
            mode: mode,
            formatText,
            addNewLine,
            indentToSelection
        }), 'text_insertion', { maxAttempts: 2, strategy: 'fixed_delay', baseDelay: 500 });
        if (!insertResult.success) {
            const error = insertResult.lastError || new Error('Text insertion failed after retries');
            const userAction = await errorHandler.handleErrorFromException(error, context);
            if (userAction) {
                await handleUserRecoveryAction(userAction, context);
            }
            throw error;
        }
        console.log('‚úÖ Text inserted successfully');
    }
    catch (error) {
        console.error('‚ùå Text insertion failed:', error);
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ ErrorHandler –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤—ã—à–µ
        if (!error.handled) {
            const userAction = await errorHandler.handleErrorFromException(error, context);
            if (userAction) {
                await handleUserRecoveryAction(userAction, context);
            }
        }
        throw error; // –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã—à–µ
    }
}
/**
 * –ö–æ–º–∞–Ω–¥—ã —Ä–µ–∂–∏–º–æ–≤ –≤—Å—Ç–∞–≤–∫–∏
 */
async function insertLastTranscription(mode) {
    if (!lastTranscribedText) {
        vscode.window.showWarningMessage('No transcribed text available. Please record something first.');
        return;
    }
    try {
        await insertTranscribedTextWithErrorHandling(lastTranscribedText, mode, {
            operation: 'text_insertion',
            isHoldToRecordMode: isHoldToRecordActive,
            timestamp: new Date(),
            additionalData: {
                textLength: lastTranscribedText.length,
                insertMode: mode,
                parentOperation: 'transcription'
            }
        });
        vscode.window.showInformationMessage(`Text inserted in ${mode} mode`);
    }
    catch (error) {
        // –û—à–∏–±–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ insertTranscribedTextWithErrorHandling
    }
}
/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WhisperClient
 */
function initializeWhisperClient() {
    console.log('üîß Initializing Whisper client...');
    const config = vscode.workspace.getConfiguration('voiceScribe');
    const apiKey = config.get('apiKey');
    if (!apiKey) {
        console.warn('‚ö†Ô∏è OpenAI API key not configured');
        statusBarManager.showWarning('API key not configured');
        return;
    }
    if (!WhisperClient_1.WhisperClient.validateApiKey(apiKey)) {
        console.error('‚ùå Invalid OpenAI API key format');
        statusBarManager.showError('Invalid API key format', 'critical');
        return;
    }
    try {
        whisperClient = new WhisperClient_1.WhisperClient({
            apiKey,
            timeout: config.get('timeout', 30000),
            maxRetries: config.get('maxRetries', 3),
            retryDelay: config.get('retryDelay', 1000),
            baseURL: config.get('baseURL') || undefined
        });
        console.log('‚úÖ Whisper client initialized successfully');
    }
    catch (error) {
        const errorMessage = `Failed to initialize Whisper client: ${error.message}`;
        console.error(errorMessage);
        statusBarManager.showError(errorMessage, 'critical');
    }
}
/**
 * –£—Ç–∏–ª–∏—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
 */
function openSettings() {
    vscode.commands.executeCommand('workbench.action.openSettings', 'voiceScribe');
}
function showHelp() {
    const helpText = `
üé§ **VoiceScribe Help**

**Recording:**
‚Ä¢ F9 (hold): Hold to record, release to stop
‚Ä¢ Toggle recording: Ctrl+Shift+V (or use command palette)

**Commands:**
‚Ä¢ Voice Scribe: Start Recording
‚Ä¢ Voice Scribe: Stop Recording  
‚Ä¢ Voice Scribe: Toggle Recording
‚Ä¢ Voice Scribe: Insert as Comment
‚Ä¢ Voice Scribe: Replace Selection

**Settings:**
‚Ä¢ OpenAI API Key (required)
‚Ä¢ Language (auto-detect or specific)
‚Ä¢ Insert Mode (cursor/comment/replace)
‚Ä¢ Audio Quality settings

**Troubleshooting:**
‚Ä¢ Check microphone permissions
‚Ä¢ Verify API key is valid
‚Ä¢ Test microphone access
`;
    vscode.window.showInformationMessage(helpText, { modal: true });
}
function showStatus() {
    const status = statusBarManager.getStatus();
    const context = textInserter.getActiveContext();
    const statusText = `
**VoiceScribe Status:**

üé§ Recording: ${status.isRecording ? 'Active' : 'Inactive'}
üìä State: ${status.state}
üîß API Client: ${whisperClient ? 'Ready' : 'Not configured'}
üìù Context: ${context.type} (${context.language || 'unknown'})
üíæ Last Error: ${status.lastError || 'None'}
üìã Last Transcription: ${lastTranscribedText ? 'Available' : 'None'}
`;
    vscode.window.showInformationMessage(statusText, { modal: true });
}
async function checkMicrophone() {
    try {
        statusBarManager.showProcessing();
        const compatibility = AudioRecorder_1.AudioRecorder.checkBrowserCompatibility();
        const permission = await AudioRecorder_1.AudioRecorder.checkMicrophonePermission();
        if (compatibility && permission) {
            statusBarManager.showSuccess('Microphone ready');
            vscode.window.showInformationMessage('‚úÖ Microphone is working correctly');
        }
        else {
            throw new Error(`Microphone check failed: ${!compatibility ? 'Incompatible browser' : 'Permission denied'}`);
        }
    }
    catch (error) {
        const errorMessage = error.message;
        statusBarManager.showError(errorMessage, 'error');
        vscode.window.showErrorMessage(`‚ùå ${errorMessage}`);
    }
}
async function testApiKey() {
    if (!whisperClient) {
        vscode.window.showWarningMessage('Please configure your OpenAI API key first');
        return;
    }
    try {
        statusBarManager.showProcessing();
        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∞—É–¥–∏–æ blob (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π WAV —Ñ–∞–π–ª)
        const testBlob = new Blob(['test'], { type: 'audio/wav' });
        try {
            await whisperClient.transcribe(testBlob);
            statusBarManager.showSuccess('API key validated');
            vscode.window.showInformationMessage('‚úÖ OpenAI API key is working correctly');
        }
        catch (error) {
            // –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏, –Ω–æ API key –≤–∞–ª–∏–¥–µ–Ω –µ—Å–ª–∏ –º—ã –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç–≤–µ—Ç –æ—Ç API
            const errorMessage = error.message;
            if (errorMessage.includes('audio') || errorMessage.includes('format')) {
                statusBarManager.showSuccess('API key validated');
                vscode.window.showInformationMessage('‚úÖ OpenAI API key is working correctly');
            }
            else {
                throw error;
            }
        }
    }
    catch (error) {
        const errorMessage = error.message;
        statusBarManager.showError(errorMessage, 'critical');
        vscode.window.showErrorMessage(`‚ùå API key test failed: ${errorMessage}`);
    }
}
function resetConfiguration() {
    vscode.window.showWarningMessage('This will reset all VoiceScribe settings to defaults. Continue?', 'Yes', 'No').then(selection => {
        if (selection === 'Yes') {
            const config = vscode.workspace.getConfiguration('voiceScribe');
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–∫—Ä–æ–º–µ API –∫–ª—é—á–∞)
            config.update('language', 'auto', vscode.ConfigurationTarget.Global);
            config.update('insertMode', 'cursor', vscode.ConfigurationTarget.Global);
            config.update('formatText', true, vscode.ConfigurationTarget.Global);
            vscode.window.showInformationMessage('‚úÖ Configuration reset to defaults');
        }
    });
}
function toggleStatusBar() {
    const status = statusBarManager.getStatus();
    if (status.isVisible) {
        statusBarManager.hide();
        vscode.window.showInformationMessage('Status bar hidden');
    }
    else {
        statusBarManager.show();
        vscode.window.showInformationMessage('Status bar shown');
    }
}
/**
 * –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
 */
function showWelcomeMessage() {
    const config = vscode.workspace.getConfiguration('voiceScribe');
    const hasApiKey = config.get('apiKey');
    if (!hasApiKey) {
        vscode.window.showInformationMessage('üé§ Welcome to VoiceScribe! Please configure your OpenAI API key to get started.', 'Open Settings').then(selection => {
            if (selection === 'Open Settings') {
                openSettings();
            }
        });
    }
}
/**
 * –§—É–Ω–∫—Ü–∏—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
 * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
 */
function deactivate() {
    console.log('üîå Deactivating VoiceScribe extension...');
    try {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–∞
        if (audioRecorder && audioRecorder.getIsRecording()) {
            console.log('‚èπÔ∏è Stopping active recording...');
            audioRecorder.stopRecording();
        }
        // –û—á–∏—â–∞–µ–º hold-to-record —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if (isHoldToRecordActive) {
            isHoldToRecordActive = false;
        }
        // –û—á–∏—â–∞–µ–º –¥–∏—Å–ø–æ–∑–∞–±–ª—ã
        if (holdToRecordDisposable) {
            holdToRecordDisposable.dispose();
        }
        console.log('‚úÖ VoiceScribe extension deactivated successfully');
    }
    catch (error) {
        console.error('‚ùå Error during deactivation:', error);
    }
}
/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
 */
async function handleUserRecoveryAction(userAction, context) {
    console.log(`üîß Handling user recovery action: ${userAction}`);
    try {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤—ã–±–æ—Ä–∞
        if (userAction === 'Open Settings') {
            await recoveryHandler.executeRecoveryAction('open_settings');
        }
        else if (userAction === 'Check Microphone') {
            await recoveryHandler.executeRecoveryAction('enable_microphone');
        }
        else if (userAction === 'Retry') {
            await recoveryHandler.executeRecoveryAction('retry');
        }
        else if (userAction === 'Check Network') {
            await recoveryHandler.executeRecoveryAction('check_network');
        }
        else if (userAction === 'Reload Extension') {
            await recoveryHandler.executeRecoveryAction('refresh_extension');
        }
    }
    catch (error) {
        console.error('‚ùå Recovery action failed:', error);
        vscode.window.showErrorMessage(`Recovery action failed: ${error.message}`);
    }
}
//# sourceMappingURL=extension.js.map