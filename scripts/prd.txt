# PRD: VS Code Speech-to-Text Extension (VoiceScribe)

## Обзор проекта
Расширение для Visual Studio Code и Cursor IDE, которое транскрибирует речь в текст с помощью OpenAI Whisper API. Обеспечивает голосовой ввод в редакторе и AI-чате.

## Техническая архитектура

### Технологический стек:
- TypeScript для разработки расширения VS Code
- VS Code Extension API для интеграции с IDE
- Web Audio API для записи аудио
- OpenAI Whisper API для транскрибации
- Node.js для серверной логики

### Основные компоненты:
1. AudioRecorder - модуль записи аудио через Web Audio API
2. WhisperClient - клиент для OpenAI Whisper API
3. TextInserter - модуль вставки текста в редактор/чат
4. StatusBarManager - UI в статус-баре VS Code
5. CommandManager - регистрация команд и горячих клавиш
6. ContextManager - определение контекста (редактор/чат)
7. CursorIntegration - специальная интеграция с Cursor IDE

## Функциональные требования

### Этап 1: Базовый MVP
- Настройка проекта расширения VS Code с TypeScript
- Реализация AudioRecorder с поддержкой Web Audio API
- Интеграция с OpenAI Whisper API через HTTP клиент
- Базовая вставка транскрибированного текста в позицию курсора
- UI элемент в статус-баре для управления записью
- Регистрация команд и горячих клавиш (F9 по умолчанию)
- Режим записи "нажал-держи" (hold-to-record)
- Базовая обработка ошибок записи и API
- Настройка конфигурации API ключа
- Запись аудио в формате WAV 16кГц моно

### Этап 2: Интеграция с Cursor IDE
- Автоматическое определение типа IDE (VS Code/Cursor)
- Определение активного контекста (редактор/чат/терминал)
- Интеграция с AI-чатом Cursor через буфер обмена
- Альтернативные методы интеграции с чатом
- Режим записи "toggle" (нажал-старт/нажал-стоп)
- Расширенная обработка ошибок API
- Фоллбэк механизмы для интеграции

### Этап 3: Полировка и оптимизация
- Предварительный просмотр транскрипции перед вставкой
- Настройки языка и качества транскрибации
- История транскрипций
- Улучшенный пользовательский интерфейс
- Кэширование для экономии API вызовов
- Сжатие больших аудио файлов
- Кроссплатформенное тестирование
- Оптимизация производительности

## Техническая реализация

### Структура проекта:
```
voice-scribe-extension/
├── package.json (манифест расширения)
├── tsconfig.json (TypeScript конфигурация)
├── webpack.config.js (сборка)
├── src/
│   ├── extension.ts (главный файл)
│   ├── core/ (основные модули)
│   ├── ui/ (пользовательский интерфейс)
│   ├── integrations/ (интеграции)
│   └── utils/ (утилиты)
├── media/ (иконки)
└── test/ (тесты)
```

### Ключевые технические требования:
- Поддержка VS Code API версии 1.74.0+
- Совместимость с Windows, macOS, Linux
- Формат аудио: WAV, 16 кГц, моно для оптимизации
- Лимит записи: до 5 минут (ограничение OpenAI API)
- Обработка файлов до 25 МБ
- Поддержка 95+ языков через Whisper

### Пользовательские сценарии:
1. Быстрые комментарии в коде через голосовой ввод
2. Вопросы в AI-чат Cursor через транскрибацию
3. Документирование функций голосом
4. Создание заметок и TODO через речь

### Критерии успеха MVP:
- Время отклика < 5 секунд для минуты аудио
- Точность транскрибации > 85% для четкой речи
- Стабильная работа без крашей
- Интуитивный пользовательский интерфейс
- Корректная работа в VS Code и Cursor IDE

## Нефункциональные требования
- Производительность: запуск записи < 200мс
- Безопасность: локальная обработка аудио, шифрование API ключей
- Надежность: graceful handling ошибок API, автоматические повторы
- Совместимость: VS Code 1.74.0+, Cursor IDE, все основные ОС 