# Product Requirements Document: Обновление тестов и исправление команд VS Code Speech-to-Text Extension

## Обзор проекта
Проект представляет собой расширение VS Code для преобразования речи в текст с использованием OpenAI Whisper API. Расширение поддерживает интеграцию с Cursor IDE и включает три основные команды записи:
- `speechToTextWhisper.recordAndInsertOrClipboard` (Ctrl+Shift+M)
- `speechToTextWhisper.recordAndInsertToCurrentChat` (Ctrl+Shift+N) 
- `speechToTextWhisper.recordAndOpenNewChat` (F9)

## Проблемы, которые нужно решить

### 1. Устаревшие тесты
- Текущие тесты не соответствуют актуальной архитектуре расширения
- Отсутствуют полноценные интеграционные тесты для команд
- Тесты не покрывают новую архитектуру с RecordingStateManager
- Мокирование компонентов не соответствует текущей структуре

### 2. Неработающие команды
- При нажатии клавиш (Ctrl+Shift+M, Ctrl+Shift+N, F9) команды не активируются
- Возможные проблемы с регистрацией команд или их выполнением
- Нужна диагностика активации расширения

### 3. Отсутствие современных тестовых практик
- Не используются современные подходы к тестированию VS Code расширений
- Отсутствуют E2E тесты
- Нет тестов для интеграции с FFmpeg

## Технические требования

### Технологический стек
- TypeScript
- VS Code Extension API
- Mocha (тестовый фреймворк)
- Sinon (мокирование)
- FFmpeg для записи аудио
- OpenAI Whisper API

### Архитектура тестирования
1. **Модульные тесты (Unit Tests)**
   - Тестирование изолированных компонентов
   - Мокирование зависимостей
   - Покрытие всех основных классов

2. **Интеграционные тесты (Integration Tests)**
   - Тестирование взаимодействия компонентов
   - Тестирование команд VS Code
   - Тестирование событий и состояний

3. **E2E тесты (End-to-End Tests)**
   - Полный цикл записи и обработки
   - Тестирование пользовательских сценариев

## Функциональные требования

### 1. Новые тесты для команд
- Тесты для всех трех основных команд записи
- Проверка корректной работы RecordingStateManager
- Тестирование переключения между режимами записи
- Проверка обработки ошибок

### 2. Тесты для компонентов
- FFmpegAudioRecorder - инициализация, запись, остановка
- WhisperClient - транскрибация аудио
- TextInserter - вставка текста в редактор
- StatusBarManager - управление статусной строкой
- ErrorHandler - обработка ошибок
- RetryManager - повторные попытки

### 3. Тесты интеграции
- Cursor Integration - работа с чатами Cursor
- Device Manager - управление аудио устройствами
- Settings Provider - управление настройками

### 4. Диагностика команд
- Проверка регистрации команд
- Диагностика активации расширения
- Тестирование клавиатурных привязок

## Нефункциональные требования

### Производительность
- Тесты должны выполняться быстро (< 30 секунд для полного набора)
- Параллельное выполнение где возможно
- Эффективное мокирование внешних зависимостей

### Надежность
- 100% стабильность тестов
- Отсутствие флакирования (flaky tests)
- Корректная очистка ресурсов после тестов

### Сопровождаемость
- Четкая структура тестов
- Понятные названия тестов
- Хорошая документация
- Легкость добавления новых тестов

## Критерии приемки

### 1. Все команды работают корректно
- [ ] Ctrl+Shift+M запускает/останавливает запись и вставляет в курсор/буфер
- [ ] Ctrl+Shift+N запускает/останавливает запись и отправляет в текущий чат
- [ ] F9 запускает/останавливает запись и открывает новый чат

### 2. Полное покрытие тестами
- [ ] Модульные тесты покрывают все основные классы (>90%)
- [ ] Интеграционные тесты покрывают все команды
- [ ] E2E тесты покрывают основные пользовательские сценарии

### 3. Качество тестов
- [ ] Все тесты проходят стабильно
- [ ] Тесты выполняются за разумное время
- [ ] Понятная структура и документация
- [ ] Корректное мокирование внешних зависимостей

### 4. Диагностика
- [ ] Создана система диагностики для выявления проблем с командами
- [ ] Добавлены команды для тестирования компонентов
- [ ] Логирование для отладки проблем

## Приоритеты

### Высокий приоритет
1. Исправление проблем с командами
2. Создание базовых модульных тестов
3. Тестирование команд записи

### Средний приоритет
1. Интеграционные тесты
2. Тесты для компонентов интеграции
3. Улучшение системы диагностики

### Низкий приоритет
1. E2E тесты
2. Тесты производительности
3. Расширенная диагностика

## Ограничения и зависимости

### Технические ограничения
- Использование существующей архитектуры проекта
- Совместимость с VS Code Extension API
- Поддержка всех платформ (Windows, macOS, Linux)

### Внешние зависимости
- FFmpeg должен быть установлен в системе
- OpenAI API ключ для тестирования Whisper
- Cursor IDE для тестирования интеграции

## Метрики успеха
- Все команды работают без ошибок
- Покрытие кода тестами > 90%
- Время выполнения всех тестов < 30 секунд
- 0 флакирующих тестов
- Возможность быстро диагностировать проблемы пользователей 