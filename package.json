{
  "name": "speech-to-text-whisper",
  "displayName": "Speech to Text with Whisper",
  "description": "Transform speech to text using OpenAI Whisper API with seamless VS Code and Cursor IDE integration",
  "version": "0.1.7",
  "publisher": "speak-y",
  "icon": "media/icon.png",
  "galleryBanner": {
    "color": "#1e1e1e",
    "theme": "dark"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/speak-y/vs-code-speech-to-text"
  },
  "bugs": {
    "url": "https://github.com/speak-y/vs-code-speech-to-text/issues"
  },
  "homepage": "https://github.com/speak-y/vs-code-speech-to-text#readme",
  "license": "MIT",
  "engines": {
    "vscode": "^1.74.0"
  },
  "categories": [
    "Other",
    "Chat",
    "AI"
  ],
  "keywords": [
    "speech",
    "voice",
    "transcription",
    "whisper",
    "openai",
    "audio",
    "ai",
    "cursor",
    "dictation",
    "accessibility",
    "ffmpeg",
    "cross-platform",
    "recording"
  ],
  "activationEvents": [
    "onStartupFinished",
    "onCommand:speechToTextWhisper.recordAndInsertOrClipboard",
    "onCommand:speechToTextWhisper.recordAndOpenNewChat",
    "onCommand:speechToTextWhisper.runDiagnostics",
    "onCommand:speechToTextWhisper.openSettings",
    "onCommand:speechToTextWhisper.toggleMode"
  ],
  "main": "./dist/extension.js",
  "contributes": {
    "viewsContainers": {
      "activitybar": [
        {
          "id": "speechToTextWhisper",
          "title": "Speech to Text",
          "icon": "$(mic)"
        }
      ]
    },
    "views": {
      "speechToTextWhisper": [
        {
          "id": "speechToTextWhisper.deviceManager",
          "name": "Device Manager",
          "when": "true"
        },
        {
          "id": "speechToTextWhisper.modeSelector",
          "name": "Text insertion mode",
          "when": "true"
        },
        {
          "id": "speechToTextWhisper.settings",
          "name": "Settings",
          "when": "true"
        },
        {
          "id": "speechToTextWhisper.diagnostics",
          "name": "Diagnostics",
          "when": "true"
        }
      ]
    },
    "commands": [
      {
        "command": "speechToTextWhisper.recordAndInsertOrClipboard",
        "title": "Record and Insert to Cursor or Clipboard",
        "category": "Speech to Text with Whisper",
        "icon": "$(edit)"
      },
      {
        "command": "speechToTextWhisper.recordAndOpenNewChat",
        "title": "Record and Open New Chat",
        "category": "Speech to Text with Whisper",
        "icon": "$(comment-discussion)"
      },
      {
        "command": "speechToTextWhisper.runDiagnostics",
        "title": "Run Diagnostics",
        "category": "Speech to Text with Whisper",
        "icon": "$(debug-alt)"
      },
      {
        "command": "speechToTextWhisper.testFFmpeg",
        "title": "Test FFmpeg Availability",
        "category": "Speech to Text with Whisper",
        "icon": "$(tools)"
      },
      {
        "command": "speechToTextWhisper.testAudioRecorder",
        "title": "Test Audio Recorder Initialization",
        "category": "Speech to Text with Whisper",
        "icon": "$(debug-console)"
      },
      {
        "command": "speechToTextWhisper.openSettings",
        "title": "Open Settings",
        "category": "Speech to Text with Whisper",
        "icon": "$(settings-gear)"
      },
      {
        "command": "speechToTextWhisper.toggleMode",
        "title": "Toggle Recording Mode",
        "category": "Speech to Text with Whisper",
        "icon": "$(arrow-swap)"
      },
      {
        "command": "speechToTextWhisper.setMode",
        "title": "Set Recording Mode",
        "category": "Speech to Text with Whisper"
      },
      {
        "command": "speechToTextWhisper.audioSettings.selectDevice",
        "title": "Select Audio Device",
        "category": "Speech to Text with Whisper"
      }
    ],
    "keybindings": [
      {
        "command": "speechToTextWhisper.recordAndOpenNewChat",
        "key": "ctrl+shift+n",
        "mac": "cmd+shift+n"
      },
      {
        "command": "speechToTextWhisper.recordAndInsertOrClipboard",
        "key": "ctrl+shift+m",
        "mac": "cmd+shift+m"
      }
    ],
    "menus": {
      "view/title": [
        {
          "command": "speechToTextWhisper.recordAndInsertOrClipboard",
          "when": "view == speechToTextWhisper.diagnostics",
          "group": "navigation"
        },
        {
          "command": "speechToTextWhisper.recordAndOpenNewChat",
          "when": "view == speechToTextWhisper.diagnostics",
          "group": "navigation"
        },
        {
          "command": "speechToTextWhisper.runDiagnostics",
          "when": "view == speechToTextWhisper.diagnostics",
          "group": "navigation"
        },
        {
          "command": "speechToTextWhisper.openSettings",
          "when": "view == speechToTextWhisper.settings",
          "group": "navigation"
        }
      ]
    },
    "configuration": {
      "title": "Speech to Text with Whisper",
      "properties": {
        "speechToTextWhisper.apiKey": {
          "type": "string",
          "description": "OpenAI API Key for Whisper transcription",
          "scope": "application",
          "order": 1
        },
        "speechToTextWhisper.language": {
          "type": "string",
          "default": "auto",
          "description": "Language for transcription (auto-detect if 'auto')",
          "enum": [
            "auto",
            "en",
            "ru",
            "es",
            "fr",
            "de",
            "it",
            "pt",
            "zh",
            "ja",
            "ko",
            "ar",
            "bg",
            "ca",
            "cs",
            "da",
            "el",
            "et",
            "fi",
            "he",
            "hi",
            "hr",
            "hu",
            "is",
            "id",
            "lv",
            "lt",
            "mk",
            "ms",
            "mt",
            "nl",
            "no",
            "pl",
            "ro",
            "sk",
            "sl",
            "sr",
            "sv",
            "th",
            "tr",
            "uk",
            "vi"
          ],
          "enumDescriptions": [
            "Auto-detect language",
            "English",
            "Russian",
            "Spanish",
            "French",
            "German",
            "Italian",
            "Portuguese",
            "Chinese",
            "Japanese",
            "Korean",
            "Arabic",
            "Bulgarian",
            "Catalan",
            "Czech",
            "Danish",
            "Greek",
            "Estonian",
            "Finnish",
            "Hebrew",
            "Hindi",
            "Croatian",
            "Hungarian",
            "Icelandic",
            "Indonesian",
            "Latvian",
            "Lithuanian",
            "Macedonian",
            "Malay",
            "Maltese",
            "Dutch",
            "Norwegian",
            "Polish",
            "Romanian",
            "Slovak",
            "Slovenian",
            "Serbian",
            "Swedish",
            "Thai",
            "Turkish",
            "Ukrainian",
            "Vietnamese"
          ],
          "order": 2
        },
        "speechToTextWhisper.whisperModel": {
          "type": "string",
          "enum": [
            "whisper-1"
          ],
          "default": "whisper-1",
          "description": "OpenAI Whisper model to use for transcription",
          "order": 3
        },
        "speechToTextWhisper.prompt": {
          "type": "string",
          "default": "",
          "description": "Optional context prompt to improve transcription accuracy",
          "order": 4
        },
        "speechToTextWhisper.temperature": {
          "type": "number",
          "default": 0.1,
          "minimum": 0,
          "maximum": 1,
          "description": "OpenAI temperature (0 = deterministic, 1 = creative)",
          "order": 5
        },
        "speechToTextWhisper.audioQuality": {
          "type": "string",
          "enum": [
            "standard",
            "high",
            "ultra"
          ],
          "default": "standard",
          "description": "Audio recording quality",
          "enumDescriptions": [
            "Standard quality (16kHz, adequate for most speech)",
            "High quality (44.1kHz, better accuracy)",
            "Ultra quality (48kHz, maximum accuracy)"
          ],
          "order": 6
        },
        "speechToTextWhisper.ffmpegPath": {
          "type": "string",
          "default": "",
          "description": "Path to FFmpeg executable (leave empty for auto-detection)",
          "scope": "application",
          "order": 7  
        },
        "speechToTextWhisper.showStatusBar": {
          "type": "boolean",
          "default": true,
          "description": "Show recording status in status bar",
          "order": 8
        },
        "speechToTextWhisper.maxRecordingDuration": {
          "type": "number",
          "default": 3600,
          "minimum": 5,
          "maximum": 7200,
          "description": "Maximum recording duration in seconds",
          "order": 9
        },
        "speechToTextWhisper.timeout": {
          "type": "number",
          "default": 30000,
          "minimum": 5000,
          "maximum": 120000,
          "description": "API request timeout in milliseconds",
          "order": 10
        },
        "speechToTextWhisper.maxRetries": {
          "type": "number",
          "default": 3,
          "minimum": 0,
          "maximum": 10,
          "description": "Maximum number of retry attempts for failed API requests",
          "order": 11
        },
        "speechToTextWhisper.silenceDetection": {
          "type": "boolean",
          "default": true,
          "description": "Automatically stop recording when silence is detected",
          "order": 12
        },
        "speechToTextWhisper.silenceDuration": {
          "type": "number",
          "default": 3,
          "minimum": 1,
          "maximum": 10,
          "description": "Duration of silence in seconds before automatically stopping recording",
          "order": 13
        },
        "speechToTextWhisper.silenceThreshold": {
          "type": "number",
          "default": 30,
          "minimum": 20,
          "maximum": 80,
          "description": "Silence threshold value (20-80). Higher values are more sensitive to silence.",
          "order": 14
        },
        "speechToTextWhisper.inputDevice": {
          "type": "string",
          "default": "auto",
          "description": "Audio input device for recording ('auto' for automatic detection)",
          "order": 15
        }
      }
    }
  },
  "scripts": {
    "vscode:prepublish": "node esbuild.js --production",
    "compile": "node esbuild.js",
    "compile:tsc": "tsc -p ./tsconfig.test.json",
    "watch": "node esbuild.js --watch",
    "pretest": "npm run compile:tsc && npm run lint",
    "lint": "eslint src",
    "test": "vscode-test",
    "test:unit": "mocha out/test/unit/**/*.test.js --timeout 5000",
    "test:integration": "vscode-test",
    "test:cursor": "npm run compile && vscode-test --grep \"Cursor Integration - Real IDE Tests\"",
    "package": "node esbuild.js && vsce package"
  },
  "devDependencies": {
    "@istanbuljs/nyc-config-typescript": "^1.0.2",
    "@types/mocha": "^10.0.10",
    "@types/nock": "^10.0.3",
    "@types/node": "20.x",
    "@types/sinon": "^17.0.4",
    "@types/tmp": "^0.2.6",
    "@types/vscode": "^1.74.0",
    "@types/which": "^3.0.4",
    "@typescript-eslint/eslint-plugin": "^8.31.1",
    "@typescript-eslint/parser": "^8.31.1",
    "@vscode/test-cli": "^0.0.10",
    "@vscode/test-electron": "^2.5.2",
    "esbuild": "^0.25.3",
    "eslint": "^9.25.1",
    "mocha": "^11.5.0",
    "nock": "^14.0.4",
    "npm-run-all": "^4.1.5",
    "nyc": "^17.1.0",
    "sinon": "^20.0.0",
    "source-map-support": "^0.5.21",
    "ts-node": "^10.9.2",
    "typescript": "^5.8.3"
  },
  "nyc": {
    "extends": "@istanbuljs/nyc-config-typescript",
    "include": [
      "out/core/**/*.js",
      "out/ui/**/*.js",
      "out/utils/**/*.js",
      "out/integrations/**/*.js"
    ],
    "exclude": [
      "out/test/**/*.js",
      "out/**/*.test.js",
      "out/mocks/**/*.js"
    ],
    "reporter": [
      "text",
      "html",
      "lcov"
    ],
    "all": true,
    "check-coverage": true,
    "lines": 80,
    "statements": 80,
    "functions": 80,
    "branches": 70
  },
  "dependencies": {
    "task-master-ai": "^0.15.0",
    "tmp": "^0.2.3",
    "which": "^5.0.0"
  }
}
