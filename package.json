{
  "name": "speech-to-text-whisper",
  "displayName": "Speech to Text with Whisper",
  "description": "Transform speech to text using OpenAI Whisper API with seamless VS Code and Cursor IDE integration",
  "version": "0.1.0",
  "publisher": "speak-y",
  "icon": "media/icon.png",
  "galleryBanner": {
    "color": "#1e1e1e",
    "theme": "dark"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/alexstich/vs-code-speech-to-text"
  },
  "bugs": {
    "url": "https://github.com/alexstich/vs-code-speech-to-text/issues"
  },
  "homepage": "https://github.com/alexstich/vs-code-speech-to-text#readme",
  "license": "MIT",
  "engines": {
    "vscode": "^1.74.0"
  },
  "categories": [
    "Other",
    "Machine Learning",
    "Productivity"
  ],
  "keywords": [
    "speech",
    "voice",
    "transcription",
    "whisper",
    "openai",
    "audio",
    "ai",
    "cursor",
    "dictation",
    "accessibility"
  ],
  "activationEvents": [
    "onCommand:speechToTextWhisper.startRecording",
    "onCommand:speechToTextWhisper.toggleRecording",
    "onCommand:speechToTextWhisper.sendToChat"
  ],
  "main": "./dist/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "speechToTextWhisper.startRecording",
        "title": "Start Voice Recording",
        "category": "Speech to Text with Whisper",
        "icon": "$(record)"
      },
      {
        "command": "speechToTextWhisper.stopRecording",
        "title": "Stop Voice Recording",
        "category": "Speech to Text with Whisper",
        "icon": "$(record)"
      },
      {
        "command": "speechToTextWhisper.toggleRecording",
        "title": "Toggle Voice Recording",
        "category": "Speech to Text with Whisper",
        "icon": "$(mic)"
      },
      {
        "command": "speechToTextWhisper.startHoldToRecord",
        "title": "Start Hold-to-Record",
        "category": "Speech to Text with Whisper",
        "icon": "$(mic)"
      },
      {
        "command": "speechToTextWhisper.stopHoldToRecord",
        "title": "Stop Hold-to-Record",
        "category": "Speech to Text with Whisper",
        "icon": "$(mic-filled)"
      },
      {
        "command": "speechToTextWhisper.insertAtCursor",
        "title": "Insert Last Transcription at Cursor",
        "category": "Speech to Text with Whisper",
        "icon": "$(edit)"
      },
      {
        "command": "speechToTextWhisper.insertAsComment",
        "title": "Insert Last Transcription as Comment",
        "category": "Speech to Text with Whisper",
        "icon": "$(comment)"
      },
      {
        "command": "speechToTextWhisper.replaceSelection",
        "title": "Replace Selection with Last Transcription",
        "category": "Speech to Text with Whisper",
        "icon": "$(replace)"
      },
      {
        "command": "speechToTextWhisper.copyToClipboard",
        "title": "Copy Last Transcription to Clipboard",
        "category": "Speech to Text with Whisper",
        "icon": "$(clippy)"
      },
      {
        "command": "speechToTextWhisper.sendToChat",
        "title": "Record and Send to AI Chat",

        "icon": "$(comment-discussion)"
      },
      {
        "command": "speechToTextWhisper.openSettings",
        "title": "Open Speech to Text with Whisper Settings",
        "category": "Speech to Text with Whisper",
        "icon": "$(settings-gear)"
      },
      {
        "command": "speechToTextWhisper.showHelp",
        "title": "Show Speech to Text with Whisper Help",
        "category": "Speech to Text with Whisper",
        "icon": "$(question)"
      },
      {
        "command": "speechToTextWhisper.showStatus",
        "title": "Show Speech to Text with Whisper Status",
        "category": "Speech to Text with Whisper",
        "icon": "$(info)"
      },
      {
        "command": "speechToTextWhisper.checkMicrophone",
        "title": "Check Microphone",
        "category": "Speech to Text with Whisper",
        "icon": "$(device-microphone)"
      },
      {
        "command": "speechToTextWhisper.testApiKey",
        "title": "Test OpenAI API Key",
        "category": "Speech to Text with Whisper",
        "icon": "$(key)"
      },
      {
        "command": "speechToTextWhisper.showContext",
        "title": "Show Context Information",
        "category": "Speech to Text with Whisper",
        "icon": "$(info)"
      },
      {
        "command": "speechToTextWhisper.refreshContext",
        "title": "Refresh Context",
        "category": "Speech to Text with Whisper",
        "icon": "$(refresh)"
      },
      {
        "command": "speechToTextWhisper.sendToChat",
        "title": "Send Last Transcription to Cursor Chat",
        "category": "Speech to Text with Whisper",
        "icon": "$(comment-discussion)"
      },
      {
          "command": "speechToTextWhisper.recordAndSendToChat",
        "title": "Record and Send to Cursor Chat",
        "category": "Speech to Text with Whisper",
        "icon": "$(microphone)"
      },
      {
        "command": "speechToTextWhisper.resetConfiguration",
        "title": "Reset Configuration",
        "category": "Speech to Text with Whisper",
        "icon": "$(refresh)"
      },
      {
        "command": "speechToTextWhisper.toggleStatusBar",
        "title": "Toggle Status Bar",
        "category": "Speech to Text with Whisper",
        "icon": "$(eye)"
      },
      {
        "command": "speechToTextWhisper.showQualitySettings",
        "title": "Show Audio Quality Settings",
        "category": "Speech to Text with Whisper",
        "icon": "$(settings)"
      },
      {
        "command": "speechToTextWhisper.applyQualityPreset",
        "title": "Apply Audio Quality Preset",
        "category": "Speech to Text with Whisper",
        "icon": "$(star)"
      },
      {
        "command": "speechToTextWhisper.optimizeForContext",
        "title": "Optimize Audio for Context",
        "category": "Speech to Text with Whisper",
        "icon": "$(target)"
      },
      {
        "command": "speechToTextWhisper.exportQualitySettings",
        "title": "Export Audio Quality Settings",
        "category": "Speech to Text with Whisper",
        "icon": "$(export)"
      },
      {
        "command": "speechToTextWhisper.importQualitySettings",
        "title": "Import Audio Quality Settings",
        "category": "Speech to Text with Whisper",
        "icon": "$(import)"
      }
    ],
    "keybindings": [
      {
        "command": "speechToTextWhisper.startHoldToRecord",
        "key": "F9",
        "when": "!speechToTextWhisper.holdToRecordActive && speechToTextWhisper.recordingMode == 'hold'"
      },
      {
        "command": "speechToTextWhisper.stopHoldToRecord",
        "key": "F9",
        "when": "speechToTextWhisper.holdToRecordActive && speechToTextWhisper.recordingMode == 'hold'"
      },
      {
        "command": "speechToTextWhisper.toggleRecording",
        "key": "F9",
        "when": "speechToTextWhisper.recordingMode == 'toggle'"
      },
      {
        "command": "speechToTextWhisper.toggleRecording",
        "key": "ctrl+shift+v",
        "mac": "cmd+shift+v",
        "when": "editorTextFocus"
      },
      {
        "command": "speechToTextWhisper.sendToChat",
        "key": "ctrl+shift+alt+v",
        "mac": "cmd+shift+alt+v",
        "when": "true"
      },
      {
        "command": "speechToTextWhisper.insertAsComment",
        "key": "ctrl+shift+c",
        "mac": "cmd+shift+c",
        "when": "editorTextFocus"
      },
      {
        "command": "speechToTextWhisper.showHelp",
        "key": "F1",
        "when": "speechToTextWhisper.active"
      }
    ],
    "menus": {
      "editor/context": [
        {
          "command": "speechToTextWhisper.toggleRecording",
          "group": "speechToTextWhisper",
          "when": "editorTextFocus"
        },
        {
          "command": "speechToTextWhisper.insertAsComment",
          "group": "speechToTextWhisper",
          "when": "editorTextFocus"
        }
      ],
      "commandPalette": [
        {
          "command": "speechToTextWhisper.startRecording",
          "when": "true"
        },
        {
          "command": "speechToTextWhisper.stopRecording",
          "when": "speechToTextWhisper.isRecording"
        },
        {
          "command": "speechToTextWhisper.toggleRecording",
          "when": "true"
        },
        {
          "command": "speechToTextWhisper.sendToChat",
          "when": "true"
        },
        {
          "command": "speechToTextWhisper.insertAsComment",
          "when": "editorTextFocus"
        },
        {
          "command": "speechToTextWhisper.openSettings",
          "when": "true"
        }
      ]
    },
    "configuration": {
      "title": "Speech to Text with Whisper",
      "properties": {
        "speechToTextWhisper.apiKey": {
          "type": "string",
          "description": "OpenAI API Key for Whisper transcription",
          "scope": "application",
          "order": 1
        },
        "speechToTextWhisper.language": {
          "type": "string",
          "default": "auto",
          "description": "Language for transcription (auto-detect if 'auto')",
          "enum": [
            "auto",
            "en",
            "ru",
            "es",
            "fr",
            "de",
            "it",
            "pt",
            "zh",
            "ja",
            "ko",
            "ar",
            "bg",
            "ca",
            "cs",
            "da",
            "el",
            "et",
            "fi",
            "he",
            "hi",
            "hr",
            "hu",
            "is",
            "id",
            "lv",
            "lt",
            "mk",
            "ms",
            "mt",
            "nl",
            "no",
            "pl",
            "ro",
            "sk",
            "sl",
            "sr",
            "sv",
            "th",
            "tr",
            "uk",
            "vi"
          ],
          "enumDescriptions": [
            "Auto-detect language",
            "English",
            "Russian",
            "Spanish",
            "French",
            "German",
            "Italian",
            "Portuguese",
            "Chinese",
            "Japanese",
            "Korean",
            "Arabic",
            "Bulgarian",
            "Catalan",
            "Czech",
            "Danish",
            "Greek",
            "Estonian",
            "Finnish",
            "Hebrew",
            "Hindi",
            "Croatian",
            "Hungarian",
            "Icelandic",
            "Indonesian",
            "Latvian",
            "Lithuanian",
            "Macedonian",
            "Malay",
            "Maltese",
            "Dutch",
            "Norwegian",
            "Polish",
            "Romanian",
            "Slovak",
            "Slovenian",
            "Serbian",
            "Swedish",
            "Thai",
            "Turkish",
            "Ukrainian",
            "Vietnamese"
          ],
          "order": 2
        },
        "speechToTextWhisper.whisperModel": {
          "type": "string",
          "enum": [
            "whisper-1"
          ],
          "default": "whisper-1",
          "description": "OpenAI Whisper model to use for transcription",
          "order": 2.1
        },
        "speechToTextWhisper.languageDetectionConfidence": {
          "type": "number",
          "default": 0.8,
          "minimum": 0.1,
          "maximum": 1,
          "description": "Minimum confidence threshold for auto language detection",
          "order": 2.2
        },
        "speechToTextWhisper.recordingMode": {
          "type": "string",
          "enum": [
            "hold",
            "toggle"
          ],
          "default": "hold",
          "description": "Recording mode: hold button or toggle on/off",
          "order": 3
        },
        "speechToTextWhisper.insertMode": {
          "type": "string",
          "enum": [
            "cursor",
            "comment",
            "replace"
          ],
          "default": "cursor",
          "description": "How to insert transcribed text",
          "enumDescriptions": [
            "Insert at cursor position",
            "Insert as comment",
            "Replace selected text"
          ],
          "order": 4
        },
        "speechToTextWhisper.audioQuality": {
          "type": "string",
          "enum": [
            "standard",
            "high",
            "ultra"
          ],
          "default": "standard",
          "description": "Audio recording quality",
          "enumDescriptions": [
            "Standard quality (16kHz, adequate for most speech)",
            "High quality (44.1kHz, better accuracy)",
            "Ultra quality (48kHz, maximum accuracy)"
          ],
          "order": 5
        },
        "speechToTextWhisper.audioFormat": {
          "type": "string",
          "enum": [
            "wav",
            "mp3",
            "webm"
          ],
          "default": "wav",
          "description": "Audio format for transcription",
          "enumDescriptions": [
            "WAV format (uncompressed, best quality)",
            "MP3 format (compressed, smaller size)",
            "WebM format (modern, good compression)"
          ],
          "order": 5.1
        },
        "speechToTextWhisper.noiseReduction": {
          "type": "boolean",
          "default": true,
          "description": "Apply noise reduction to audio before transcription",
          "order": 5.2
        },
        "speechToTextWhisper.autoGain": {
          "type": "boolean",
          "default": true,
          "description": "Automatically adjust microphone gain for optimal levels",
          "order": 5.3
        },
        "speechToTextWhisper.enableCursorIntegration": {
          "type": "boolean",
          "default": true,
          "description": "Enable integration with Cursor AI chat",
          "order": 6
        },
        "speechToTextWhisper.cursorStrategy": {
          "type": "string",
          "enum": [
            "clipboard",
            "command_palette",
            "focus_chat",
            "send_to_chat"
          ],
          "default": "clipboard",
          "description": "Strategy for Cursor chat integration",
          "enumDescriptions": [
            "Copy to clipboard and paste in chat",
            "Use command palette to send",
            "Focus chat panel and insert",
            "Direct send to chat API"
          ],
          "order": 7
        },
        "speechToTextWhisper.autoSendToChat": {
          "type": "boolean",
          "default": false,
          "description": "Automatically send transcription to Cursor chat when chat context is detected",
          "order": 8
        },
        "speechToTextWhisper.cursorPrefixText": {
          "type": "string",
          "default": "",
          "description": "Text to add before transcription when sending to Cursor chat",
          "order": 9
        },
        "speechToTextWhisper.cursorSuffixText": {
          "type": "string",
          "default": "",
          "description": "Text to add after transcription when sending to Cursor chat",
          "order": 10
        },
        "speechToTextWhisper.cursorUseMarkdown": {
          "type": "boolean",
          "default": true,
          "description": "Format text with markdown when sending to Cursor chat",
          "order": 21.5
        },
        "speechToTextWhisper.showStatusBar": {
          "type": "boolean",
          "default": true,
          "description": "Show recording status in status bar",
          "order": 12
        },
        "speechToTextWhisper.autoDetectContext": {
          "type": "boolean",
          "default": true,
          "description": "Automatically detect IDE context (editor, chat, terminal)",
          "order": 13
        },
        "speechToTextWhisper.maxRecordingDuration": {
          "type": "number",
          "default": 60,
          "minimum": 5,
          "maximum": 300,
          "description": "Maximum recording duration in seconds",
          "order": 14
        },
        "speechToTextWhisper.prompt": {
          "type": "string",
          "default": "",
          "description": "Optional context prompt to improve transcription accuracy",
          "order": 15
        },
        "speechToTextWhisper.responseFormat": {
          "type": "string",
          "enum": [
            "text",
            "json",
            "verbose_json"
          ],
          "default": "text",
          "description": "Response format from Whisper API",
          "enumDescriptions": [
            "Plain text response",
            "JSON with basic metadata",
            "Detailed JSON with timestamps and confidence"
          ],
          "order": 15.1
        },
        "speechToTextWhisper.enableTimestamps": {
          "type": "boolean",
          "default": false,
          "description": "Include timestamps in transcription (requires JSON format)",
          "order": 15.2
        },
        "speechToTextWhisper.silenceDetection": {
          "type": "boolean",
          "default": true,
          "description": "Automatically detect silence and stop recording",
          "order": 15.3
        },
        "speechToTextWhisper.silenceThreshold": {
          "type": "number",
          "default": 2,
          "minimum": 0.5,
          "maximum": 10,
          "description": "Silence duration in seconds before auto-stop",
          "order": 15.4
        },
        "speechToTextWhisper.temperature": {
          "type": "number",
          "default": 0.1,
          "minimum": 0,
          "maximum": 1,
          "description": "OpenAI temperature (0 = deterministic, 1 = creative)",
          "order": 16
        },
        "speechToTextWhisper.timeout": {
          "type": "number",
          "default": 30000,
          "minimum": 5000,
          "maximum": 120000,
          "description": "API request timeout in milliseconds",
          "order": 17
        },
        "speechToTextWhisper.maxRetries": {
          "type": "number",
          "default": 3,
          "minimum": 0,
          "maximum": 10,
          "description": "Maximum number of retry attempts for failed API requests",
          "order": 18
        },
        "speechToTextWhisper.retryDelay": {
          "type": "number",
          "default": 1000,
          "minimum": 100,
          "maximum": 10000,
          "description": "Delay between retry attempts in milliseconds",
          "order": 19
        },
        "speechToTextWhisper.formatText": {
          "type": "boolean",
          "default": true,
          "description": "Format transcribed text (capitalize, trim whitespace)",
          "order": 20
        },
        "speechToTextWhisper.addNewLine": {
          "type": "boolean",
          "default": true,
          "description": "Add new line after inserted text",
          "order": 21
        },
        "speechToTextWhisper.indentToSelection": {
          "type": "boolean",
          "default": false,
          "description": "Indent inserted text to match selection",
          "order": 22
        },
        "speechToTextWhisper.statusBarPosition": {
          "type": "string",
          "enum": [
            "left",
            "right"
          ],
          "default": "right",
          "description": "Position of status bar indicator",
          "order": 23
        },
        "speechToTextWhisper.showTooltips": {
          "type": "boolean",
          "default": true,
          "description": "Show helpful tooltips in status bar",
          "order": 24
        },
        "speechToTextWhisper.enableAnimations": {
          "type": "boolean",
          "default": true,
          "description": "Enable status bar animations",
          "order": 25
        },
        "speechToTextWhisper.autoHideSuccess": {
          "type": "boolean",
          "default": true,
          "description": "Automatically hide success messages",
          "order": 26
        },
        "speechToTextWhisper.successDuration": {
          "type": "number",
          "default": 2000,
          "minimum": 500,
          "maximum": 10000,
          "description": "Duration to show success messages (ms)",
          "order": 27
        },
        "speechToTextWhisper.errorDuration": {
          "type": "number",
          "default": 3000,
          "minimum": 1000,
          "maximum": 10000,
          "description": "Duration to show error messages (ms)",
          "order": 28
        },
        "speechToTextWhisper.baseURL": {
          "type": "string",
          "default": "",
          "description": "Custom OpenAI API base URL (leave empty for default)",
          "order": 29
        }
      }
    }
  },
  "scripts": {
    "pretest": "npm run compile-tests && npm run compile && npm run lint",
    "compile-tests": "tsc -p . --outDir out",
    "compile": "npm run check-types && npm run lint && node esbuild.js",
    "test": "vscode-test",
    "test:unit": "npm run pretest && nyc mocha out/test/unit/**/*.test.js",
    "test:integration": "npm run pretest && nyc mocha out/test/integration/**/*.test.js",
    "test:coverage": "npm run pretest && nyc --reporter=html --reporter=text mocha out/test/**/*.test.js",
    "test:watch": "npm run compile-tests && mocha --watch out/test/**/*.test.js",
    "coverage:report": "nyc report --reporter=html --reporter=text",
    "coverage:check": "nyc check-coverage --lines 80 --functions 80 --branches 70 --statements 80",
    "check-types": "tsc --noEmit",
    "lint": "eslint src",
    "watch": "tsc -watch -p .",
    "package": "vsce package"
  },
  "devDependencies": {
    "@istanbuljs/nyc-config-typescript": "^1.0.2",
    "@types/mocha": "^10.0.10",
    "@types/nock": "^10.0.3",
    "@types/node": "20.x",
    "@types/sinon": "^17.0.4",
    "@types/vscode": "^1.74.0",
    "@typescript-eslint/eslint-plugin": "^8.31.1",
    "@typescript-eslint/parser": "^8.31.1",
    "@vscode/test-cli": "^0.0.10",
    "@vscode/test-electron": "^2.5.2",
    "esbuild": "^0.25.3",
    "eslint": "^9.25.1",
    "mocha": "^11.5.0",
    "nock": "^14.0.4",
    "npm-run-all": "^4.1.5",
    "nyc": "^17.1.0",
    "sinon": "^20.0.0",
    "source-map-support": "^0.5.21",
    "typescript": "^5.8.3"
  },
  "nyc": {
    "extends": "@istanbuljs/nyc-config-typescript",
    "include": [
      "out/core/**/*.js",
      "out/ui/**/*.js",
      "out/utils/**/*.js",
      "out/integrations/**/*.js"
    ],
    "exclude": [
      "out/test/**/*.js",
      "out/**/*.test.js",
      "out/mocks/**/*.js"
    ],
    "reporter": [
      "text",
      "html",
      "lcov"
    ],
    "all": true,
    "check-coverage": true,
    "lines": 80,
    "statements": 80,
    "functions": 80,
    "branches": 70
  },
  "dependencies": {
    "task-master-ai": "^0.15.0"
  }
}
