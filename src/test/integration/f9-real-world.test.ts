import * as assert from 'assert';
import * as vscode from 'vscode';

/**
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è F9 –∫–æ–º–∞–Ω–¥—ã –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –¥–µ—Ç–µ–∫—Ü–∏–µ–π —Ç–∏—à–∏–Ω—ã –∏ —Ä—É—á–Ω–æ–π –∑–∞–ø–∏—Å—å—é
 */
describe('F9 Real World Integration Tests', function() {
    this.timeout(30000); // 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π

    let extension: vscode.Extension<any>;
    
    before(async () => {
        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—à–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
        extension = vscode.extensions.getExtension('speak-y.speech-to-text-whisper')!;
        assert.ok(extension, 'Extension should be found');
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—â—ë –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ
        if (!extension.isActive) {
            await extension.activate();
        }
        
        console.log('üß™ Extension activated for F9 testing');
        
        // –ñ–¥—ë–º –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        await new Promise(resolve => setTimeout(resolve, 2000));
    });

    describe('F9 - recordAndOpenNewChat Command', () => {
        it('–¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å —Å silence detection –≤–∫–ª—é—á–µ–Ω–Ω—ã–º', async function() {
            this.timeout(20000);
            
            console.log('üß™ Testing F9 with silence detection enabled');
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –≤–∫–ª—é—á–µ–Ω–Ω–æ–π –¥–µ—Ç–µ–∫—Ü–∏–µ–π —Ç–∏—à–∏–Ω—ã
            const config = vscode.workspace.getConfiguration('speechToTextWhisper');
            await config.update('silenceDetection', true, vscode.ConfigurationTarget.Global);
            await config.update('silenceDuration', 5, vscode.ConfigurationTarget.Global); // 5 —Å–µ–∫—É–Ω–¥ —Ç–∏—à–∏–Ω—ã
            
            console.log('üß™ Configuration set: silenceDetection=true, silenceDuration=5s');
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É F9
            console.log('üß™ Executing recordAndOpenNewChat command...');
            
            let recordingStarted = false;
            let recordingCompleted = false;
            let errorOccurred = false;
            
            // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ output channel (–µ—Å–ª–∏ –µ—Å—Ç—å)
            try {
                await vscode.commands.executeCommand('speechToTextWhisper.recordAndOpenNewChat');
                recordingStarted = true;
                console.log('‚úÖ Command executed, recording should have started');
                
                // –ñ–¥—ë–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏
                await new Promise(resolve => setTimeout(resolve, 1000));
                
                // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è (–µ—Å–ª–∏ –∑–∞–ø–∏—Å—å –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∞—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
                await new Promise(resolve => setTimeout(resolve, 2000));
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–ø–∏—Å—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—á–∞–ª–∞—Å—å
                recordingCompleted = true;
                console.log('‚úÖ Recording flow completed');
                
            } catch (error) {
                errorOccurred = true;
                console.error('‚ùå Error during recording:', error);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å –Ω–∞—à–∏–º–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏
                const errorMessage = (error as Error).message;
                
                // –î–æ–ø—É—Å—Ç–∏–º—ã–µ –æ—à–∏–±–∫–∏ –≤ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥–µ
                if (errorMessage.includes('Recording too short') || 
                    errorMessage.includes('microphone permissions') ||
                    errorMessage.includes('FFmpeg not found')) {
                    console.log('‚úÖ Acceptable error in test environment:', errorMessage);
                    recordingCompleted = true;
                } else {
                    throw error; // –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ - —Ç–µ—Å—Ç –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è
                }
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç
            assert.ok(recordingStarted, 'Recording should have started');
            assert.ok(recordingCompleted || errorOccurred, 'Recording should complete or fail gracefully');
        });

        it('–¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å —Å silence detection –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–º', async function() {
            this.timeout(15000);
            
            console.log('üß™ Testing F9 with silence detection disabled');
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–π –¥–µ—Ç–µ–∫—Ü–∏–µ–π —Ç–∏—à–∏–Ω—ã
            const config = vscode.workspace.getConfiguration('speechToTextWhisper');
            await config.update('silenceDetection', false, vscode.ConfigurationTarget.Global);
            await config.update('maxRecordingDuration', 10, vscode.ConfigurationTarget.Global); // 10 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º
            
            console.log('üß™ Configuration set: silenceDetection=false, maxRecordingDuration=10s');
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É F9
            console.log('üß™ Executing recordAndOpenNewChat command...');
            
            let recordingStarted = false;
            let recordingCompleted = false;
            let errorOccurred = false;
            
            try {
                // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å
                await vscode.commands.executeCommand('speechToTextWhisper.recordAndOpenNewChat');
                recordingStarted = true;
                console.log('‚úÖ Command executed, recording should have started');
                
                // –ñ–¥—ë–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏
                await new Promise(resolve => setTimeout(resolve, 1000));
                
                // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å –≤—Ä—É—á–Ω—É—é (—Å–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ F9 –∏–ª–∏ –¥—Ä—É–≥–æ–π –∫–æ–º–∞–Ω–¥—ã)
                console.log('üß™ Manually stopping recording...');
                await vscode.commands.executeCommand('speechToTextWhisper.recordAndInsertToCurrentChat');
                
                recordingCompleted = true;
                console.log('‚úÖ Manual recording stop completed');
                
            } catch (error) {
                errorOccurred = true;
                console.error('‚ùå Error during recording:', error);
                
                const errorMessage = (error as Error).message;
                
                // –î–æ–ø—É—Å—Ç–∏–º—ã–µ –æ—à–∏–±–∫–∏ –≤ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥–µ
                if (errorMessage.includes('Recording too short') || 
                    errorMessage.includes('microphone permissions') ||
                    errorMessage.includes('FFmpeg not found') ||
                    errorMessage.includes('No recording mode set')) {
                    console.log('‚úÖ Acceptable error in test environment:', errorMessage);
                    recordingCompleted = true;
                } else {
                    throw error; // –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞
                }
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç
            assert.ok(recordingStarted, 'Recording should have started');
            assert.ok(recordingCompleted || errorOccurred, 'Recording should complete or fail gracefully');
        });
    });

    describe('Configuration Tests', () => {
        it('–¥–æ–ª–∂–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ —á–∏—Ç–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é silence detection', () => {
            console.log('üß™ Testing configuration reading');
            
            const config = vscode.workspace.getConfiguration('speechToTextWhisper');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–∂–µ–º —á–∏—Ç–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            const silenceDetection = config.get<boolean>('silenceDetection');
            const silenceDuration = config.get<number>('silenceDuration');
            const maxRecordingDuration = config.get<number>('maxRecordingDuration');
            
            console.log(`üîß Current config: silenceDetection=${silenceDetection}, silenceDuration=${silenceDuration}, maxRecordingDuration=${maxRecordingDuration}`);
            
            // –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            assert.ok(typeof silenceDetection === 'boolean', 'silenceDetection should be boolean');
            assert.ok(typeof silenceDuration === 'number', 'silenceDuration should be number');
            assert.ok(typeof maxRecordingDuration === 'number', 'maxRecordingDuration should be number');
            
            console.log('‚úÖ Configuration reading works correctly');
        });
    });

    after(async () => {
        console.log('üßπ Cleaning up F9 integration tests...');
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const config = vscode.workspace.getConfiguration('speechToTextWhisper');
        await config.update('silenceDetection', undefined, vscode.ConfigurationTarget.Global);
        await config.update('silenceDuration', undefined, vscode.ConfigurationTarget.Global);
        await config.update('maxRecordingDuration', undefined, vscode.ConfigurationTarget.Global);
        
        console.log('‚úÖ F9 integration tests cleanup completed');
    });
}); 