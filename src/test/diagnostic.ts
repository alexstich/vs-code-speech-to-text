import * as vscode from 'vscode';

/**
 * –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ —Ä–∞–±–æ—Ç—ã –∫–æ–º–∞–Ω–¥
 */
export class CommandDiagnostics {
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –ª–∏ –∫–æ–º–∞–Ω–¥—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
     */
    static async checkCommandRegistration(): Promise<{ [commandId: string]: boolean }> {
        const expectedCommands = [
            'speechToTextWhisper.recordAndInsertOrClipboard',
            'speechToTextWhisper.recordAndInsertToCurrentChat', 
            'speechToTextWhisper.recordAndOpenNewChat',
            'speechToTextWhisper.runDiagnostics',
            'speechToTextWhisper.testFFmpeg',
            'speechToTextWhisper.testAudioRecorder',
            'speechToTextWhisper.openSettings',
            'speechToTextWhisper.toggleMode'
        ];

        const registrationStatus: { [commandId: string]: boolean } = {};
        
        for (const commandId of expectedCommands) {
            try {
                // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
                const allCommands = await vscode.commands.getCommands(true);
                registrationStatus[commandId] = allCommands.includes(commandId);
            } catch (error) {
                registrationStatus[commandId] = false;
            }
        }

        return registrationStatus;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏—é —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
     */
    static async checkExtensionActivation(): Promise<{
        isActive: boolean;
        packageJson?: any;
        extensionId?: string;
        activationEvents?: string[];
    }> {
        try {
            const extension = vscode.extensions.getExtension('speak-y.speech-to-text-whisper');
            
            if (!extension) {
                return { isActive: false };
            }

            return {
                isActive: extension.isActive,
                packageJson: extension.packageJSON,
                extensionId: extension.id,
                activationEvents: extension.packageJSON?.activationEvents || []
            };
        } catch (error) {
            return { 
                isActive: false,
                packageJson: { error: (error as Error).message }
            };
        }
    }

    /**
     * –ü—ã—Ç–∞–µ—Ç—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—ë —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
     */
    static async testCommandExecution(commandId: string): Promise<{
        success: boolean;
        error?: string;
        executionTime?: number;
    }> {
        const startTime = Date.now();
        
        try {
            await vscode.commands.executeCommand(commandId);
            return {
                success: true,
                executionTime: Date.now() - startTime
            };
        } catch (error) {
            return {
                success: false,
                error: (error as Error).message,
                executionTime: Date.now() - startTime
            };
        }
    }

    /**
     * –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
     */
    static async runFullDiagnostics(): Promise<{
        extension: any;
        commands: { [commandId: string]: boolean };
        commandTests: { [commandId: string]: any };
        keybindings: any[];
    }> {
        console.log('üîç –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è...');

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        const extensionStatus = await this.checkExtensionActivation();
        console.log('üìä –°—Ç–∞—Ç—É—Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è:', extensionStatus);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥
        const commandStatus = await this.checkCommandRegistration();
        console.log('üìä –°—Ç–∞—Ç—É—Å –∫–æ–º–∞–Ω–¥:', commandStatus);

        // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ (—Ç–æ–ª—å–∫–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö)
        const safeCommandsToTest = [
            'speechToTextWhisper.runDiagnostics',
            'speechToTextWhisper.testFFmpeg',
            'speechToTextWhisper.testAudioRecorder',
            'speechToTextWhisper.openSettings'
        ];

        const commandTests: { [commandId: string]: any } = {};
        for (const commandId of safeCommandsToTest) {
            if (commandStatus[commandId]) {
                commandTests[commandId] = await this.testCommandExecution(commandId);
            } else {
                commandTests[commandId] = { success: false, error: 'Command not registered' };
            }
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã—Ö –ø—Ä–∏–≤—è–∑–æ–∫
        const keybindings = await this.getKeybindings();

        const result = {
            extension: extensionStatus,
            commands: commandStatus,
            commandTests,
            keybindings
        };

        console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', JSON.stringify(result, null, 2));
        
        return result;
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã—Ö –ø—Ä–∏–≤—è–∑–∫–∞—Ö
     */
    static async getKeybindings(): Promise<any[]> {
        try {
            // VS Code API –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ keybindings
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–∂–∏–¥–∞–µ–º—ã–µ –ø—Ä–∏–≤—è–∑–∫–∏ –∏–∑ package.json
            const expectedKeybindings = [
                { command: 'speechToTextWhisper.recordAndOpenNewChat', key: 'F9' },
                { command: 'speechToTextWhisper.recordAndInsertOrClipboard', key: 'ctrl+shift+m', mac: 'cmd+shift+m' },
                { command: 'speechToTextWhisper.recordAndInsertToCurrentChat', key: 'ctrl+shift+n', mac: 'cmd+shift+n' }
            ];
            
            return expectedKeybindings;
        } catch (error) {
            return [];
        }
    }
}

/**
 * –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
 */
export async function registerDiagnosticCommand(context: vscode.ExtensionContext): Promise<void> {
    const disposable = vscode.commands.registerCommand(
        'speechToTextWhisper.runFullDiagnostics',
        async () => {
            try {
                const diagnostics = await CommandDiagnostics.runFullDiagnostics();
                
                // –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
                const report = [
                    'üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è Speech-to-Text Whisper',
                    '=' .repeat(50),
                    '',
                    'üìä –°—Ç–∞—Ç—É—Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è:',
                    `- –ê–∫—Ç–∏–≤–Ω–æ: ${diagnostics.extension.isActive}`,
                    `- ID: ${diagnostics.extension.extensionId}`,
                    '',
                    'üìã –ö–æ–º–∞–Ω–¥—ã:',
                    ...Object.entries(diagnostics.commands).map(([cmd, registered]) => 
                        `- ${cmd}: ${registered ? '‚úÖ' : '‚ùå'}`
                    ),
                    '',
                    'üß™ –¢–µ—Å—Ç—ã –∫–æ–º–∞–Ω–¥:',
                    ...Object.entries(diagnostics.commandTests).map(([cmd, result]) => 
                        `- ${cmd}: ${result.success ? '‚úÖ' : '‚ùå'} ${result.error ? `(${result.error})` : ''}`
                    ),
                    '',
                    '‚å®Ô∏è –ö–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã–µ –ø—Ä–∏–≤—è–∑–∫–∏:',
                    ...diagnostics.keybindings.map(kb => 
                        `- ${kb.command}: ${kb.key}${kb.mac ? ` / ${kb.mac}` : ''}`
                    )
                ].join('\n');

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—á–µ—Ç –≤ –Ω–æ–≤–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ
                const doc = await vscode.workspace.openTextDocument({
                    content: report,
                    language: 'plaintext'
                });
                await vscode.window.showTextDocument(doc);

                // –¢–∞–∫–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏
                const registeredCount = Object.values(diagnostics.commands).filter(Boolean).length;
                const totalCount = Object.keys(diagnostics.commands).length;
                
                vscode.window.showInformationMessage(
                    `üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${registeredCount}/${totalCount} –∫–æ–º–∞–Ω–¥ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ`
                );

            } catch (error) {
                vscode.window.showErrorMessage(
                    `‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: ${(error as Error).message}`
                );
            }
        }
    );

    context.subscriptions.push(disposable);
} 