import * as assert from 'assert';
import * as sinon from 'sinon';

// Mock –¥–ª—è vscode API
const mockVSCode = {
    window: {
        showInformationMessage: sinon.stub().resolves(),
        showWarningMessage: sinon.stub().resolves(),
        showErrorMessage: sinon.stub().resolves()
    },
    commands: {
        executeCommand: sinon.stub().resolves()
    },
    workspace: {
        getConfiguration: sinon.stub().returns({
            get: sinon.stub().returns('toggle')
        })
    }
};

// –ú–æ–∫–∏—Ä—É–µ–º vscode –º–æ–¥—É–ª—å
(global as any).vscode = mockVSCode;

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ—Å–ª–µ –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è vscode
// –≠—Ç–æ —Å–∏–º—É–ª—è—Ü–∏—è extension.ts —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
interface ToggleRecordingState {
    isToggleRecordingActive: boolean;
    isRecording: boolean;
    toggleRecordingTimeout: NodeJS.Timeout | null;
}

class ToggleRecordingManager {
    private state: ToggleRecordingState = {
        isToggleRecordingActive: false,
        isRecording: false,
        toggleRecordingTimeout: null
    };

    async startToggleRecording(): Promise<void> {
        if (this.state.isToggleRecordingActive) {
            throw new Error('Recording already active');
        }

        this.state.isToggleRecordingActive = true;
        this.state.isRecording = true;

        // –ú–æ–∫–∏—Ä—É–µ–º VS Code –∫–æ–º–∞–Ω–¥—ã
        await mockVSCode.commands.executeCommand('setContext', 'voiceScribe.isToggleRecording', true);
        await mockVSCode.commands.executeCommand('setContext', 'voiceScribe.isRecording', true);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        mockVSCode.window.showInformationMessage('üé§ Toggle recording started. Press again to stop.');

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º timeout
        const maxDuration = 60;
        if (maxDuration > 0) {
            this.state.toggleRecordingTimeout = setTimeout(() => {
                this.stopToggleRecording();
            }, maxDuration * 1000);
        }
    }

    async stopToggleRecording(): Promise<void> {
        if (!this.state.isToggleRecordingActive) {
            return;
        }

        // –û—á–∏—â–∞–µ–º timeout
        if (this.state.toggleRecordingTimeout) {
            clearTimeout(this.state.toggleRecordingTimeout);
            this.state.toggleRecordingTimeout = null;
        }

        this.state.isToggleRecordingActive = false;
        this.state.isRecording = false;

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã
        await mockVSCode.commands.executeCommand('setContext', 'voiceScribe.isToggleRecording', false);
        await mockVSCode.commands.executeCommand('setContext', 'voiceScribe.isRecording', false);
    }

    async handleToggleRecording(): Promise<void> {
        if (this.state.isToggleRecordingActive) {
            await this.stopToggleRecording();
        } else {
            await this.startToggleRecording();
        }
    }

    getState(): ToggleRecordingState {
        return { ...this.state };
    }

    dispose(): void {
        if (this.state.toggleRecordingTimeout) {
            clearTimeout(this.state.toggleRecordingTimeout);
            this.state.toggleRecordingTimeout = null;
        }
        this.state.isToggleRecordingActive = false;
        this.state.isRecording = false;
    }
}

suite('Toggle Recording Tests', () => {
    let toggleRecordingManager: ToggleRecordingManager;
    let originalSetTimeout: typeof setTimeout;
    let originalClearTimeout: typeof clearTimeout;

    setup(() => {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        originalSetTimeout = global.setTimeout;
        originalClearTimeout = global.clearTimeout;

        // –ú–æ–∫–∏—Ä—É–µ–º setTimeout –∏ clearTimeout
        let timeoutId = 1;
        const timeouts = new Map<number, { callback: Function; delay: number }>();

        (global as any).setTimeout = sinon.stub().callsFake((callback: Function, delay: number) => {
            const id = timeoutId++;
            timeouts.set(id, { callback, delay });
            return id;
        });

        (global as any).clearTimeout = sinon.stub().callsFake((id: number) => {
            timeouts.delete(id);
        });

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–æ–∫–∏
        sinon.resetHistory();
        sinon.resetBehavior();

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
        toggleRecordingManager = new ToggleRecordingManager();

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏
        mockVSCode.commands.executeCommand.resolves();
        mockVSCode.window.showInformationMessage.resolves();
    });

    teardown(() => {
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        global.setTimeout = originalSetTimeout;
        global.clearTimeout = originalClearTimeout;

        if (toggleRecordingManager) {
            toggleRecordingManager.dispose();
        }
        sinon.restore();
    });

    suite('Start Toggle Recording', () => {
        test('Should start toggle recording successfully', async () => {
            await toggleRecordingManager.startToggleRecording();

            const state = toggleRecordingManager.getState();
            assert.strictEqual(state.isToggleRecordingActive, true);
            assert.strictEqual(state.isRecording, true);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤—ã VS Code API
            assert.ok(mockVSCode.commands.executeCommand.calledWith('setContext', 'voiceScribe.isToggleRecording', true));
            assert.ok(mockVSCode.commands.executeCommand.calledWith('setContext', 'voiceScribe.isRecording', true));
            assert.ok(mockVSCode.window.showInformationMessage.calledWith('üé§ Toggle recording started. Press again to stop.'));
        });

        test('Should throw error when recording already active', async () => {
            await toggleRecordingManager.startToggleRecording();

            try {
                await toggleRecordingManager.startToggleRecording();
                assert.fail('Should have thrown an error');
            } catch (error) {
                assert.strictEqual((error as Error).message, 'Recording already active');
            }
        });

        test('Should set timeout for maximum duration', async () => {
            await toggleRecordingManager.startToggleRecording();

            const state = toggleRecordingManager.getState();
            assert.ok(state.toggleRecordingTimeout);
            assert.ok((global.setTimeout as any).called);
        });
    });

    suite('Stop Toggle Recording', () => {
        test('Should stop toggle recording successfully', async () => {
            // –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å
            await toggleRecordingManager.startToggleRecording();
            
            // –¢–µ–ø–µ—Ä—å –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
            await toggleRecordingManager.stopToggleRecording();

            const state = toggleRecordingManager.getState();
            assert.strictEqual(state.isToggleRecordingActive, false);
            assert.strictEqual(state.isRecording, false);
            assert.strictEqual(state.toggleRecordingTimeout, null);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
            assert.ok(mockVSCode.commands.executeCommand.calledWith('setContext', 'voiceScribe.isToggleRecording', false));
            assert.ok(mockVSCode.commands.executeCommand.calledWith('setContext', 'voiceScribe.isRecording', false));
        });

        test('Should handle stop when not recording', async () => {
            // –ü—ã—Ç–∞–µ–º—Å—è –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–µ–∑ –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏
            await toggleRecordingManager.stopToggleRecording();

            const state = toggleRecordingManager.getState();
            assert.strictEqual(state.isToggleRecordingActive, false);
            assert.strictEqual(state.isRecording, false);
        });

        test('Should clear timeout when stopping', async () => {
            await toggleRecordingManager.startToggleRecording();
            
            const state = toggleRecordingManager.getState();
            const timeoutBefore = state.toggleRecordingTimeout;
            assert.ok(timeoutBefore);

            await toggleRecordingManager.stopToggleRecording();

            assert.ok((global.clearTimeout as any).calledWith(timeoutBefore));
        });
    });

    suite('Handle Toggle Recording', () => {
        test('Should start recording when not active', async () => {
            await toggleRecordingManager.handleToggleRecording();

            const state = toggleRecordingManager.getState();
            assert.strictEqual(state.isToggleRecordingActive, true);
            assert.strictEqual(state.isRecording, true);
        });

        test('Should stop recording when active', async () => {
            // –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å–∫–∞–µ–º
            await toggleRecordingManager.startToggleRecording();
            
            // –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º (–¥–æ–ª–∂–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å)
            await toggleRecordingManager.handleToggleRecording();

            const state = toggleRecordingManager.getState();
            assert.strictEqual(state.isToggleRecordingActive, false);
            assert.strictEqual(state.isRecording, false);
        });

        test('Should toggle state correctly multiple times', async () => {
            // –ü–µ—Ä–≤–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ - –Ω–∞—á–∏–Ω–∞–µ–º
            await toggleRecordingManager.handleToggleRecording();
            let state = toggleRecordingManager.getState();
            assert.strictEqual(state.isToggleRecordingActive, true);

            // –í—Ç–æ—Ä–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
            await toggleRecordingManager.handleToggleRecording();
            state = toggleRecordingManager.getState();
            assert.strictEqual(state.isToggleRecordingActive, false);

            // –¢—Ä–µ—Ç—å–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ - —Å–Ω–æ–≤–∞ –Ω–∞—á–∏–Ω–∞–µ–º
            await toggleRecordingManager.handleToggleRecording();
            state = toggleRecordingManager.getState();
            assert.strictEqual(state.isToggleRecordingActive, true);
        });
    });

    suite('Recording Mode Detection', () => {
        test('Should detect toggle mode from configuration', () => {
            mockVSCode.workspace.getConfiguration.returns({
                get: sinon.stub().withArgs('recordingMode', 'hold').returns('toggle')
            });

            const config = mockVSCode.workspace.getConfiguration('voiceScribe');
            const recordingMode = config.get('recordingMode', 'hold');
            
            assert.strictEqual(recordingMode, 'toggle');
        });

        test('Should default to hold mode when not configured', () => {
            mockVSCode.workspace.getConfiguration.returns({
                get: sinon.stub().withArgs('recordingMode', 'hold').returns('hold')
            });

            const config = mockVSCode.workspace.getConfiguration('voiceScribe');
            const recordingMode = config.get('recordingMode', 'hold');
            
            assert.strictEqual(recordingMode, 'hold');
        });
    });

    suite('Error Handling', () => {
        test('Should handle VS Code command errors gracefully', async () => {
            // –ú–æ–∫–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –≤ –∫–æ–º–∞–Ω–¥–µ
            mockVSCode.commands.executeCommand.rejects(new Error('Command failed'));

            try {
                await toggleRecordingManager.startToggleRecording();
                // –ù–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—à–∏–±–∫—É –∫–æ–º–∞–Ω–¥—ã, —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å—Å—è
                const state = toggleRecordingManager.getState();
                assert.strictEqual(state.isToggleRecordingActive, true);
            } catch (error) {
                // –û—à–∏–±–∫–∏ –∫–æ–º–∞–Ω–¥ –Ω–µ –¥–æ–ª–∂–Ω—ã –ø—Ä–µ—Ä—ã–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫
                assert.fail('Should not throw error for command failures');
            }
        });

        test('Should cleanup state on dispose', () => {
            // –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å
            toggleRecordingManager.startToggleRecording();
            
            // –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
            toggleRecordingManager.dispose();

            const state = toggleRecordingManager.getState();
            assert.strictEqual(state.isToggleRecordingActive, false);
            assert.strictEqual(state.isRecording, false);
            assert.strictEqual(state.toggleRecordingTimeout, null);
        });
    });

    suite('Integration with Hold-to-Record', () => {
        test('Should not conflict with hold-to-record mode', () => {
            // –≠—Ç–æ –±–æ–ª—å—à–µ –∫–æ–Ω—Ü–µ–ø—Ç—É–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç - toggle –∏ hold —Ä–µ–∂–∏–º—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–∑–∞–∏–º–æ–∏—Å–∫–ª—é—á–∞—é—â–∏–º–∏
            const toggleState = toggleRecordingManager.getState();
            
            // –í —Ä–µ–∞–ª—å–Ω–æ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–∏ toggle —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ hold —Ä–µ–∂–∏–º –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω
            assert.strictEqual(toggleState.isToggleRecordingActive, false);
        });
    });

    suite('Timeout Functionality', () => {
        test('Should auto-stop after maximum duration', async () => {
            const clock = sinon.useFakeTimers();
            
            try {
                await toggleRecordingManager.startToggleRecording();
                
                // –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥
                clock.tick(60000);
                
                const state = toggleRecordingManager.getState();
                // –ü–æ—Å–ª–µ timeout –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
                assert.strictEqual(state.isToggleRecordingActive, false);
                
            } finally {
                clock.restore();
            }
        });

        test('Should clear timeout on manual stop', async () => {
            await toggleRecordingManager.startToggleRecording();
            await toggleRecordingManager.stopToggleRecording();

            assert.ok((global.clearTimeout as any).called);
        });
    });
}); 