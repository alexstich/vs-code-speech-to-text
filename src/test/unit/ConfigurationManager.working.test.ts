import * as assert from 'assert';
import * as sinon from 'sinon';

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º ConfigurationManager –±–µ–∑ –º–æ–∫–æ–≤ vscode
import { ConfigurationManager } from '../../core/ConfigurationManager';

describe('ConfigurationManager - Working Tests', () => {
    let configManager: ConfigurationManager;
    let sandbox: sinon.SinonSandbox;

    beforeEach(() => {
        // –°–æ–∑–¥–∞–µ–º –ø–µ—Å–æ—á–Ω–∏—Ü—É sinon
        sandbox = sinon.createSandbox();
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–∏–Ω–≥–ª—Ç–æ–Ω
        (ConfigurationManager as any).instance = null;
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
        configManager = ConfigurationManager.getInstance();
        
        // –ú–æ–∫–∞–µ–º –º–µ—Ç–æ–¥—ã VS Code –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        const loadConfigurationStub = sandbox.stub(configManager as any, 'loadConfiguration');
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞—à—É —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        loadConfigurationStub.returns({
            whisper: {
                apiKey: 'test-api-key',
                language: 'auto', 
                whisperModel: 'whisper-1',
                prompt: '',
                temperature: 0.1,
                timeout: 30000,
                maxRetries: 3
            },
            audio: {
                audioQuality: 'standard',
                ffmpegPath: '',
                maxRecordingDuration: 60,
                silenceDetection: true,
                silenceDuration: 3,
                silenceThreshold: 50,
                inputDevice: 'auto'
            },
            ui: {
                showStatusBar: true
            }
        });
    });

    afterEach(() => {
        configManager.dispose();
        sandbox.restore();
    });

    it('–¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∑–∞–º–æ–∫–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é', () => {
        console.log('üß™ Test: –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∑–∞–º–æ–∫–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é');
        
        const config = configManager.getConfiguration();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        assert.ok(config.whisper, '–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–µ–∫—Ü–∏—è whisper');
        assert.ok(config.audio, '–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–µ–∫—Ü–∏—è audio');
        assert.ok(config.ui, '–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–µ–∫—Ü–∏—è ui');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –Ω–∞—à–µ–≥–æ –º–æ–∫–∞
        console.log('üîç Actual apiKey:', config.whisper.apiKey);
        assert.strictEqual(config.whisper.apiKey, 'test-api-key');
        assert.strictEqual(config.whisper.language, 'auto');
        assert.strictEqual(config.whisper.whisperModel, 'whisper-1');
        assert.strictEqual(config.audio.audioQuality, 'standard');
        assert.strictEqual(config.ui.showStatusBar, true);
    });

    it('–¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–µ–∫—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏', () => {
        console.log('üß™ Test: –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–µ–∫—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
        
        const whisperConfig = configManager.getWhisperConfiguration();
        const audioConfig = configManager.getAudioConfiguration();
        const uiConfig = configManager.getUIConfiguration();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å–µ–∫—Ü–∏–∏
        assert.strictEqual(whisperConfig.apiKey, 'test-api-key');
        assert.strictEqual(whisperConfig.language, 'auto');
        assert.strictEqual(audioConfig.audioQuality, 'standard');
        assert.strictEqual(uiConfig.showStatusBar, true);
    });

    it('–¥–æ–ª–∂–µ–Ω –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é', () => {
        console.log('üß™ Test: –¥–æ–ª–∂–µ–Ω –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é');
        
        const validation = configManager.validateConfiguration();
        console.log('üîç Validation result:', validation);
        
        // –£ –Ω–∞—Å –µ—Å—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π API key, –ø–æ—ç—Ç–æ–º—É –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω–æ
        assert.ok(validation.isValid, '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω–æ–π');
        assert.strictEqual(validation.errors.length, 0, '–ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏');
    });

    it('–¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∫—ç—à–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏', () => {
        console.log('üß™ Test: –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∫—ç—à–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
        
        // –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        const config1 = configManager.getConfiguration();
        
        // –í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à
        const config2 = configManager.getConfiguration();
        
        // –û–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ (—Ç–æ—Ç –∂–µ –æ–±—ä–µ–∫—Ç)
        assert.strictEqual(config1, config2, '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –∫—ç—à–∏—Ä–æ–≤–∞—Ç—å—Å—è');
        
        // –û—á–∏—â–∞–µ–º –∫—ç—à
        (configManager as any).invalidateCache();
        
        // –ò–∑–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å—Ç–∞–± —á—Ç–æ–±—ã –æ–Ω –≤–æ–∑–≤—Ä–∞—â–∞–ª –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        const loadConfigurationStub = (configManager as any).loadConfiguration;
        loadConfigurationStub.returns({
            whisper: {
                apiKey: 'test-api-key-2', // –ò–∑–º–µ–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
                language: 'auto', 
                whisperModel: 'whisper-1',
                prompt: '',
                temperature: 0.1,
                timeout: 30000,
                maxRetries: 3
            },
            audio: {
                audioQuality: 'standard',
                ffmpegPath: '',
                maxRecordingDuration: 60,
                silenceDetection: true,
                silenceDuration: 3,
                silenceThreshold: 50,
                inputDevice: 'auto'
            },
            ui: {
                showStatusBar: true
            }
        });
        
        // –¢–µ–ø–µ—Ä—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç —Å –Ω–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        const config3 = configManager.getConfiguration();
        assert.notStrictEqual(config1, config3, '–ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç');
        
        // –ò –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –æ—Ç–ª–∏—á–∞—Ç—å—Å—è
        assert.strictEqual(config3.whisper.apiKey, 'test-api-key-2');
        assert.notStrictEqual(config1.whisper.apiKey, config3.whisper.apiKey, '–ó–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –æ—Ç–ª–∏—á–∞—Ç—å—Å—è');
    });

    it('–¥–æ–ª–∂–µ–Ω —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–ª—É—à–∞—Ç–µ–ª—è–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π', () => {
        console.log('üß™ Test: –¥–æ–ª–∂–µ–Ω —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–ª—É—à–∞—Ç–µ–ª—è–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π');
        
        const listener1 = sandbox.spy();
        const listener2 = sandbox.spy();
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª–µ–π
        configManager.addChangeListener(listener1);
        configManager.addChangeListener(listener2);
        
        // –ò–º–∏—Ç–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        (configManager as any).notifyListeners();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–±–∞ —Å–ª—É—à–∞—Ç–µ–ª—è –±—ã–ª–∏ –≤—ã–∑–≤–∞–Ω—ã
        assert.ok(listener1.called, '–ü–µ—Ä–≤—ã–π —Å–ª—É—à–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã–ª –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω');
        assert.ok(listener2.called, '–í—Ç–æ—Ä–æ–π —Å–ª—É—à–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã–ª –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω');
        
        // –£–¥–∞–ª—è–µ–º –æ–¥–Ω–æ–≥–æ —Å–ª—É—à–∞—Ç–µ–ª—è
        configManager.removeChangeListener(listener1);
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º spy
        listener1.resetHistory();
        listener2.resetHistory();
        
        // –ò–º–∏—Ç–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
        (configManager as any).notifyListeners();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–æ–ª—å–∫–æ –≤—Ç–æ—Ä–æ–π —Å–ª—É—à–∞—Ç–µ–ª—å –±—ã–ª –≤—ã–∑–≤–∞–Ω
        assert.ok(!listener1.called, '–ü–µ—Ä–≤—ã–π —Å–ª—É—à–∞—Ç–µ–ª—å –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã–ª –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω');
        assert.ok(listener2.called, '–í—Ç–æ—Ä–æ–π —Å–ª—É—à–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã–ª –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω');
    });
}); 