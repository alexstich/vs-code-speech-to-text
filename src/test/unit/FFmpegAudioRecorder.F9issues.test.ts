import * as assert from 'assert';
import * as sinon from 'sinon';
import { FFmpegAudioRecorder, AudioRecorderEvents, AudioRecordingOptions } from '../../core/FFmpegAudioRecorder.js';
import { EventEmitter } from 'events';

describe('FFmpegAudioRecorder - F9 Issues Fix Tests', () => {
    let sandbox: sinon.SinonSandbox;
    let mockEvents: AudioRecorderEvents;
    let recorder: FFmpegAudioRecorder;
    let mockChildProcess: any; // –ò—Å–ø–æ–ª—å–∑—É–µ–º any –¥–ª—è –º–æ–∫–∞ child process
    let onRecordingStartStub: sinon.SinonStub;
    let onRecordingStopStub: sinon.SinonStub;
    let onErrorStub: sinon.SinonStub;

    beforeEach(() => {
        sandbox = sinon.createSandbox();
        
        // –°–æ–∑–¥–∞–µ–º stub'—ã
        onRecordingStartStub = sandbox.stub();
        onRecordingStopStub = sandbox.stub();
        onErrorStub = sandbox.stub();
        
        // –ú–æ–∫–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è
        mockEvents = {
            onRecordingStart: onRecordingStartStub,
            onRecordingStop: onRecordingStopStub,
            onError: onErrorStub
        };

        // –ú–æ–∫–∏—Ä—É–µ–º child_process —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
        mockChildProcess = new EventEmitter();
        mockChildProcess.kill = sandbox.stub();
        mockChildProcess.killed = false;
        mockChildProcess.stderr = new EventEmitter();
        mockChildProcess.stdout = new EventEmitter();

        const { spawn } = require('child_process');
        sandbox.stub(require('child_process'), 'spawn').returns(mockChildProcess);

        // –ú–æ–∫–∏—Ä—É–µ–º fs
        const fs = require('fs');
        sandbox.stub(fs, 'existsSync').returns(true);
        sandbox.stub(fs, 'statSync').returns({ size: 2048 });
        sandbox.stub(fs, 'readFileSync').returns(Buffer.from('fake audio data'));

        // –ú–æ–∫–∏—Ä—É–µ–º tmp
        const tmp = require('tmp');
        sandbox.stub(tmp, 'fileSync').returns({
            name: '/tmp/test-recording.wav',
            removeCallback: () => {}
        });

        // –ú–æ–∫–∏—Ä—É–µ–º FFmpeg –ø—Ä–æ–≤–µ—Ä–∫–∏
        sandbox.stub(FFmpegAudioRecorder, 'checkFFmpegAvailability')
            .resolves({ available: true, path: '/usr/bin/ffmpeg', version: '4.4.0' });

        // ‚ùó –í–ê–ñ–ù–û: –ú–æ–∫–∏—Ä—É–µ–º runDiagnostics —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ FFmpeg
        sandbox.stub(FFmpegAudioRecorder, 'runDiagnostics').resolves({
            ffmpegAvailable: { available: true, path: '/usr/bin/ffmpeg', version: '4.4.0' },
            inputDevices: ['MacBook Pro Microphone'],
            platform: 'macos',
            platformCommands: {
                platform: 'macos',
                audioInput: '-f avfoundation',
                defaultDevice: ':0'
            },
            recommendedDevice: ':0',
            errors: [],
            warnings: []
        });

        // ‚ùó –í–ê–ñ–ù–û: –ú–æ–∫–∏—Ä—É–µ–º detectInputDevices —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ FFmpeg
        sandbox.stub(FFmpegAudioRecorder, 'detectInputDevices').resolves([
            { id: ':0', name: 'MacBook Pro Microphone', isDefault: true }
        ]);
    });

    afterEach(() => {
        if (recorder) {
            try {
                recorder.stopRecording();
            } catch (error) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ
            }
        }
        sandbox.restore();
    });

    describe('Issue 1: Silence Detection Stopping Too Early', () => {
        it('–¥–æ–ª–∂–µ–Ω –ù–ï –æ–±–Ω–æ–≤–ª—è—Ç—å lastAudioTime –Ω–∞ —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è FFmpeg', async () => {
            console.log('üß™ Testing Issue 1: Silence detection stopping too early');
            
            const options: AudioRecordingOptions = {
                silenceDetection: true,
                silenceDuration: 5,  // 5 —Å–µ–∫—É–Ω–¥ —Ç–∏—à–∏–Ω—ã
                maxDuration: 60      // –ë–æ–ª—å—à–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            };

            recorder = new FFmpegAudioRecorder(mockEvents, options);
            const recorderAny = recorder as any;
            
            // Spy –Ω–∞ updateLastAudioTime
            const updateLastAudioTimeSpy = sandbox.spy(recorderAny, 'updateLastAudioTime');

            console.log('üß™ Starting recording...');
            
            try {
                await recorder.startRecording();
            } catch (error) {
                console.log('Expected error in test environment:', (error as Error).message);
            }
            
            console.log('üß™ –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è FFmpeg (–ù–ï –¥–æ–ª–∂–Ω—ã –≤—ã–∑—ã–≤–∞—Ç—å updateLastAudioTime)...');
            
            // –≠—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ù–ï –¥–æ–ª–∂–Ω—ã –≤—ã–∑—ã–≤–∞—Ç—å updateLastAudioTime
            mockChildProcess.stderr.emit('data', 'ffmpeg version 4.4.0\n');
            mockChildProcess.stderr.emit('data', 'configuration: --enable-libmp3lame\n');
            mockChildProcess.stderr.emit('data', 'built with gcc 9.3.0\n');
            mockChildProcess.stderr.emit('data', 'libavutil      56. 70.100\n');
            
            console.log(`üìä updateLastAudioTime called after service messages: ${updateLastAudioTimeSpy.callCount}`);
            
            // –¢–æ–ª—å–∫–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –≤—ã–∑–≤–∞—Ç—å updateLastAudioTime
            const initialCalls = updateLastAudioTimeSpy.callCount;
            
            console.log('üß™ –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∞—É–¥–∏–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏...');
            
            // –≠—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –î–û–õ–ñ–ù–´ –≤—ã–∑—ã–≤–∞—Ç—å updateLastAudioTime
            mockChildProcess.stderr.emit('data', 'Input #0, avfoundation, from \':0\':\n');
            mockChildProcess.stderr.emit('data', '  Stream #0:0: Audio: pcm_f32le, 44100 Hz, 2 channels, flt\n');
            mockChildProcess.stderr.emit('data', 'Press [q] to quit, [?] for help\n');
            mockChildProcess.stderr.emit('data', 'size=      64kB time=00:00:01.00 bitrate= 512.0kbits/s\n');
            
            console.log(`üìä updateLastAudioTime called after audio activity: ${updateLastAudioTimeSpy.callCount}`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ updateLastAudioTime –≤—ã–∑—ã–≤–∞–ª—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            const finalCalls = updateLastAudioTimeSpy.callCount;
            const audioActivityCalls = finalCalls - initialCalls;
            
            assert.ok(audioActivityCalls >= 3, `updateLastAudioTime –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –∞—É–¥–∏–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–≤—ã–∑–≤–∞–Ω ${audioActivityCalls} —Ä–∞–∑)`);
            
            console.log('‚úÖ Test passed: silence detection ignores service messages');
        });

        it('–¥–æ–ª–∂–µ–Ω –æ–±–Ω–æ–≤–ª—è—Ç—å lastAudioTime —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–∏', async () => {
            console.log('üß™ Testing real recording progress detection');
            
            const options: AudioRecordingOptions = {
                silenceDetection: true,
                silenceDuration: 3,
                maxDuration: 60
            };

            recorder = new FFmpegAudioRecorder(mockEvents, options);
            const recorderAny = recorder as any;
            
            const updateLastAudioTimeSpy = sandbox.spy(recorderAny, 'updateLastAudioTime');

            try {
                await recorder.startRecording();
            } catch (error) {
                // Expected in test environment
            }
            
            const initialCalls = updateLastAudioTimeSpy.callCount;
            
            console.log('üß™ –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–ø–∏—Å–∏ —Å –Ω—É–ª–µ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (–ù–ï –¥–æ–ª–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å)...');
            mockChildProcess.stderr.emit('data', 'size=       0kB time=00:00:00.00 bitrate= N/A\n');
            
            console.log('üß™ –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–ø–∏—Å–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (–¥–æ–ª–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å)...');
            mockChildProcess.stderr.emit('data', 'size=      32kB time=00:00:02.00 bitrate= 128.0kbits/s\n');
            mockChildProcess.stderr.emit('data', 'size=      64kB time=00:00:04.00 bitrate= 128.0kbits/s\n');
            
            const finalCalls = updateLastAudioTimeSpy.callCount;
            const progressCalls = finalCalls - initialCalls;
            
            // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 2 –≤—ã–∑–æ–≤–∞ –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–Ω–æ –Ω–µ –¥–ª—è –Ω—É–ª–µ–≤—ã—Ö)
            assert.strictEqual(progressCalls, 2, `updateLastAudioTime –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω 2 —Ä–∞–∑–∞ –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–≤—ã–∑–≤–∞–Ω ${progressCalls} —Ä–∞–∑)`);
            
            console.log('‚úÖ Test passed: detects real recording progress');
        });
    });

    describe('Issue 2: Manual Recording Without Silence Detection', () => {
        it('–¥–æ–ª–∂–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–∏ silenceDetection=false', async () => {
            console.log('üß™ Testing Issue 2: Manual recording without silence detection');
            
            const options: AudioRecordingOptions = {
                silenceDetection: false,  // –í–´–ö–õ–Æ–ß–ï–ù–û
                maxDuration: 10,          // 10 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º
                silenceDuration: 3        // –ù–µ –¥–æ–ª–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è
            };

            recorder = new FFmpegAudioRecorder(mockEvents, options);
            const recorderAny = recorder as any;
            
            const setupSilenceDetectionSpy = sandbox.spy(recorderAny, 'setupSilenceDetection');
            const setupMaxDurationTimerSpy = sandbox.spy(recorderAny, 'setupMaxDurationTimer');

            console.log('üß™ Starting recording...');
            
            try {
                await recorder.startRecording();
            } catch (error) {
                console.log('Expected error in test environment:', (error as Error).message);
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ silence detection –ù–ï –≤–∫–ª—é—á–µ–Ω
            assert.ok(setupSilenceDetectionSpy.calledOnce, 'setupSilenceDetection –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω');
            assert.strictEqual(recorderAny.silenceDetectionEnabled, false, 'silenceDetectionEnabled –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å false');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ max duration —Ç–∞–π–º–µ—Ä –í–ö–õ–Æ–ß–ï–ù
            assert.ok(setupMaxDurationTimerSpy.calledOnce, 'setupMaxDurationTimer –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω');
            
            console.log('üß™ –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è FFmpeg...');
            
            // –≠–º—É–ª–∏—Ä—É–µ–º FFmpeg —Å–æ–æ–±—â–µ–Ω–∏—è
            mockChildProcess.stderr.emit('data', 'Input #0, avfoundation, from \':0\':\n');
            mockChildProcess.stderr.emit('data', 'Press [q] to quit, [?] for help\n');
            
            console.log('üß™ –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä—É—á–Ω—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–ø–∏—Å–∏...');
            
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å –≤—Ä—É—á–Ω—É—é
            recorder.stopRecording();
            
            // –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ FFmpeg –ø—Ä–æ—Ü–µ—Å—Å–∞
            mockChildProcess.emit('close', 0);
            
            // –î–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            await new Promise(resolve => setTimeout(resolve, 100));
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–±—ã—Ç–∏—è –±—ã–ª–∏ –≤—ã–∑–≤–∞–Ω—ã
            assert.ok(onRecordingStartStub.called, 'onRecordingStart –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω');
            assert.ok(onRecordingStopStub.called, 'onRecordingStop –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏');
            
            console.log('‚úÖ Test passed: manual recording works without silence detection');
        });

        it('–¥–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å onRecordingStop –¥–∞–∂–µ –±–µ–∑ silence detection', async () => {
            console.log('üß™ Testing onRecordingStop event without silence detection');
            
            const options: AudioRecordingOptions = {
                silenceDetection: false,
                maxDuration: 60
            };

            recorder = new FFmpegAudioRecorder(mockEvents, options);

            try {
                await recorder.startRecording();
            } catch (error) {
                // Expected in test environment
            }
            
            assert.ok(onRecordingStartStub.called, 'onRecordingStart –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω');
            
            // –°–∏–º—É–ª–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É
            recorder.stopRecording();
            mockChildProcess.emit('close', 0);
            
            // –î–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            await new Promise(resolve => setTimeout(resolve, 200));
            
            assert.ok(onRecordingStopStub.called, 'onRecordingStop –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è audioBlob
            const onRecordingStopCall = onRecordingStopStub.getCall(0);
            assert.ok(onRecordingStopCall, 'onRecordingStop –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω');
            assert.ok(onRecordingStopCall.args[0], 'audioBlob –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–¥–∞–Ω');
            
            console.log('‚úÖ Test passed: onRecordingStop event works without silence detection');
        });
    });
}); 