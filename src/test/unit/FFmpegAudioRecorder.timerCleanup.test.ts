import * as assert from 'assert';
import * as sinon from 'sinon';
import { spawn } from 'child_process';
import { EventEmitter } from 'events';
import { FFmpegAudioRecorder, AudioRecorderEvents, AudioRecordingOptions } from '../../core/FFmpegAudioRecorder.js';

describe('FFmpegAudioRecorder - Timer Cleanup and Recording Lifecycle Tests', () => {
    let sandbox: sinon.SinonSandbox;
    let mockEvents: AudioRecorderEvents;
    let recorder: FFmpegAudioRecorder;
    let mockChildProcess: any;
    let onRecordingStartSpy: sinon.SinonSpy;
    let onRecordingStopSpy: sinon.SinonSpy;
    let onErrorSpy: sinon.SinonSpy;

    beforeEach(() => {
        sandbox = sinon.createSandbox();
        
        // –°–æ–∑–¥–∞–µ–º spy –¥–ª—è —Å–æ–±—ã—Ç–∏–π
        onRecordingStartSpy = sandbox.spy();
        onRecordingStopSpy = sandbox.spy();
        onErrorSpy = sandbox.spy();
        
        // –ú–æ–∫–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è
        mockEvents = {
            onRecordingStart: onRecordingStartSpy,
            onRecordingStop: onRecordingStopSpy,
            onError: onErrorSpy
        };

        // –ú–æ–∫–∏—Ä—É–µ–º child process –¥–ª—è —ç–º—É–ª—è—Ü–∏–∏ FFmpeg
        mockChildProcess = new EventEmitter();
        mockChildProcess.killed = false;
        mockChildProcess.stdout = new EventEmitter();
        mockChildProcess.stderr = new EventEmitter();
        mockChildProcess.kill = sandbox.stub().callsFake((signal: string) => {
            console.log(`Mock process kill called with signal: ${signal}`);
            mockChildProcess.killed = true;
            // –≠–º—É–ª–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
            setTimeout(() => {
                console.log('Mock process emitting close event');
                mockChildProcess.emit('close', signal === 'SIGTERM' ? 0 : 255);
            }, 50);
        });
        
        // –ú–æ–∫–∏—Ä—É–µ–º spawn
        sandbox.stub(require('child_process'), 'spawn').returns(mockChildProcess);
        
        // –ú–æ–∫–∏—Ä—É–µ–º FFmpeg availability
        sandbox.stub(FFmpegAudioRecorder, 'checkFFmpegAvailability').resolves({
            available: true,
            version: '4.4.0',
            path: '/usr/local/bin/ffmpeg'
        });
        
        // –ú–æ–∫–∏—Ä—É–µ–º detectInputDevices
        sandbox.stub(FFmpegAudioRecorder, 'detectInputDevices').resolves([
            { id: ':0', name: 'Built-in Microphone', isDefault: true }
        ]);
    });

    afterEach(() => {
        if (recorder) {
            try {
                recorder.stopRecording();
            } catch (error) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ
            }
        }
        sandbox.restore();
    });

    describe('Timer Cleanup - The Critical Bug That Tests Should Catch', () => {
        it('–¥–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å clearSilenceTimer() –∏ clearMaxDurationTimer() –ø—Ä–∏ silenceDetection=false', async () => {
            console.log('üß™ Starting test: timer cleanup with silenceDetection=false');
            
            const options: AudioRecordingOptions = {
                silenceDetection: false,  // –ö–†–ò–¢–ò–ß–ù–û: –æ—Ç–∫–ª—é—á–µ–Ω–æ
                maxDuration: 2,           // –ö–æ—Ä–æ—Ç–∫–∞—è –∑–∞–ø–∏—Å—å
                silenceDuration: 1        // –ù–µ –¥–æ–ª–∂–Ω–æ –≤–ª–∏—è—Ç—å
            };

            recorder = new FFmpegAudioRecorder(mockEvents, options);
            
            // Spy –Ω–∞ –º–µ—Ç–æ–¥—ã –æ—á–∏—Å—Ç–∫–∏ —á–µ—Ä–µ–∑ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø
            const recorderAny = recorder as any;
            const clearSilenceTimerSpy = sandbox.spy(recorderAny, 'clearSilenceTimer');
            const clearMaxDurationTimerSpy = sandbox.spy(recorderAny, 'clearMaxDurationTimer');
            const setupSilenceDetectionSpy = sandbox.spy(recorderAny, 'setupSilenceDetection');

            console.log('üß™ Starting recording...');
            
            try {
                await recorder.startRecording();
            } catch (error) {
                // –û–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –≤ —Ç–µ—Å—Ç–∞—Ö, –Ω–æ –Ω–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –ª–æ–≥–∏–∫–∞ —Ç–∞–π–º–µ—Ä–æ–≤
                console.log('Expected error in test environment:', (error as Error).message);
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ setupSilenceDetection –±—ã–ª –≤—ã–∑–≤–∞–Ω
            assert.ok(setupSilenceDetectionSpy.calledOnce, 'setupSilenceDetection –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');
            
            console.log(`üìä setupSilenceDetection called: ${setupSilenceDetectionSpy.callCount}`);
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º stopRecording –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—á–∏—Å—Ç–∫–∏ —Ç–∞–π–º–µ—Ä–æ–≤
            recorder.stopRecording();
            
            console.log(`üìä clearSilenceTimer called after stopRecording: ${clearSilenceTimerSpy.callCount}`);
            console.log(`üìä clearMaxDurationTimer called after stopRecording: ${clearMaxDurationTimerSpy.callCount}`);
            
            // –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: clearSilenceTimer –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
            assert.ok(clearSilenceTimerSpy.called, 'clearSilenceTimer –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–ø–∏—Å–∏');
            assert.ok(clearMaxDurationTimerSpy.called, 'clearMaxDurationTimer –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–ø–∏—Å–∏');
            
            console.log('‚úÖ Test passed: timers properly cleared with silenceDetection=false');
        });

        it('–¥–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å clearSilenceTimer() –∏ clearMaxDurationTimer() –ø—Ä–∏ silenceDetection=true', async () => {
            console.log('üß™ Starting test: timer cleanup with silenceDetection=true');
            
            const options: AudioRecordingOptions = {
                silenceDetection: true,   // –í–∫–ª—é—á–µ–Ω–æ
                maxDuration: 10,          // –ë–æ–ª—å—à–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                silenceDuration: 1        // –ë—ã—Å—Ç—Ä–æ–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ
            };

            recorder = new FFmpegAudioRecorder(mockEvents, options);
            
            // Spy –Ω–∞ –º–µ—Ç–æ–¥—ã –æ—á–∏—Å—Ç–∫–∏
            const recorderAny = recorder as any;
            const clearSilenceTimerSpy = sandbox.spy(recorderAny, 'clearSilenceTimer');
            const clearMaxDurationTimerSpy = sandbox.spy(recorderAny, 'clearMaxDurationTimer');
            const setupSilenceDetectionSpy = sandbox.spy(recorderAny, 'setupSilenceDetection');

            console.log('üß™ Starting recording...');
            
            try {
                await recorder.startRecording();
            } catch (error) {
                // –û–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –≤ —Ç–µ—Å—Ç–∞—Ö
                console.log('Expected error in test environment:', (error as Error).message);
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ setupSilenceDetection –±—ã–ª –≤—ã–∑–≤–∞–Ω
            assert.ok(setupSilenceDetectionSpy.calledOnce, 'setupSilenceDetection –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω');
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º stopRecording
            recorder.stopRecording();
            
            console.log(`üìä clearSilenceTimer called: ${clearSilenceTimerSpy.callCount}`);
            console.log(`üìä clearMaxDurationTimer called: ${clearMaxDurationTimerSpy.callCount}`);
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Ç–µ—Å—Ç—É
            assert.ok(clearSilenceTimerSpy.called, 'clearSilenceTimer –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω');
            assert.ok(clearMaxDurationTimerSpy.called, 'clearMaxDurationTimer –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω');
            
            console.log('‚úÖ Test passed: timers properly cleared with silenceDetection=true');
        });

        it('–¥–æ–ª–∂–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å silence detection –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–ø—Ü–∏–∏', () => {
            console.log('üß™ Starting test: silence detection setup logic');
            
            // –¢–µ—Å—Ç 1: silenceDetection = false
            const optionsDisabled: AudioRecordingOptions = {
                silenceDetection: false,
                maxDuration: 60
            };

            const recorderDisabled = new FFmpegAudioRecorder(mockEvents, optionsDisabled);
            const recorderDisabledAny = recorderDisabled as any;
            
            // Spy –Ω–∞ setupSilenceDetection
            const setupSilenceDetectionSpyDisabled = sandbox.spy(recorderDisabledAny, 'setupSilenceDetection');
            
            // –í—ã–∑—ã–≤–∞–µ–º setupSilenceDetection –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–∏–∫–∏
            recorderDisabledAny.setupSilenceDetection();
            
            assert.ok(setupSilenceDetectionSpyDisabled.calledOnce, 'setupSilenceDetection –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ silenceDetectionEnabled –æ—Å—Ç–∞–µ—Ç—Å—è false –ø—Ä–∏ silenceDetection=false
            assert.strictEqual(recorderDisabledAny.silenceDetectionEnabled, false, 'silenceDetectionEnabled –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å false –ø—Ä–∏ silenceDetection=false');
            
            // –¢–µ—Å—Ç 2: silenceDetection = true
            const optionsEnabled: AudioRecordingOptions = {
                silenceDetection: true,
                maxDuration: 60,
                silenceDuration: 3
            };

            const recorderEnabled = new FFmpegAudioRecorder(mockEvents, optionsEnabled);
            const recorderEnabledAny = recorderEnabled as any;
            
            // Spy –Ω–∞ setupSilenceDetection
            const setupSilenceDetectionSpyEnabled = sandbox.spy(recorderEnabledAny, 'setupSilenceDetection');
            
            // –í—ã–∑—ã–≤–∞–µ–º setupSilenceDetection –Ω–∞–ø—Ä—è–º—É—é
            recorderEnabledAny.setupSilenceDetection();
            
            assert.ok(setupSilenceDetectionSpyEnabled.calledOnce, 'setupSilenceDetection –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ silenceDetectionEnabled —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è true –ø—Ä–∏ silenceDetection=true
            assert.strictEqual(recorderEnabledAny.silenceDetectionEnabled, true, 'silenceDetectionEnabled –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å true –ø—Ä–∏ silenceDetection=true');
            
            console.log('‚úÖ Test passed: silence detection setup logic works correctly');
        });

        it('–¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ maxDuration=3600', () => {
            console.log('üß™ Starting test: –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ maxDuration=3600');
            
            const options: AudioRecordingOptions = {
                silenceDetection: false,
                maxDuration: 3600  // –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (1 —á–∞—Å)
            };

            recorder = new FFmpegAudioRecorder(mockEvents, options);
            
            // –ú–æ–∫–∏—Ä—É–µ–º buildFFmpegArgs —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã
            const recorderAny = recorder as any;
            const buildArgsSpy = sandbox.spy(recorderAny, 'buildFFmpegArgs');
            
            // –í—ã–∑—ã–≤–∞–µ–º buildFFmpegArgs –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            const ffmpegArgs = recorderAny.buildFFmpegArgs('/tmp/test.wav', ':0');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ buildFFmpegArgs –≤–µ—Ä–Ω—É–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
            assert.ok(Array.isArray(ffmpegArgs), '–î–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –º–∞—Å—Å–∏–≤ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤');
            
            const tIndex = ffmpegArgs.indexOf('-t');
            assert.ok(tIndex !== -1, '–î–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç -t –¥–ª—è maxDuration');
            assert.strictEqual(ffmpegArgs[tIndex + 1], '3600', '–î–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ 3600 —Å–µ–∫—É–Ω–¥');
            
            console.log(`‚úÖ Test passed: FFmpeg –∏—Å–ø–æ–ª—å–∑—É–µ—Ç -t 3600 (${ffmpegArgs[tIndex + 1]} —Å–µ–∫—É–Ω–¥)`);
        });
    });

    describe('Regression Tests - Specific Bug Scenarios', () => {
        it('–¥–æ–ª–∂–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ isRecording –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç silenceDetection', () => {
            console.log('üß™ Starting REGRESSION test: isRecording state management');
            
            const testCases = [
                { silenceDetection: false, description: '—Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–º silenceDetection' },
                { silenceDetection: true, description: '—Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º silenceDetection' }
            ];

            for (const testCase of testCases) {
                console.log(`üß™ Testing ${testCase.description}...`);
                
                const options: AudioRecordingOptions = {
                    silenceDetection: testCase.silenceDetection,
                    maxDuration: 3600,
                    silenceDuration: 3
                };

                const testRecorder = new FFmpegAudioRecorder(mockEvents, options);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                assert.strictEqual(testRecorder.getIsRecording(), false, `–ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –Ω–µ –¥–æ–ª–∂–µ–Ω –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å ${testCase.description}`);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏
                assert.strictEqual(testRecorder.getRecordingDuration(), 0, `–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 0 ${testCase.description}`);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ MIME —Ç–∏–ø—ã
                const mimeTypes = testRecorder.getSupportedMimeTypes();
                assert.ok(Array.isArray(mimeTypes), `–î–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –º–∞—Å—Å–∏–≤ MIME —Ç–∏–ø–æ–≤ ${testCase.description}`);
                assert.ok(mimeTypes.length > 0, `–î–æ–ª–∂–µ–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω MIME —Ç–∏–ø ${testCase.description}`);
                assert.ok(mimeTypes.includes('audio/wav'), `–î–æ–ª–∂–µ–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å audio/wav ${testCase.description}`);
                
                console.log(`‚úÖ Test case passed: ${testCase.description}`);
            }
            
            console.log('‚úÖ All state management tests passed');
        });

        it('–¥–æ–ª–∂–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç silenceDetection', async () => {
            console.log('üß™ Starting test: compatibility and microphone checks');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –±—Ä–∞—É–∑–µ—Ä–∞
            const compatibility = FFmpegAudioRecorder.checkBrowserCompatibility();
            
            assert.ok(typeof compatibility.supported === 'boolean', 'supported –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å boolean');
            assert.ok(Array.isArray(compatibility.missing), 'missing –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º');
            
            console.log(`Compatibility check: supported=${compatibility.supported}, missing=${compatibility.missing.length} items`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
            const microphoneCheck = await FFmpegAudioRecorder.checkMicrophonePermission();
            
            assert.ok(typeof microphoneCheck.state === 'string', 'state –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π');
            assert.ok(typeof microphoneCheck.available === 'boolean', 'available –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å boolean');
            
            console.log(`Microphone check: state=${microphoneCheck.state}, available=${microphoneCheck.available}`);
            
            console.log('‚úÖ Test passed: compatibility and microphone checks work correctly');
        });
    });
}); 