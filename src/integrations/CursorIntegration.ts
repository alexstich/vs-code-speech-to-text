import * as vscode from 'vscode';

/**
 * –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Cursor —á–∞—Ç–æ–º
 */
export enum CursorIntegrationStrategy {
    CLIPBOARD = 'clipboard',           // –ß–µ—Ä–µ–∑ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
    COMMAND_PALETTE = 'command_palette', // –ß–µ—Ä–µ–∑ –ø–∞–ª–∏—Ç—Ä—É –∫–æ–º–∞–Ω–¥
    FOCUS_CHAT = 'focus_chat',         // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ñ–æ–∫—É—Å –Ω–∞ —á–∞—Ç
    SEND_TO_CHAT = 'send_to_chat'      // –ü—Ä—è–º–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ —á–∞—Ç
}

/**
 * –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Cursor
 */
export interface CursorIntegrationResult {
    success: boolean;
    strategy: CursorIntegrationStrategy;
    message?: string;
    error?: string;
    fallbackUsed?: boolean;
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è CursorIntegration
 */
export interface CursorIntegrationOptions {
    primaryStrategy: CursorIntegrationStrategy;
    fallbackStrategies: CursorIntegrationStrategy[];
    autoFocusChat: boolean;
    prefixText?: string;
    suffixText?: string;
    useMarkdownFormat: boolean;
    timeout: number;
}

/**
 * –°–æ–±—ã—Ç–∏—è CursorIntegration
 */
export interface CursorIntegrationEvents {
    onChatSent?: (text: string, strategy: CursorIntegrationStrategy) => void;
    onFallbackUsed?: (primaryStrategy: CursorIntegrationStrategy, fallbackStrategy: CursorIntegrationStrategy) => void;
    onError?: (error: Error, strategy: CursorIntegrationStrategy) => void;
}

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è vscode environment (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
 */
export interface VSCodeEnvironment {
    env: {
        appName: string;
        uriScheme: string;
        clipboard: {
            writeText(text: string): Promise<void>;
            readText(): Promise<string>;
        };
    };
    window: {
        showInformationMessage(message: string): Promise<any>;
        showWarningMessage(message: string): Promise<any>;
        showErrorMessage(message: string): Promise<any>;
    };
    commands: {
        executeCommand(command: string, ...args: any[]): Promise<any>;
    };
}

/**
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å AI-—á–∞—Ç–æ–º Cursor IDE
 * –†–µ–∞–ª–∏–∑—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ —á–∞—Ç
 */
export class CursorIntegration {
    private options: CursorIntegrationOptions;
    private events: CursorIntegrationEvents;
    private isEnabled: boolean = false;
    private vscodeEnv: VSCodeEnvironment;

    constructor(
        options: Partial<CursorIntegrationOptions> = {}, 
        events: CursorIntegrationEvents = {},
        vscodeEnvironment?: VSCodeEnvironment
    ) {
        this.options = this.mergeDefaultOptions(options);
        this.events = events;
        this.vscodeEnv = vscodeEnvironment || (global as any).vscode;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        this.checkAvailability();
        
        console.log(`üéØ CursorIntegration initialized, enabled: ${this.isEnabled}`);
    }

    /**
     * –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏
     */
    private mergeDefaultOptions(options: Partial<CursorIntegrationOptions>): CursorIntegrationOptions {
        return {
            primaryStrategy: CursorIntegrationStrategy.CLIPBOARD,
            fallbackStrategies: [
                CursorIntegrationStrategy.COMMAND_PALETTE,
                CursorIntegrationStrategy.FOCUS_CHAT
            ],
            autoFocusChat: true,
            prefixText: '',
            suffixText: '',
            useMarkdownFormat: false,
            timeout: 5000,
            ...options
        };
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Cursor
     */
    private checkAvailability(): void {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤ Cursor IDE
            const appName = this.vscodeEnv.env.appName.toLowerCase();
            const uriScheme = this.vscodeEnv.env.uriScheme;
            
            this.isEnabled = appName.includes('cursor') || uriScheme === 'cursor';
            
            if (this.isEnabled) {
                console.log('‚úÖ Cursor IDE detected - integration enabled');
            } else {
                console.log('‚ÑπÔ∏è Not in Cursor IDE - integration disabled');
            }
            
        } catch (error) {
            console.error('‚ùå Failed to check Cursor availability:', error);
            this.isEnabled = false;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
     */
    public isIntegrationEnabled(): boolean {
        return this.isEnabled;
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ Cursor AI —á–∞—Ç
     */
    public async sendToChat(text: string): Promise<CursorIntegrationResult> {
        if (!this.isEnabled) {
            return {
                success: false,
                strategy: this.options.primaryStrategy,
                error: 'Cursor integration not available in this IDE'
            };
        }

        if (!text || text.trim().length === 0) {
            return {
                success: false,
                strategy: this.options.primaryStrategy,
                error: 'No text provided'
            };
        }

        console.log(`üéØ Sending text to Cursor chat: "${text.substring(0, 50)}..."`);

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        const formattedText = this.formatTextForChat(text);

        // –ü—Ä–æ–±—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
        try {
            const result = await this.executeStrategy(this.options.primaryStrategy, formattedText);
            
            if (result.success) {
                console.log(`‚úÖ Successfully sent via ${result.strategy}`);
                
                // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
                if (this.events.onChatSent) {
                    this.events.onChatSent(text, result.strategy);
                }
                
                return result;
            }
        } catch (error) {
            console.error(`‚ùå Primary strategy ${this.options.primaryStrategy} failed:`, error);
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ—à–∏–±–∫–µ
            if (this.events.onError) {
                this.events.onError(error as Error, this.options.primaryStrategy);
            }
        }

        // –ü—Ä–æ–±—É–µ–º fallback —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        for (const fallbackStrategy of this.options.fallbackStrategies) {
            try {
                console.log(`üîÑ Trying fallback strategy: ${fallbackStrategy}`);
                
                const result = await this.executeStrategy(fallbackStrategy, formattedText);
                
                if (result.success) {
                    console.log(`‚úÖ Fallback successful via ${fallbackStrategy}`);
                    
                    // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ fallback
                    if (this.events.onFallbackUsed) {
                        this.events.onFallbackUsed(this.options.primaryStrategy, fallbackStrategy);
                    }
                    
                    // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
                    if (this.events.onChatSent) {
                        this.events.onChatSent(text, fallbackStrategy);
                    }
                    
                    return {
                        ...result,
                        fallbackUsed: true
                    };
                }
                
            } catch (error) {
                console.error(`‚ùå Fallback strategy ${fallbackStrategy} failed:`, error);
                
                // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ—à–∏–±–∫–µ fallback —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                if (this.events.onError) {
                    this.events.onError(error as Error, fallbackStrategy);
                }
            }
        }

        // –í—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å
        return {
            success: false,
            strategy: this.options.primaryStrategy,
            error: 'All integration strategies failed'
        };
    }

    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
     */
    private async executeStrategy(strategy: CursorIntegrationStrategy, text: string): Promise<CursorIntegrationResult> {
        switch (strategy) {
            case CursorIntegrationStrategy.CLIPBOARD:
                return await this.useClipboardStrategy(text);
            
            case CursorIntegrationStrategy.COMMAND_PALETTE:
                return await this.useCommandPaletteStrategy(text);
            
            case CursorIntegrationStrategy.FOCUS_CHAT:
                return await this.useFocusChatStrategy(text);
            
            case CursorIntegrationStrategy.SEND_TO_CHAT:
                return await this.useSendToChatStrategy(text);
            
            default:
                throw new Error(`Unknown integration strategy: ${strategy}`);
        }
    }

    /**
     * –°—Ç—Ä–∞—Ç–µ–≥–∏—è —á–µ—Ä–µ–∑ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
     */
    private async useClipboardStrategy(text: string): Promise<CursorIntegrationResult> {
        try {
            // –ö–æ–ø–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
            await this.vscodeEnv.env.clipboard.writeText(text);
            
            // –ü—ã—Ç–∞–µ–º—Å—è —Å—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —á–∞—Ç–µ
            if (this.options.autoFocusChat) {
                await this.focusOnChat();
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            try {
                await Promise.race([
                    this.vscodeEnv.window.showInformationMessage(
                        `üìã Text copied to clipboard. ${this.options.autoFocusChat ? 'Chat focused - paste with Ctrl+V' : 'Paste in Cursor chat with Ctrl+V'}`
                    ),
                    new Promise((_, reject) => 
                        setTimeout(() => reject(new Error('showInformationMessage timed out')), 1000)
                    )
                ]);
            } catch (error) {
                console.log('Information message timed out or failed');
            }

            return {
                success: true,
                strategy: CursorIntegrationStrategy.CLIPBOARD,
                message: 'Text copied to clipboard'
            };
            
        } catch (error) {
            throw new Error(`Clipboard strategy failed: ${(error as Error).message}`);
        }
    }

    /**
     * –°—Ç—Ä–∞—Ç–µ–≥–∏—è —á–µ—Ä–µ–∑ –ø–∞–ª–∏—Ç—Ä—É –∫–æ–º–∞–Ω–¥
     */
    private async useCommandPaletteStrategy(text: string): Promise<CursorIntegrationResult> {
        try {
            // –°–Ω–∞—á–∞–ª–∞ –∫–æ–ø–∏—Ä—É–µ–º –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
            await this.vscodeEnv.env.clipboard.writeText(text);
            
            // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–ª–∏—Ç—Ä—É –∫–æ–º–∞–Ω–¥ Cursor –¥–ª—è —á–∞—Ç–∞
            // Cursor –º–æ–∂–µ—Ç –∏–º–µ—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è AI —á–∞—Ç–∞
            const cursorChatCommands = [
                'cursor.chat.open',
                'cursor.ai.chat',
                'workbench.action.chat.open',
                'workbench.panel.chat.view.copilot.focus'
            ];
            
            for (const command of cursorChatCommands) {
                try {
                    await this.vscodeEnv.commands.executeCommand(command);
                    
                    return {
                        success: true,
                        strategy: CursorIntegrationStrategy.COMMAND_PALETTE,
                        message: `Chat opened via ${command}`
                    };
                    
                } catch (commandError) {
                    // –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â—É—é
                    console.log(`Command ${command} not available`);
                }
            }
            
            // –ï—Å–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç, –ø—Ä–æ–±—É–µ–º –æ–±—â—É—é –ø–∞–ª–∏—Ç—Ä—É –∫–æ–º–∞–Ω–¥
            await this.vscodeEnv.commands.executeCommand('workbench.action.showCommands');
            
            try {
                await Promise.race([
                    this.vscodeEnv.window.showInformationMessage(
                        'üéØ Command palette opened. Search for "chat" to open Cursor AI chat, then paste text.'
                    ),
                    new Promise((_, reject) => 
                        setTimeout(() => reject(new Error('showInformationMessage timed out')), 1000)
                    )
                ]);
            } catch (error) {
                console.log('Information message timed out or failed');
            }

            return {
                success: true,
                strategy: CursorIntegrationStrategy.COMMAND_PALETTE,
                message: 'Command palette opened'
            };
            
        } catch (error) {
            throw new Error(`Command palette strategy failed: ${(error as Error).message}`);
        }
    }

    /**
     * –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∫–∏ –Ω–∞ —á–∞—Ç–µ
     */
    private async useFocusChatStrategy(text: string): Promise<CursorIntegrationResult> {
        try {
            // –ö–æ–ø–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
            await this.vscodeEnv.env.clipboard.writeText(text);
            
            // –ü—ã—Ç–∞–µ–º—Å—è —Å—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —á–∞—Ç–µ
            const focusResult = await this.focusOnChat();
            
            if (focusResult) {
                try {
                    await Promise.race([
                        this.vscodeEnv.window.showInformationMessage(
                            'üí¨ Chat focused and text copied. Paste with Ctrl+V to send message.'
                        ),
                        new Promise((_, reject) => 
                            setTimeout(() => reject(new Error('showInformationMessage timed out')), 1000)
                        )
                    ]);
                } catch (error) {
                    console.log('Information message timed out or failed');
                }
                
                return {
                    success: true,
                    strategy: CursorIntegrationStrategy.FOCUS_CHAT,
                    message: 'Chat focused successfully'
                };
            } else {
                throw new Error('Failed to focus on chat');
            }
            
        } catch (error) {
            throw new Error(`Focus chat strategy failed: ${(error as Error).message}`);
        }
    }

    /**
     * –°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø—Ä—è–º–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç
     */
    private async useSendToChatStrategy(text: string): Promise<CursorIntegrationResult> {
        try {
            // –≠—Ç–æ –Ω–∞–∏–±–æ–ª–µ–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Ç—Ä–µ–±—É–µ—Ç –ø—Ä—è–º–æ–≥–æ API Cursor
            // –ü–æ–∫–∞ Cursor –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø—É–±–ª–∏—á–Ω–æ–≥–æ API –¥–ª—è —ç—Ç–æ–≥–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
            
            // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã Cursor –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç
            const cursorSendCommands = [
                'cursor.chat.sendMessage',
                'cursor.ai.sendToChat',
                'workbench.action.chat.sendMessage'
            ];
            
            for (const command of cursorSendCommands) {
                try {
                    await this.vscodeEnv.commands.executeCommand(command, text);
                    
                    return {
                        success: true,
                        strategy: CursorIntegrationStrategy.SEND_TO_CHAT,
                        message: `Text sent directly via ${command}`
                    };
                    
                } catch (commandError) {
                    // –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â—É—é
                    console.log(`Direct send command ${command} not available`);
                }
            }
            
            // –ï—Å–ª–∏ –ø—Ä—è–º–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º clipboard –∫–∞–∫ fallback
            return await this.useClipboardStrategy(text);
            
        } catch (error) {
            throw new Error(`Send to chat strategy failed: ${(error as Error).message}`);
        }
    }

    /**
     * –ü–æ–ø—ã—Ç–∫–∞ —Å—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ AI —á–∞—Ç–µ Cursor
     */
    private async focusOnChat(): Promise<boolean> {
        try {
            // –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∫–∏ –Ω–∞ —á–∞—Ç–µ –≤ Cursor
            const focusCommands = [
                'cursor.chat.focus',
                'cursor.ai.focus',
                'workbench.panel.chat.focus',
                'workbench.view.chat',
                'workbench.action.chat.focus'
            ];
            
            for (const command of focusCommands) {
                try {
                    await this.vscodeEnv.commands.executeCommand(command);
                    console.log(`‚úÖ Successfully focused chat via ${command}`);
                    return true;
                    
                } catch (commandError) {
                    // –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â—É—é
                    console.log(`Focus command ${command} not available`);
                }
            }
            
            // –ï—Å–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç, –ø—Ä–æ–±—É–µ–º –æ–±—â–∏–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            try {
                // –°–æ–∑–¥–∞—ë–º –ø—Ä–æ–º–∏—Å —Å —Ç–∞–π–º–∞—É—Ç–æ–º –¥–ª—è –∫–æ–º–∞–Ω–¥
                const executeWithTimeout = async (command: string, timeout: number = 1000): Promise<void> => {
                    return Promise.race([
                        this.vscodeEnv.commands.executeCommand(command),
                        new Promise<void>((_, reject) => 
                            setTimeout(() => reject(new Error(`Command ${command} timed out`)), timeout)
                        )
                    ]);
                };
                
                // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å –∏–ª–∏ –Ω–∏–∂–Ω—é—é –ø–∞–Ω–µ–ª—å —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                try {
                    await executeWithTimeout('workbench.action.toggleSidebarVisibility', 500);
                } catch (error) {
                    console.log('Sidebar toggle timed out or failed');
                }
                
                await new Promise(resolve => setTimeout(resolve, 100));
                
                try {
                    await executeWithTimeout('workbench.action.togglePanel', 500);
                } catch (error) {
                    console.log('Panel toggle timed out or failed');
                }
                
                console.log('‚ÑπÔ∏è Opened panels - user needs to manually focus chat');
                return true;
                
            } catch (error) {
                console.error('‚ùå Failed to open panels:', error);
                return false;
            }
            
        } catch (error) {
            console.error('‚ùå Failed to focus on chat:', error);
            return false;
        }
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç
     */
    private formatTextForChat(text: string): string {
        let formattedText = text.trim();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å
        if (this.options.prefixText) {
            formattedText = this.options.prefixText + formattedText;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—É—Ñ—Ñ–∏–∫—Å
        if (this.options.suffixText) {
            formattedText = formattedText + this.options.suffixText;
        }
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∫ Markdown –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
        if (this.options.useMarkdownFormat) {
            // –û–±—Ä–∞–º–ª—è–µ–º –≤ code block –µ—Å–ª–∏ —ç—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∫–æ–¥
            if (this.looksLikeCode(formattedText)) {
                formattedText = '```\n' + formattedText + '\n```';
            } else {
                // –ò–ª–∏ –∫–∞–∫ —Ü–∏—Ç–∞—Ç—É –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                formattedText = '> ' + formattedText.replace(/\n/g, '\n> ');
            }
        }
        
        return formattedText;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø–æ—Ö–æ–∂ –ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞ –∫–æ–¥
     */
    private looksLikeCode(text: string): boolean {
        const codeIndicators = [
            /function\s+\w+\s*\(/,
            /class\s+\w+/,
            /import\s+.+from/,
            /const\s+\w+\s*=/,
            /let\s+\w+\s*=/,
            /var\s+\w+\s*=/,
            /if\s*\(/,
            /for\s*\(/,
            /while\s*\(/,
            /\{[\s\S]*\}/,
            /\[\s*\d+\s*\]/,
            /console\.log\(/,
            /return\s+/
        ];
        
        return codeIndicators.some(pattern => pattern.test(text));
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
     */
    public updateOptions(newOptions: Partial<CursorIntegrationOptions>): void {
        this.options = { ...this.options, ...newOptions };
        console.log('üîß CursorIntegration options updated');
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
     */
    public getOptions(): CursorIntegrationOptions {
        return { ...this.options };
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
     */
    public static getAvailableStrategies(): CursorIntegrationStrategy[] {
        return [
            CursorIntegrationStrategy.CLIPBOARD,
            CursorIntegrationStrategy.COMMAND_PALETTE,
            CursorIntegrationStrategy.FOCUS_CHAT,
            CursorIntegrationStrategy.SEND_TO_CHAT
        ];
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
     */
    public static getStrategyDescription(strategy: CursorIntegrationStrategy): string {
        const descriptions = {
            [CursorIntegrationStrategy.CLIPBOARD]: 'Copy text to clipboard and optionally focus chat',
            [CursorIntegrationStrategy.COMMAND_PALETTE]: 'Open command palette to access chat commands',
            [CursorIntegrationStrategy.FOCUS_CHAT]: 'Automatically focus on AI chat panel',
            [CursorIntegrationStrategy.SEND_TO_CHAT]: 'Directly send text to chat (if API available)'
        };
        
        return descriptions[strategy] || 'Unknown strategy';
    }

    /**
     * –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
     */
    dispose(): void {
        console.log('üîå Disposing CursorIntegration resources...');
        
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—á–∏—Å—Ç–∫—É –ø–æ–¥–ø–∏—Å–æ–∫, —Ç–∞–π–º–µ—Ä–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
        // –í –¥–∞–Ω–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –Ω–µ—Ç
        
        console.log('‚úÖ CursorIntegration disposed successfully');
    }
} 