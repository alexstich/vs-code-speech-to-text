import * as vscode from 'vscode';

/**
 * –£—Ä–æ–≤–Ω–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 */
export enum LogLevel {
    DEBUG = 'üîç',
    INFO = '‚ÑπÔ∏è',
    WARN = '‚ö†Ô∏è',
    ERROR = '‚ùå',
    CRITICAL = 'üö®'
}

/**
 * –ì–ª–æ–±–∞–ª—å–Ω—ã–π outputChannel –¥–ª—è –≤—Å–µ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
 */
let globalOutputChannel: vscode.OutputChannel | null = null;

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ outputChannel
 * –î–æ–ª–∂–Ω–∞ –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –≤ —Ñ—É–Ω–∫—Ü–∏–∏ activate() —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
 */
export function initializeGlobalOutput(outputChannel: vscode.OutputChannel): void {
    globalOutputChannel = outputChannel;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ outputChannel
 */
export function getGlobalOutputChannel(): vscode.OutputChannel | null {
    return globalOutputChannel;
}

/**
 * –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 */
function logMessage(level: LogLevel, component: string, message: string, data?: any, error?: Error): void {
    const timestamp = new Date().toISOString();
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
    let fullMessage = message;
    if (data !== undefined) {
        if (typeof data === 'string') {
            fullMessage += ` ${data}`;
        } else if (typeof data === 'object' && data !== null) {
            fullMessage += ` ${JSON.stringify(data)}`;
        } else {
            fullMessage += ` ${String(data)}`;
        }
    }
    
    const formattedMessage = `${timestamp} ${level} [${component}] ${fullMessage}`;
    
    // –õ–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤ DevTools)
    if (level === LogLevel.ERROR || level === LogLevel.CRITICAL) {
        console.error(formattedMessage);
        if (error) {
            console.error('Error details:', error);
        }
    } else if (level === LogLevel.WARN) {
        console.warn(formattedMessage);
    } else {
        console.log(formattedMessage);
    }
    
    // –õ–æ–≥–∏—Ä—É–µ–º –≤ VS Code Output Channel –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
    if (globalOutputChannel) {
        globalOutputChannel.appendLine(formattedMessage);
        
        if (error) {
            globalOutputChannel.appendLine(`    Error: ${error.message}`);
            if (error.stack) {
                globalOutputChannel.appendLine(`    Stack: ${error.stack}`);
            }
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
        if (level === LogLevel.CRITICAL) {
            globalOutputChannel.show(true);
        }
    }
}

/**
 * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
 */
export function logDebug(component: string, message: string, data?: any): void {
    logMessage(LogLevel.DEBUG, component, message, data);
}

/**
 * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
 */
export function logInfo(component: string, message: string, data?: any): void {
    logMessage(LogLevel.INFO, component, message, data);
}

/**
 * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
 */
export function logWarn(component: string, message: string, data?: any): void {
    logMessage(LogLevel.WARN, component, message, data);
}

/**
 * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
 */
export function logError(component: string, message: string, data?: any, error?: Error): void {
    logMessage(LogLevel.ERROR, component, message, data, error);
}

/**
 * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
 */
export function logCritical(component: string, message: string, data?: any, error?: Error): void {
    logMessage(LogLevel.CRITICAL, component, message, data, error);
}

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–º —É—Ä–æ–≤–Ω–µ–º
 */
export function log(level: LogLevel, component: string, message: string, data?: any, error?: Error): void {
    logMessage(level, component, message, data, error);
}

/**
 * –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
 */

// –î–ª—è AudioQualityManager
export const AudioQualityManagerLog = {
    info: (message: string, data?: any) => logInfo('AudioQualityManager', message, data),
    warn: (message: string, data?: any) => logWarn('AudioQualityManager', message, data),
    error: (message: string, data?: any, error?: Error) => logError('AudioQualityManager', message, data, error)
};

// –î–ª—è RecoveryActionHandler
export const RecoveryActionHandlerLog = {
    info: (message: string, data?: any) => logInfo('RecoveryActionHandler', message, data),
    warn: (message: string, data?: any) => logWarn('RecoveryActionHandler', message, data),
    error: (message: string, data?: any, error?: Error) => logError('RecoveryActionHandler', message, data, error)
};

// –î–ª—è ErrorHandler
export const ErrorHandlerLog = {
    info: (message: string, data?: any) => logInfo('ErrorHandler', message, data),
    warn: (message: string, data?: any) => logWarn('ErrorHandler', message, data),
    error: (message: string, data?: any, error?: Error) => logError('ErrorHandler', message, data, error)
};

// –î–ª—è RetryManager
export const RetryManagerLog = {
    info: (message: string, data?: any) => logInfo('RetryManager', message, data),
    warn: (message: string, data?: any) => logWarn('RetryManager', message, data),
    error: (message: string, data?: any, error?: Error) => logError('RetryManager', message, data, error)
};

// –î–ª—è ConfigurationManager
export const ConfigurationManagerLog = {
    info: (message: string, data?: any) => logInfo('ConfigurationManager', message, data),
    warn: (message: string, data?: any) => logWarn('ConfigurationManager', message, data),
    error: (message: string, data?: any, error?: Error) => logError('ConfigurationManager', message, data, error)
};

// –î–ª—è CursorIntegration
export const CursorIntegrationLog = {
    debug: (message: string, data?: any) => logDebug('CursorIntegration', message, data),
    info: (message: string, data?: any) => logInfo('CursorIntegration', message, data),
    warn: (message: string, data?: any) => logWarn('CursorIntegration', message, data),
    error: (message: string, data?: any, error?: Error) => logError('CursorIntegration', message, data, error)
};

// –î–ª—è Extension (–æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è)
export const ExtensionLog = {
    debug: (message: string, data?: any) => logDebug('Extension', message, data),
    info: (message: string, data?: any) => logInfo('Extension', message, data),
    warn: (message: string, data?: any) => logWarn('Extension', message, data),
    error: (message: string, data?: any, error?: Error) => logError('Extension', message, data, error)
};

// –î–ª—è FFmpegAudioRecorder
export const FFmpegAudioRecorderLog = {
    debug: (message: string, data?: any) => logDebug('FFmpegAudioRecorder', message, data),
    info: (message: string, data?: any) => logInfo('FFmpegAudioRecorder', message, data),
    warn: (message: string, data?: any) => logWarn('FFmpegAudioRecorder', message, data),
    error: (message: string, data?: any, error?: Error) => logError('FFmpegAudioRecorder', message, data, error)
};

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å Output Channel –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
 */
export function showOutputChannel(): void {
    if (globalOutputChannel) {
        globalOutputChannel.show();
    }
}

/**
 * –û—á–∏—Å—Ç–∏—Ç—å Output Channel
 */
export function clearOutputChannel(): void {
    if (globalOutputChannel) {
        globalOutputChannel.clear();
    }
}

/**
 * –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
 */
export function disposeGlobalOutput(): void {
    if (globalOutputChannel) {
        globalOutputChannel.dispose();
        globalOutputChannel = null;
    }
} 