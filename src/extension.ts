// The module 'vscode' contains the VS Code extensibility API
// Import the module and reference it with the alias vscode in your code below
import * as vscode from 'vscode';
import { FFmpegAudioRecorder, AudioRecorderEvents } from './core/FFmpegAudioRecorder';
import { WhisperClient } from './core/WhisperClient';
import { TextInserter } from './ui/TextInserter';
import { StatusBarManager, StatusBarEvents, StatusBarConfiguration } from './ui/StatusBarManager';
import { DiagnosticsProvider } from './ui/DiagnosticsProvider';
import { DeviceManagerProvider } from './ui/DiagnosticsProvider';
import { SettingsProvider } from './ui/SettingsProvider';
import { ModeSelectorProvider } from './ui/ModeSelectorProvider';
import { ErrorHandler, ErrorType, ErrorContext, VSCodeErrorDisplayHandler } from './utils/ErrorHandler';
import { RetryManager } from './utils/RetryManager';
import { CursorIntegration, CursorIntegrationStrategy } from './integrations/CursorIntegration';

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
let audioRecorder: FFmpegAudioRecorder | null = null;
let whisperClient: WhisperClient;
let textInserter: TextInserter;
let statusBarManager: StatusBarManager;
let diagnosticsProvider: DiagnosticsProvider;
let deviceManagerProvider: DeviceManagerProvider;
let settingsProvider: SettingsProvider;
let modeSelectorProvider: ModeSelectorProvider;

// –°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
let errorHandler: ErrorHandler;
let retryManager: RetryManager;

// –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
let extensionContext: vscode.ExtensionContext;

// –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
let lastTranscribedText: string | null = null;

// –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∑–∞–ø–∏—Å–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —á–∞—Å—Ç—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
let lastRecordingStartTime = 0;
const MIN_RECORDING_INTERVAL = 200; // –º–∏–Ω–∏–º—É–º 200ms –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏

// –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ –∑–∞–ø–∏—Å–∏
let currentRecordingMode: 'insert' | 'clipboard' | 'chat' | null = null;

// –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Cursor —á–∞—Ç–æ–º
let cursorIntegration: CursorIntegration;

/**
 * –§—É–Ω–∫—Ü–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
 * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
 */
export function activate(context: vscode.ExtensionContext) {
	console.log('üé§ SpeechToTextWhisper extension is now active!');
	
	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
	extensionContext = context;

	try {
		// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
		initializeErrorHandling();
		
		// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
		initializeComponents();
		
		// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã
		registerCommands(context);
		
		// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º WhisperClient –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
		initializeWhisperClient();
		
		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		showWelcomeMessage();
		
		console.log('‚úÖ SpeechToTextWhisper extension successfully activated');
		
	} catch (error) {
		const errorMessage = `Failed to activate SpeechToTextWhisper: ${(error as Error).message}`;
		console.error(errorMessage);
		vscode.window.showErrorMessage(errorMessage);
	}
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
 */
function initializeErrorHandling(): void {
	console.log('üîß Initializing error handling system...');
	
	// –°–æ–∑–¥–∞–µ–º ErrorHandler —Å VS Code display handler
	errorHandler = new ErrorHandler(new VSCodeErrorDisplayHandler());
	
	// –°–æ–∑–¥–∞–µ–º RetryManager
	retryManager = new RetryManager(errorHandler);
	
	console.log('‚úÖ Error handling system initialized');
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
 */
function initializeComponents(): void {
	console.log('üîß Initializing SpeechToTextWhisper components...');
	
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º CursorIntegration
	initializeCursorIntegration();
	
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º TextInserter
	textInserter = new TextInserter();
	
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º DiagnosticsProvider
	diagnosticsProvider = new DiagnosticsProvider();
	
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º DeviceManagerProvider
	deviceManagerProvider = new DeviceManagerProvider();
	
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SettingsProvider
	settingsProvider = new SettingsProvider();
	
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ModeSelectorProvider
	modeSelectorProvider = new ModeSelectorProvider();
	
	// –°–æ–±—ã—Ç–∏—è –¥–ª—è AudioRecorder
	const audioRecorderEvents: AudioRecorderEvents = {
		onRecordingStart: () => {
			console.log('üé§ Recording started');
			statusBarManager.updateRecordingState(true);
			vscode.window.showInformationMessage('üé§ Recording started...');
		},
		onRecordingStop: async (audioBlob: Blob) => {
			console.log('‚èπÔ∏è Recording stopped, processing audio...');
			statusBarManager.updateRecordingState(false);
			
			// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é
			await handleTranscription(audioBlob);
		},
		onError: (error: Error) => {
			console.error('‚ùå Audio recording error:', error);
			statusBarManager.showError(`Recording error: ${error.message}`);
			vscode.window.showErrorMessage(`Recording failed: ${error.message}`);
		}
	};
	
	// –°–æ–±—ã—Ç–∏—è –¥–ª—è StatusBar
	const statusBarEvents: StatusBarEvents = {
		onRecordingToggle: () => {
			console.log('üìä Status bar clicked');
			vscode.commands.executeCommand('workbench.action.openSettings', 'speechToTextWhisper');
		}
	};
	
	// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è StatusBar
	const statusBarConfig: StatusBarConfiguration = {
		position: 'right',
		priority: 100,
		showTooltips: true,
		enableAnimations: true
	};
	
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º StatusBarManager
	statusBarManager = new StatusBarManager(statusBarEvents, statusBarConfig);
	
	console.log('‚úÖ Components initialized');
}

/**
 * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
 */
function registerCommands(context: vscode.ExtensionContext): void {
	console.log('üìù Registering commands...');
	
	const commands = [
		// –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∑–∞–ø–∏—Å–∏
		vscode.commands.registerCommand('speechToTextWhisper.recordAndInsert', recordAndInsert),
		vscode.commands.registerCommand('speechToTextWhisper.recordToClipboard', recordToClipboard),
		// –ö–æ–º–∞–Ω–¥–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
		vscode.commands.registerCommand('speechToTextWhisper.runDiagnostics', () => diagnosticsProvider.runAllDiagnostics()),
		// –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏
		vscode.commands.registerCommand('speechToTextWhisper.audioSettings.selectDevice', (deviceId: string) => deviceManagerProvider.selectDevice(deviceId)),
		// –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
		vscode.commands.registerCommand('speechToTextWhisper.openSettings', () => settingsProvider.openSettings()),
		// –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞
		vscode.commands.registerCommand('speechToTextWhisper.toggleMode', () => modeSelectorProvider.toggleMode())
	];

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º DiagnosticsProvider –∫–∞–∫ TreeDataProvider
	vscode.window.registerTreeDataProvider('speechToTextWhisper.diagnostics', diagnosticsProvider);

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º DeviceManagerProvider –∫–∞–∫ TreeDataProvider
	vscode.window.registerTreeDataProvider('speechToTextWhisper.deviceManager', deviceManagerProvider);

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º SettingsProvider –∫–∞–∫ TreeDataProvider
	vscode.window.registerTreeDataProvider('speechToTextWhisper.settings', settingsProvider);

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º ModeSelectorProvider –∫–∞–∫ TreeDataProvider
	vscode.window.registerTreeDataProvider('speechToTextWhisper.modeSelector', modeSelectorProvider);

	// –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –≤ –ø–æ–¥–ø–∏—Å–∫–∏
	context.subscriptions.push(...commands, statusBarManager);
	
	console.log(`‚úÖ Registered ${commands.length} commands`);
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
 */
async function handleTranscription(audioBlob: Blob): Promise<void> {
	const context: ErrorContext = {
		operation: 'transcription',
		isHoldToRecordMode: false,
		timestamp: new Date(),
		additionalData: { audioBlobSize: audioBlob.size }
	};

	try {
		console.log('üîÑ Starting transcription process...');
		
		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
		statusBarManager.showProcessing();
		
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ WhisperClient
		if (!whisperClient) {
			initializeWhisperClient();
			if (!whisperClient) {
				await errorHandler.handleError(ErrorType.API_KEY_MISSING, context);
				return;
			}
		}

		// –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
		statusBarManager.showTranscribing();

		// –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
		const config = vscode.workspace.getConfiguration('speechToTextWhisper');
		const language = config.get<string>('language', 'auto');
		const prompt = config.get<string>('prompt', '');

		// –û–ø—Ü–∏–∏ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
		const transcriptionOptions = {
			language: language === 'auto' ? undefined : language,
			prompt: prompt || undefined,
			temperature: config.get<number>('temperature', 0.1)
		};

		console.log('üéØ Sending audio to Whisper API...');
		
		// –ò—Å–ø–æ–ª—å–∑—É–µ–º retry –¥–ª—è API –∑–∞–ø—Ä–æ—Å–∞
		const transcriptionResult = await retryManager.retryApiRequest(
			() => whisperClient.transcribe(audioBlob, transcriptionOptions),
			'whisper_transcription',
			{
				maxAttempts: config.get<number>('maxRetries', 3),
				baseDelay: 1000
			}
		);

		if (!transcriptionResult.success) {
			// –ï—Å–ª–∏ retry –Ω–µ –ø–æ–º–æ–≥, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ ErrorHandler
			const error = transcriptionResult.lastError || new Error('Transcription failed after retries');
			await errorHandler.handleErrorFromException(error, context);
			return;
		}

		const transcribedText = transcriptionResult.result;
		
		if (transcribedText && transcribedText.trim()) {
			console.log('‚úÖ Transcription successful:', transcribedText.substring(0, 100));
			
			// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é
			lastTranscribedText = transcribedText.trim();
			
			// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å—Ç–∞–≤–∫–∏
			statusBarManager.showInserting();
			
			// –ò—Å–ø–æ–ª—å–∑—É–µ–º currentRecordingMode –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è
			console.log(`üîç Current recording mode: ${currentRecordingMode}`);
			
			if (currentRecordingMode === 'insert') {
				console.log('üìù Inserting into editor (mode: insert)');
				
				try {
					// –í—Å—Ç–∞–≤–ª—è–µ–º –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä
					await insertTranscribedTextWithErrorHandling(lastTranscribedText, 'cursor', context);
					
					// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—Ö
					const truncatedText = lastTranscribedText.substring(0, 50) + (lastTranscribedText.length > 50 ? '...' : '');
					statusBarManager.showSuccess(`Inserted: "${truncatedText}"`);
					
					// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
					vscode.window.showInformationMessage(`‚úÖ Transcribed and inserted: "${truncatedText}"`);
					
					// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∂–∏–º
					currentRecordingMode = null;
					return;
					
				} catch (error) {
					console.error('‚ùå Failed to insert text:', error);
					vscode.window.showErrorMessage(`Failed to insert text: ${(error as Error).message}`);
					currentRecordingMode = null;
					return;
				}
			} else if (currentRecordingMode === 'chat') {
				console.log('üéØ Sending to Cursor chat (mode: chat)');
				
				try {
					// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç —á–µ—Ä–µ–∑ CursorIntegration
					await insertLastTranscription('chat');
					
					// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—Ö
					const truncatedText = lastTranscribedText.substring(0, 50) + (lastTranscribedText.length > 50 ? '...' : '');
					statusBarManager.showSuccess(`Sent to chat: "${truncatedText}"`);
					
					// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
					vscode.window.showInformationMessage(`‚úÖ Transcribed and sent to chat: "${truncatedText}"`);
					
					// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∂–∏–º
					currentRecordingMode = null;
					return;
					
				} catch (error) {
					console.error('‚ùå Failed to send to chat:', error);
					vscode.window.showErrorMessage(`Failed to send to chat: ${(error as Error).message}`);
					currentRecordingMode = null;
					return;
				}
			} else if (currentRecordingMode === 'clipboard') {
				console.log('üìã Copying to clipboard (mode: clipboard)');
				
				try {
					// –ö–æ–ø–∏—Ä—É–µ–º –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
					await insertLastTranscription('clipboard');
					
					// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—Ö
					const truncatedText = lastTranscribedText.substring(0, 50) + (lastTranscribedText.length > 50 ? '...' : '');
					statusBarManager.showSuccess(`Copied: "${truncatedText}"`);
					
					// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
					vscode.window.showInformationMessage(`‚úÖ Transcribed and copied to clipboard: "${truncatedText}"`);
					
					// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∂–∏–º
					currentRecordingMode = null;
					return;
					
				} catch (error) {
					console.error('‚ùå Failed to copy to clipboard:', error);
					vscode.window.showErrorMessage(`Failed to copy to clipboard: ${(error as Error).message}`);
					currentRecordingMode = null;
					return;
				}
			}
			
		} else {
			// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Å—Ç–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
			await errorHandler.handleError(ErrorType.TRANSCRIPTION_EMPTY, context);
		}
		
	} catch (error) {
		console.error('‚ùå Transcription failed:', error);
		await errorHandler.handleErrorFromException(error as Error, context);
	}
}

/**
 * –í—Å—Ç–∞–≤–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
 */
async function insertTranscribedTextWithErrorHandling(text: string, mode: string, parentContext: ErrorContext): Promise<void> {
	const context: ErrorContext = {
		operation: 'text_insertion',
		isHoldToRecordMode: parentContext.isHoldToRecordMode,
		timestamp: new Date(),
		additionalData: { 
			insertMode: mode, 
			textLength: text.length,
			parentOperation: parentContext.operation
		}
	};

	try {
		console.log(`üìù Inserting text with mode: ${mode}`);
		
		// –ò—Å–ø–æ–ª—å–∑—É–µ–º retry –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞
		const insertResult = await retryManager.retry(
			() => textInserter.insertText(text, { mode: mode as 'cursor' | 'comment' | 'replace' | 'newLine' | 'clipboard' }),
			'text_insertion'
		);

		if (!insertResult.success) {
			const error = insertResult.lastError || new Error('Text insertion failed after retries');
			await errorHandler.handleErrorFromException(error, context);
		}
		
	} catch (error) {
		console.error('‚ùå Text insertion failed:', error);
		await errorHandler.handleErrorFromException(error as Error, context);
	}
}

/**
 * –í—Å—Ç–∞–≤–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
 */
async function insertLastTranscription(mode: string): Promise<void> {
	if (!lastTranscribedText) {
		vscode.window.showWarningMessage('No transcribed text available');
		return;
	}

	const context: ErrorContext = {
		operation: 'insert_last_transcription',
		isHoldToRecordMode: false,
		timestamp: new Date(),
		additionalData: { insertMode: mode }
	};

	try {
		console.log(`üìù Inserting last transcription with mode: ${mode}`);
		
		if (mode === 'chat') {
			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Cursor —á–∞—Ç
			if (!cursorIntegration || !cursorIntegration.isIntegrationEnabled()) {
				throw new Error('Cursor integration not available');
			}
			
			await cursorIntegration.sendToChat(lastTranscribedText);
			console.log('‚úÖ Text sent to Cursor chat');
			
		} else if (mode === 'clipboard') {
			// –ö–æ–ø–∏—Ä—É–µ–º –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
			await vscode.env.clipboard.writeText(lastTranscribedText);
			console.log('‚úÖ Text copied to clipboard');
			
		} else {
			// –í—Å—Ç–∞–≤–ª—è–µ–º –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä
			await insertTranscribedTextWithErrorHandling(lastTranscribedText, mode, context);
		}
		
	} catch (error) {
		console.error(`‚ùå Failed to insert last transcription (mode: ${mode}):`, error);
		await errorHandler.handleErrorFromException(error as Error, context);
	}
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WhisperClient
 */
function initializeWhisperClient(): void {
	console.log('üîß Initializing WhisperClient...');
	
	const config = vscode.workspace.getConfiguration('speechToTextWhisper');
	const apiKey = config.get<string>('apiKey');
	
	if (!apiKey) {
		console.warn('‚ö†Ô∏è OpenAI API key not configured');
		vscode.window.showWarningMessage(
			'OpenAI API key not configured. Please set it in settings.',
			'Open Settings'
		).then(selection => {
			if (selection === 'Open Settings') {
				vscode.commands.executeCommand('workbench.action.openSettings', 'speechToTextWhisper.apiKey');
			}
		});
		return;
	}
	
	try {
		whisperClient = new WhisperClient({
			apiKey: apiKey,
			timeout: config.get<number>('timeout', 30000)
		});
		
		console.log('‚úÖ WhisperClient initialized');
		
	} catch (error) {
		console.error('‚ùå Failed to initialize WhisperClient:', error);
		vscode.window.showErrorMessage(`Failed to initialize Whisper client: ${(error as Error).message}`);
	}
}

function showWelcomeMessage(): void {
	const config = vscode.workspace.getConfiguration('speechToTextWhisper');
	const showStatusBar = config.get<boolean>('showStatusBar', true);
	
	if (showStatusBar) {
		statusBarManager.show();
	}
	
	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é —Å–ø—Ä–∞–≤–∫—É –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
	if (extensionContext && extensionContext.globalState) {
		const hasShownWelcome = extensionContext.globalState.get<boolean>('hasShownWelcome', false);
		if (!hasShownWelcome) {
			vscode.window.showInformationMessage(
				'üé§ Speech to Text with Whisper activated! Use F9 to record and send to chat, Ctrl+Shift+M to record to clipboard.',
				'Got it!'
			).then(() => {
				if (extensionContext && extensionContext.globalState) {
					extensionContext.globalState.update('hasShownWelcome', true);
				}
			});
		}
	}
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
 */
export function deactivate() {
	console.log('üîå Deactivating SpeechToTextWhisper extension...');
	
	// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å –µ—Å–ª–∏ –æ–Ω–∞ –∏–¥–µ—Ç
	if (audioRecorder && audioRecorder.getIsRecording()) {
		audioRecorder.stopRecording();
	}
	
	// –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
	audioRecorder = null;
	lastTranscribedText = null;
	currentRecordingMode = null;
	
	console.log('‚úÖ SpeechToTextWhisper extension deactivated');
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Cursor
 */
function initializeCursorIntegration(): void {
	console.log('üîß Initializing Cursor integration...');
	
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	const primaryStrategy = CursorIntegrationStrategy.AICHAT_COMMAND;
	
	console.log(`üéØ Using Cursor integration strategy: ${primaryStrategy}`);
	
	// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä CursorIntegration
	cursorIntegration = new CursorIntegration({
		primaryStrategy: primaryStrategy,
		fallbackStrategies: [
			CursorIntegrationStrategy.CLIPBOARD,
			CursorIntegrationStrategy.COMMAND_PALETTE
		],
		autoFocusChat: true,
		prefixText: '',
		suffixText: '',
		useMarkdownFormat: true,
		timeout: 5000
	}, {
		onChatSent: (text: string, strategy: CursorIntegrationStrategy) => {
			console.log(`‚úÖ Text sent to chat via ${strategy}: "${text.substring(0, 50)}..."`);
		},
		onFallbackUsed: (primary: CursorIntegrationStrategy, fallback: CursorIntegrationStrategy) => {
			console.log(`üîÑ Fallback used: ${primary} -> ${fallback}`);
			vscode.window.showWarningMessage(`Cursor chat: fell back to ${fallback} strategy`);
		},
		onError: (error: Error, strategy: CursorIntegrationStrategy) => {
			console.error(`‚ùå CursorIntegration error with ${strategy}:`, error);
		}
	});
	
	console.log(`‚úÖ CursorIntegration initialized, enabled: ${cursorIntegration.isIntegrationEnabled()}`);
}

/**
 * –ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø–∏—Å–∏ —Å –≤—Å—Ç–∞–≤–∫–æ–π —Ç–µ–∫—Å—Ç–∞
 */
async function recordAndInsert(): Promise<void> {
	const context: ErrorContext = {
		operation: 'record_and_insert',
		isHoldToRecordMode: false,
		timestamp: new Date()
	};

	try {
		console.log('üé§ Starting record and insert...');
		
		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –∑–∞–ø–∏—Å–∏ –≤ 'insert'
		currentRecordingMode = 'insert';
		
		// –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å
		await startRecording();
		
		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
		vscode.window.showInformationMessage('üé§ Recording... Release F9 to insert');
		
	} catch (error) {
		console.error('‚ùå Record and insert failed:', error);
		currentRecordingMode = null;
		await errorHandler.handleErrorFromException(error as Error, context);
	}
}

/**
 * –ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø–∏—Å–∏ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
 */
async function recordToClipboard(): Promise<void> {
	const context: ErrorContext = {
		operation: 'record_to_clipboard',
		isHoldToRecordMode: false,
		timestamp: new Date()
	};

	try {
		console.log('üìã Starting record to clipboard...');
		
		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –∑–∞–ø–∏—Å–∏ –≤ 'clipboard'
		currentRecordingMode = 'clipboard';
		
		// –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å
		await startRecording();
		
		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
		vscode.window.showInformationMessage('üé§ Recording... Release Ctrl+Shift+M to copy to clipboard');
		
	} catch (error) {
		console.error('‚ùå Record to clipboard failed:', error);
		currentRecordingMode = null;
		await errorHandler.handleErrorFromException(error as Error, context);
	}
}

/**
 * –ö–æ–º–∞–Ω–¥—ã –∑–∞–ø–∏—Å–∏
 */
async function startRecording(): Promise<void> {
	const context: ErrorContext = {
		operation: 'start_recording',
		isHoldToRecordMode: false,
		timestamp: new Date()
	};

	try {
		console.log('‚ñ∂Ô∏è Starting recording...');
		
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
		const now = Date.now();
		if (now - lastRecordingStartTime < MIN_RECORDING_INTERVAL) {
			console.log('‚ö†Ô∏è Too frequent recording attempts, skipping');
			return;
		}
		lastRecordingStartTime = now;
		
		// –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é FFmpeg Audio Recorder
		await ensureFFmpegAudioRecorder();
		
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–¥–µ—Ç –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å
		if (audioRecorder && audioRecorder.getIsRecording()) {
			console.log('‚ö†Ô∏è Recording already in progress, skipping start');
			return;
		}
		
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ —Å retry
		const microphoneResult = await retryManager.retryMicrophoneOperation(
			async () => {
				const hasPermission = await FFmpegAudioRecorder.checkMicrophonePermission();
				if (hasPermission.state !== 'granted') {
					throw new Error('Microphone permission not granted');
				}
				return hasPermission;
			},
			'microphone_permission_check'
		);

		if (!microphoneResult.success) {
			const error = microphoneResult.lastError || new Error('Microphone access failed');
			await errorHandler.handleErrorFromException(error, context);
			return;
		}
		
		if (!audioRecorder) {
			throw new Error('Failed to initialize audio recorder');
		}
		
		await audioRecorder.startRecording();
		
	} catch (error) {
		console.error('‚ùå Failed to start recording:', error);
		await errorHandler.handleErrorFromException(error as Error, context);
	}
}

function stopRecording(): void {
	try {
		console.log('‚èπÔ∏è Stopping recording...');
		
		if (!audioRecorder) {
			console.warn('Audio recorder not initialized');
			return;
		}
		
		audioRecorder.stopRecording();
		
		// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∂–∏–º –∑–∞–ø–∏—Å–∏
		currentRecordingMode = null;
		
	} catch (error) {
		console.error('‚ùå Failed to stop recording:', error);
		vscode.window.showErrorMessage(`Failed to stop recording: ${(error as Error).message}`);
	}
}

/**
 * –û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ FFmpeg Audio Recorder
 */
async function ensureFFmpegAudioRecorder(): Promise<void> {
	if (audioRecorder) {
		return; // –£–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
	}

	console.log('üîß Initializing FFmpeg Audio Recorder...');
	
	try {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å FFmpeg
		const ffmpegCheck = await FFmpegAudioRecorder.checkFFmpegAvailability();
		if (!ffmpegCheck.available) {
			throw new Error(`FFmpeg not available: ${ffmpegCheck.error || 'Unknown error'}`);
		}
		
		// –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É–¥–∏–æ
		const config = vscode.workspace.getConfiguration('speechToTextWhisper');
		const audioQuality = config.get<string>('audioQuality', 'standard');
		
		// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞—á–µ—Å—Ç–≤–∞
		let sampleRate = 16000;
		let bitrate = '64k';
		
		switch (audioQuality) {
			case 'high':
				sampleRate = 44100;
				bitrate = '128k';
				break;
			case 'ultra':
				sampleRate = 48000;
				bitrate = '192k';
				break;
			default: // standard
				sampleRate = 16000;
				bitrate = '64k';
				break;
		}
		
		// –°–æ–±—ã—Ç–∏—è –¥–ª—è AudioRecorder
		const audioRecorderEvents: AudioRecorderEvents = {
			onRecordingStart: () => {
				console.log('üé§ Recording started');
				statusBarManager.updateRecordingState(true);
				vscode.window.showInformationMessage('üé§ Recording started...');
			},
			onRecordingStop: async (audioBlob: Blob) => {
				console.log('‚èπÔ∏è Recording stopped, processing audio...');
				statusBarManager.updateRecordingState(false);
				
				// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é
				await handleTranscription(audioBlob);
			},
			onError: (error: Error) => {
				console.error('‚ùå Audio recording error:', error);
				statusBarManager.showError(`Recording error: ${error.message}`);
				vscode.window.showErrorMessage(`Recording failed: ${error.message}`);
			}
		};
		
		// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä FFmpegAudioRecorder
		audioRecorder = new FFmpegAudioRecorder(audioRecorderEvents, {
			sampleRate: sampleRate,
			channelCount: 1, // –ú–æ–Ω–æ –¥–ª—è —Ä–µ—á–∏
			audioFormat: 'wav',
			codec: 'pcm_s16le',
			maxDuration: config.get<number>('maxRecordingDuration', 60),
			ffmpegPath: config.get<string>('ffmpegPath', '') || undefined,
			silenceDetection: config.get<boolean>('silenceDetection', true),
			silenceDuration: config.get<number>('silenceDuration', 3),
			silenceThreshold: config.get<number>('silenceThreshold', -50)
		});
		
		console.log(`‚úÖ FFmpeg Audio Recorder initialized (quality: ${audioQuality}, sample rate: ${sampleRate}Hz)`);
		
	} catch (error) {
		console.error('‚ùå Failed to initialize FFmpeg Audio Recorder:', error);
		throw error;
	}
}
