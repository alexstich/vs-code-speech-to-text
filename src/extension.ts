// The module 'vscode' contains the VS Code extensibility API
// Import the module and reference it with the alias vscode in your code below
import * as vscode from 'vscode';
import { FFmpegAudioRecorder, AudioRecorderEvents } from './core/FFmpegAudioRecorder';
import { WhisperClient } from './core/WhisperClient';
import { TextInserter } from './ui/TextInserter';
import { StatusBarManager, StatusBarEvents, StatusBarConfiguration } from './ui/StatusBarManager';
import { DiagnosticsProvider } from './ui/DiagnosticsProvider';
import { DeviceManagerProvider } from './ui/DiagnosticsProvider';
import { SettingsProvider } from './ui/SettingsProvider';
import { ModeSelectorProvider } from './ui/ModeSelectorProvider';
import { ErrorHandler, ErrorType, ErrorContext, VSCodeErrorDisplayHandler } from './utils/ErrorHandler';
import { RetryManager } from './utils/RetryManager';
import { CursorIntegration, CursorIntegrationStrategy } from './integrations/CursorIntegration';
import { ConfigurationManager } from './core/ConfigurationManager';
import { initializeGlobalOutput, ExtensionLog, disposeGlobalOutput } from './utils/GlobalOutput';

/**
 * –†–µ–∂–∏–º—ã –∑–∞–ø–∏—Å–∏ –¥–ª—è –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –∫–æ–º–∞–Ω–¥
 */
enum RecordingMode {
	INSERT_OR_CLIPBOARD = 'insertOrClipboard',  // Ctrl+Shift+M - –≤—Å—Ç–∞–≤–∫–∞ –≤ –∫—É—Ä—Å–æ—Ä –∏–ª–∏ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
	CURRENT_CHAT = 'currentChat',               // Ctrl+Shift+N - –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ —Ç–µ–∫—É—â–∏–π —á–∞—Ç Cursor
	NEW_CHAT = 'newChat'                        // F9 - –æ—Ç–∫—Ä—ã—Ç–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
}

/**
 * –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–ø–∏—Å–∏
 */
interface RecordingState {
	isRecording: boolean;
	mode: RecordingMode | null;
	startTime: number | null;
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
let audioRecorder: FFmpegAudioRecorder | null = null;
let whisperClient: WhisperClient;
let textInserter: TextInserter;
let statusBarManager: StatusBarManager;
let diagnosticsProvider: DiagnosticsProvider;
let deviceManagerProvider: DeviceManagerProvider;
let settingsProvider: SettingsProvider;
let modeSelectorProvider: ModeSelectorProvider;

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π output –∫–∞–Ω–∞–ª –¥–ª—è –≤—Å–µ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
let outputChannel: vscode.OutputChannel;

// –°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
let errorHandler: ErrorHandler;
let retryManager: RetryManager;

// –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
let configurationManager: ConfigurationManager;

// –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
let extensionContext: vscode.ExtensionContext;

// –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–ø–∏—Å–∏ (–∑–∞–º–µ–Ω—è–µ—Ç currentRecordingMode)
let recordingState: RecordingState = {
	isRecording: false,
	mode: null,
	startTime: null
};

// –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∑–∞–ø–∏—Å–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —á–∞—Å—Ç—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
let lastRecordingStartTime = 0;
const MIN_RECORDING_INTERVAL = 100; // –º–∏–Ω–∏–º—É–º 100ms –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ (–±—ã–ª–æ 200ms)

// –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
let lastTranscribedText: string | null = null;

// –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Cursor —á–∞—Ç–æ–º
let cursorIntegration: CursorIntegration;

/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∑–∞–ø–∏—Å–∏
 */
class RecordingStateManager {
	/**
	 * –ü—Ä–æ–≤–µ—Ä–∫–∞, –∏–¥–µ—Ç –ª–∏ –∑–∞–ø–∏—Å—å
	 */
	static isRecording(): boolean {
		return recordingState.isRecording;
	}

	/**
	 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ –∑–∞–ø–∏—Å–∏
	 */
	static getCurrentMode(): RecordingMode | null {
		return recordingState.mode;
	}

	/**
	 * –ù–∞—á–∞–ª–æ –∑–∞–ø–∏—Å–∏ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ä–µ–∂–∏–º–æ–º
	 */
	static startRecording(mode: RecordingMode): boolean {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–¥–µ—Ç –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å
		if (recordingState.isRecording) {
			console.warn('‚ö†Ô∏è Recording already in progress');
			return false;
		}

		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
		const now = Date.now();
		recordingState = {
			isRecording: true,
			mode: mode,
			startTime: now
		};

		console.log(`üé§ Recording started with mode: ${mode}`);
		return true;
	}

	/**
	 * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏
	 */
	static stopRecording(): RecordingMode | null {
		if (!recordingState.isRecording) {
			console.warn('‚ö†Ô∏è No recording in progress to stop');
			return null;
		}

		const mode = recordingState.mode;
		recordingState = {
			isRecording: false,
			mode: null,
			startTime: null
		};

		console.log(`‚èπÔ∏è Recording stopped, mode was: ${mode}`);
		return mode;
	}

	/**
	 * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ä–µ–∂–∏–º–∞ (–¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏)
	 */
	static stopRecordingKeepMode(): RecordingMode | null {
		if (!recordingState.isRecording) {
			console.warn('‚ö†Ô∏è No recording in progress to stop');
			return null;
		}

		const mode = recordingState.mode;
		recordingState.isRecording = false;
		// mode –∏ startTime –æ—Å—Ç–∞—é—Ç—Å—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏

		console.log(`‚èπÔ∏è Recording stopped, mode preserved for transcription: ${mode}`);
		return mode;
	}

	/**
	 * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è (–¥–ª—è –æ—à–∏–±–æ–∫)
	 */
	static resetState(): void {
		recordingState = {
			isRecording: false,
			mode: null,
			startTime: null
		};
		console.log('üîÑ Recording state reset');
	}

	/**
	 * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç–µ–∫—É—â–µ–π –∑–∞–ø–∏—Å–∏ –≤ ms
	 */
	static getRecordingDuration(): number {
		if (!recordingState.isRecording || !recordingState.startTime) {
			return 0;
		}
		return Date.now() - recordingState.startTime;
	}

	/**
	 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–ø–∏—Å–∏
	 */
	static getState(): RecordingState {
		return recordingState;
	}
}

/**
 * –§—É–Ω–∫—Ü–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
 * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
 */
export function activate(context: vscode.ExtensionContext) {
	// –°–æ–∑–¥–∞–µ–º output channel –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
	outputChannel = vscode.window.createOutputChannel('Speech to Text Whisper');
	outputChannel.appendLine('üöÄ Extension activation started');
	outputChannel.show(); // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ Output panel
	
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
	initializeGlobalOutput(outputChannel);
	ExtensionLog.info('SpeechToTextWhisper extension activation started! NEW VERSION 2024');
	ExtensionLog.info(`VS Code version: ${vscode.version}`);
	ExtensionLog.info(`Extension folder: ${context.extensionPath}`);
	
	// –¢–∞–∫–∂–µ –ø–æ–ø—Ä–æ–±—É–µ–º window.showInformationMessage –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
	vscode.window.showInformationMessage('üé§ SpeechToTextWhisper extension is activating...');
	
	console.log('üé§ SpeechToTextWhisper extension activation started! NEW VERSION 2024');
	vscode.window.showInformationMessage('üé§ SpeechToTextWhisper extension is activating...');
	
	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
	extensionContext = context;

	try {
		// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
		console.log('üé§ Initializing error handling...');
		initializeErrorHandling();
		
		// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
		console.log('üé§ Initializing components...');
		initializeComponents();
		
		// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã
		console.log('üé§ Registering commands...');
		registerCommands(context);
		
		// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º WhisperClient –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
		console.log('üé§ Initializing Whisper client...');
		initializeWhisperClient();
		
		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ StatusBar
		console.log('üé§ Showing welcome message...');
		showWelcomeMessage();
		
		// –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
		console.log('üé§ Setting up configuration change listener...');
		configurationManager.addChangeListener((config) => {
			console.log('üîß Configuration changed, reinitializing components...');
			
			// –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º WhisperClient –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
			console.log('üîÑ Reinitializing WhisperClient due to configuration change...');
			initializeWhisperClient();
			
			// –°–±—Ä–∞—Å—ã–≤–∞–µ–º audioRecorder –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∞—É–¥–∏–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫
			console.log('üîÑ Resetting audioRecorder due to configuration change...');
			audioRecorder = null;
			
			// –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å StatusBar
			if (config.ui.showStatusBar) {
				statusBarManager.show();
			} else {
				statusBarManager.hide();
			}
		});
		
		console.log('‚úÖ SpeechToTextWhisper extension successfully activated');
		vscode.window.showInformationMessage('‚úÖ SpeechToTextWhisper extension successfully activated!');
		
	} catch (error) {
		const errorMessage = `Failed to activate SpeechToTextWhisper: ${(error as Error).message}`;
		console.error('‚ùå Activation error:', errorMessage);
		vscode.window.showErrorMessage(errorMessage);
	}
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
 */
function initializeErrorHandling(): void {
	console.log('üîß Initializing error handling system...');
	
	// –°–æ–∑–¥–∞–µ–º ErrorHandler —Å VS Code display handler
	errorHandler = new ErrorHandler(new VSCodeErrorDisplayHandler());
	
	// –°–æ–∑–¥–∞–µ–º RetryManager
	retryManager = new RetryManager(errorHandler);
	
	console.log('‚úÖ Error handling system initialized');
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
 */
function initializeComponents(): void {
	console.log('üîß Initializing SpeechToTextWhisper components...');
	
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ConfigurationManager
	configurationManager = ConfigurationManager.getInstance();
	console.log('‚úÖ ConfigurationManager initialized');
	
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º CursorIntegration
	initializeCursorIntegration();
	
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º TextInserter
	textInserter = new TextInserter();
	
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º DiagnosticsProvider
	diagnosticsProvider = new DiagnosticsProvider();
	
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º DeviceManagerProvider
	deviceManagerProvider = new DeviceManagerProvider();
	
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SettingsProvider
	settingsProvider = new SettingsProvider();
	
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ModeSelectorProvider
	modeSelectorProvider = new ModeSelectorProvider();
	
	// –°–æ–±—ã—Ç–∏—è –¥–ª—è StatusBar
	const statusBarEvents: StatusBarEvents = {
		onRecordingToggle: () => {
			console.log('üìä Status bar clicked');
			vscode.commands.executeCommand('workbench.action.openSettings', 'speechToTextWhisper');
		}
	};
	
	// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è StatusBar
	const statusBarConfig: StatusBarConfiguration = {
		position: 'right',
		priority: 100,
		showTooltips: true,
		enableAnimations: true
	};
	
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º StatusBarManager
	statusBarManager = new StatusBarManager(statusBarEvents, statusBarConfig);
	
	console.log('‚úÖ Components initialized');
}

/**
 * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
 */
function registerCommands(context: vscode.ExtensionContext): void {
	console.log('üìù Registering commands...');
	
	const commands = [
		// –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∑–∞–ø–∏—Å–∏
		vscode.commands.registerCommand('speechToTextWhisper.recordAndInsertOrClipboard', recordAndInsertOrClipboard),
		vscode.commands.registerCommand('speechToTextWhisper.recordAndInsertToCurrentChat', recordAndInsertToCurrentChat),
		vscode.commands.registerCommand('speechToTextWhisper.recordAndOpenNewChat', recordAndOpenNewChat),
		// –ö–æ–º–∞–Ω–¥–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
		vscode.commands.registerCommand('speechToTextWhisper.runDiagnostics', () => diagnosticsProvider.runAllDiagnostics()),
		// –ö–æ–º–∞–Ω–¥–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è FFmpeg
		vscode.commands.registerCommand('speechToTextWhisper.testFFmpeg', async () => {
			try {
				console.log('üîç Testing FFmpeg availability...');
				vscode.window.showInformationMessage('üîç Testing FFmpeg...');
				
				const ffmpegCheck = await FFmpegAudioRecorder.checkFFmpegAvailability();
				console.log('üîç FFmpeg check result:', ffmpegCheck);
				
				if (ffmpegCheck.available) {
					vscode.window.showInformationMessage(`‚úÖ FFmpeg is available! Version: ${ffmpegCheck.version}`);
				} else {
					vscode.window.showErrorMessage(`‚ùå FFmpeg not available: ${ffmpegCheck.error}`);
				}
				
				// –ü—Ä–æ–±—É–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
				const diagnostics = await FFmpegAudioRecorder.runDiagnostics();
				console.log('üîç FFmpeg diagnostics:', diagnostics);
				
				const deviceCount = diagnostics.inputDevices.length;
				const errorCount = diagnostics.errors.length;
				const warningCount = diagnostics.warnings.length;
				
				vscode.window.showInformationMessage(`FFmpeg Diagnostics: ${deviceCount} devices, ${errorCount} errors, ${warningCount} warnings`);
				
			} catch (error) {
				const errorMsg = `FFmpeg test failed: ${(error as Error).message}`;
				console.error('‚ùå FFmpeg test error:', errorMsg);
				vscode.window.showErrorMessage(errorMsg);
			}
		}),
		// –ö–æ–º–∞–Ω–¥–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ audioRecorder
		vscode.commands.registerCommand('speechToTextWhisper.testAudioRecorder', async () => {
			try {
				console.log('üîç Testing audioRecorder initialization...');
				vscode.window.showInformationMessage('üîç Testing Audio Recorder...');
				
				// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π audioRecorder
				audioRecorder = null;
				
				// –ü—Ä–æ–±—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å
				await ensureFFmpegAudioRecorder();
				
				if (audioRecorder) {
					vscode.window.showInformationMessage('‚úÖ Audio Recorder initialized successfully!');
					console.log('‚úÖ Audio Recorder test passed');
				} else {
					vscode.window.showErrorMessage('‚ùå Audio Recorder is still null after initialization');
					console.error('‚ùå Audio Recorder test failed - still null');
				}
				
			} catch (error) {
				const errorMsg = `Audio Recorder test failed: ${(error as Error).message}`;
				console.error('‚ùå Audio Recorder test error:', errorMsg);
				vscode.window.showErrorMessage(errorMsg);
			}
		}),
		// –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏
		vscode.commands.registerCommand('speechToTextWhisper.audioSettings.selectDevice', (deviceId: string) => deviceManagerProvider.selectDevice(deviceId)),
		// –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
		vscode.commands.registerCommand('speechToTextWhisper.openSettings', () => settingsProvider.openSettings()),
		// –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞
		vscode.commands.registerCommand('speechToTextWhisper.toggleMode', () => modeSelectorProvider.toggleMode())
	];

	console.log(`üìù Created ${commands.length} command registrations`);

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º DiagnosticsProvider –∫–∞–∫ TreeDataProvider
	vscode.window.registerTreeDataProvider('speechToTextWhisper.diagnostics', diagnosticsProvider);

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º DeviceManagerProvider –∫–∞–∫ TreeDataProvider
	vscode.window.registerTreeDataProvider('speechToTextWhisper.deviceManager', deviceManagerProvider);

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º SettingsProvider –∫–∞–∫ TreeDataProvider
	vscode.window.registerTreeDataProvider('speechToTextWhisper.settings', settingsProvider);

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º ModeSelectorProvider –∫–∞–∫ TreeDataProvider
	vscode.window.registerTreeDataProvider('speechToTextWhisper.modeSelector', modeSelectorProvider);

	// –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –≤ –ø–æ–¥–ø–∏—Å–∫–∏
	context.subscriptions.push(...commands, statusBarManager);
	
	console.log(`‚úÖ Registered ${commands.length} commands and added to subscriptions`);
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
 */
async function handleTranscription(audioBlob: Blob): Promise<void> {
	console.log('üéØ [TRANSCRIPTION] handleTranscription called');
	console.log('üéØ [TRANSCRIPTION] Audio blob size:', audioBlob.size);
	console.log('üéØ [TRANSCRIPTION] Audio blob type:', audioBlob.type);
	console.log('üéØ [TRANSCRIPTION] Current recording state:', RecordingStateManager.isRecording());
	console.log('üéØ [TRANSCRIPTION] Current mode:', RecordingStateManager.getCurrentMode());
	
	const context: ErrorContext = {
		operation: 'transcription',
		isHoldToRecordMode: false,
		timestamp: new Date(),
		additionalData: { audioBlobSize: audioBlob.size }
	};

	try {
		console.log('üéØ [TRANSCRIPTION] Step 1: Getting recording state...');
		const recordingState = RecordingStateManager.getState();
		console.log('üéØ [TRANSCRIPTION] Recording state:', JSON.stringify(recordingState, null, 2));
		
		if (!recordingState.mode) {
			console.log('‚ùå [TRANSCRIPTION] No recording mode set, aborting');
			return;
		}

		console.log('üéØ [TRANSCRIPTION] Step 2: Checking WhisperClient...');
		if (!whisperClient) {
			console.error('‚ùå [TRANSCRIPTION] WhisperClient not initialized');
			throw new Error('WhisperClient not initialized');
		}
		console.log('üéØ [TRANSCRIPTION] WhisperClient is available');

		// –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ VS Code —á–µ—Ä–µ–∑ ConfigurationManager
		console.log('üéØ [TRANSCRIPTION] Step 2.5: Getting configuration settings...');
		const whisperConfig = configurationManager.getWhisperConfiguration();
		
		console.log('üéØ [TRANSCRIPTION] Configuration settings:', {
			language: whisperConfig.language,
			prompt: whisperConfig.prompt ? `"${whisperConfig.prompt.substring(0, 50)}..."` : '(empty)',
			temperature: whisperConfig.temperature,
			whisperModel: whisperConfig.whisperModel
		});

		console.log('üéØ [TRANSCRIPTION] Step 3: Starting transcription...');
		console.time('whisper.transcription');
		const transcriptionResult = await whisperClient.transcribe(audioBlob, {
			language: whisperConfig.language === 'auto' ? undefined : whisperConfig.language,
			prompt: whisperConfig.prompt || undefined,
			temperature: whisperConfig.temperature,
			model: whisperConfig.whisperModel,
			response_format: 'json'
		});
		console.timeEnd('whisper.transcription');
		console.log('üéØ [TRANSCRIPTION] Step 3: Transcription completed');
		console.log('üéØ [TRANSCRIPTION] Transcription result length:', transcriptionResult.length);
		console.log('üéØ [TRANSCRIPTION] Transcription preview:', transcriptionResult.substring(0, 100) + (transcriptionResult.length > 100 ? '...' : ''));

		if (transcriptionResult && transcriptionResult.trim().length > 0) {
			console.log('üéØ [TRANSCRIPTION] Step 4: Processing non-empty transcription...');
			lastTranscribedText = transcriptionResult.trim();
			console.log('üéØ [TRANSCRIPTION] lastTranscribedText set, length:', lastTranscribedText.length);
			
			// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é
			lastTranscribedText = transcriptionResult.trim();
			
			// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å—Ç–∞–≤–∫–∏
			statusBarManager.showInserting();
			
			// –ò—Å–ø–æ–ª—å–∑—É–µ–º currentRecordingMode –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è
			console.log(`üîç Current recording mode: ${recordingState.mode}`);
			
			if (recordingState.mode === RecordingMode.INSERT_OR_CLIPBOARD) {
				console.log('üìù Processing insertOrClipboard mode...');
				
				try {
					// –ß–∏—Ç–∞–µ–º —Ä–µ–∂–∏–º –≤—Å—Ç–∞–≤–∫–∏ –∏–∑ ModeSelectorProvider
					const insertMode = modeSelectorProvider.getCurrentMode();
					
					if (insertMode === 'insert') {
						// –†–µ–∂–∏–º –≤—Å—Ç–∞–≤–∫–∏ –≤ –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞
						console.log('üìù Inserting into active editor at cursor position');
						await insertTranscribedTextWithErrorHandling(lastTranscribedText, 'cursor', context);
						
						// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—Ö
						const truncatedText = lastTranscribedText.substring(0, 50) + (lastTranscribedText.length > 50 ? '...' : '');
						statusBarManager.showSuccess(`Inserted: "${truncatedText}"`);
						vscode.window.showInformationMessage(`‚úÖ Transcribed and inserted at cursor: "${truncatedText}"`);
						
					} else if (insertMode === 'clipboard') {
						// –†–µ–∂–∏–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
						console.log('üìã Copying to clipboard');
						await vscode.env.clipboard.writeText(lastTranscribedText);
						
						// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—Ö
						const truncatedText = lastTranscribedText.substring(0, 50) + (lastTranscribedText.length > 50 ? '...' : '');
						statusBarManager.showSuccess(`Copied: "${truncatedText}"`);
						vscode.window.showInformationMessage(`‚úÖ Transcribed and copied to clipboard: "${truncatedText}"`);
					}
					
					// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∂–∏–º
					RecordingStateManager.resetState();
					return;
					
				} catch (error) {
					console.error('‚ùå Failed to process insertOrClipboard:', error);
					vscode.window.showErrorMessage(`Failed to process text: ${(error as Error).message}`);
					RecordingStateManager.resetState();
					return;
				}
			} else if (recordingState.mode === RecordingMode.CURRENT_CHAT) {
				console.log('üéØ [CHAT] Starting CURRENT_CHAT mode processing');
				console.log('üéØ [CHAT] Transcribed text length:', lastTranscribedText.length);
				console.log('üéØ [CHAT] Transcribed text preview:', lastTranscribedText.substring(0, 100) + (lastTranscribedText.length > 100 ? '...' : ''));
				
				try {
					// –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
					console.log('üéØ [CHAT] Step 1: Executing aichat.insertselectionintochat...');
					console.time('aichat.insertselectionintochat');
					await vscode.commands.executeCommand('aichat.insertselectionintochat');
					console.timeEnd('aichat.insertselectionintochat');
					console.log('üéØ [CHAT] Step 1: aichat.insertselectionintochat completed successfully');
					
					// –ó–∞–¥–µ—Ä–∂–∫–∞ 200ms
					console.log('üéØ [CHAT] Step 2: Waiting 200ms...');
					await new Promise(resolve => setTimeout(resolve, 200));
					console.log('üéØ [CHAT] Step 2: Wait completed');
					
					console.log('üéØ [CHAT] Step 3: Executing chat.action.focus...');
					console.time('chat.action.focus');
					await vscode.commands.executeCommand('chat.action.focus');
					console.timeEnd('chat.action.focus');
					console.log('üéØ [CHAT] Step 3: chat.action.focus completed successfully');
					
					// –ó–∞–¥–µ—Ä–∂–∫–∞ 200ms
					console.log('üéØ [CHAT] Step 4: Waiting 200ms...');
					await new Promise(resolve => setTimeout(resolve, 200));
					console.log('üéØ [CHAT] Step 4: Wait completed');
					
					// –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ —á–∞—Ç
					console.log('üéØ [CHAT] Step 5: Copying text to clipboard...');
					console.time('clipboard.writeText');
					await vscode.env.clipboard.writeText(lastTranscribedText);
					console.timeEnd('clipboard.writeText');
					console.log('üéØ [CHAT] Step 5: Text copied to clipboard successfully');
					
					console.log('üéØ [CHAT] Step 6: Executing paste action...');
					console.time('editor.action.clipboardPasteAction');
					await vscode.commands.executeCommand('editor.action.clipboardPasteAction');
					console.timeEnd('editor.action.clipboardPasteAction');
					console.log('üéØ [CHAT] Step 6: Paste action completed successfully');
					
					// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—Ö
					const truncatedText = lastTranscribedText.substring(0, 50) + (lastTranscribedText.length > 50 ? '...' : '');
					console.log('üéØ [CHAT] Step 7: Showing success messages...');
					statusBarManager.showSuccess(`Sent to chat: "${truncatedText}"`);
					vscode.window.showInformationMessage(`‚úÖ Transcribed and sent to chat: "${truncatedText}"`);
					console.log('üéØ [CHAT] Step 7: Success messages shown');
					
					// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∂–∏–º
					console.log('üéØ [CHAT] Step 8: Resetting recording state...');
					RecordingStateManager.resetState();
					console.log('üéØ [CHAT] Step 8: Recording state reset');
					console.log('üéØ [CHAT] CURRENT_CHAT mode processing completed successfully');
					return;
					
				} catch (error) {
					console.error('‚ùå [CHAT] Failed to send to chat:', error);
					console.error('‚ùå [CHAT] Error details:', {
						name: (error as Error).name,
						message: (error as Error).message,
						stack: (error as Error).stack
					});
					vscode.window.showErrorMessage(`Failed to send to chat: ${(error as Error).message}`);
					RecordingStateManager.resetState();
					return;
				}
			} else if (recordingState.mode === RecordingMode.NEW_CHAT) {
				console.log('üéØ [CHAT] Starting NEW_CHAT mode processing');
				console.log('üéØ [CHAT] Transcribed text length:', lastTranscribedText.length);
				console.log('üéØ [CHAT] Transcribed text preview:', lastTranscribedText.substring(0, 100) + (lastTranscribedText.length > 100 ? '...' : ''));
				
				try {
					// –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
					console.log('üéØ [CHAT] Step 1: Executing aichat.newfollowupaction...');
					console.time('aichat.newfollowupaction');
					await vscode.commands.executeCommand('aichat.newfollowupaction');
					console.timeEnd('aichat.newfollowupaction');
					console.log('üéØ [CHAT] Step 1: aichat.newfollowupaction completed successfully');
					
					// –ó–∞–¥–µ—Ä–∂–∫–∞ 300ms
					console.log('üéØ [CHAT] Step 2: Waiting 300ms...');
					await new Promise(resolve => setTimeout(resolve, 300));
					console.log('üéØ [CHAT] Step 2: Wait completed');
					
					// –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –Ω–æ–≤—ã–π —á–∞—Ç
					console.log('üéØ [CHAT] Step 3: Copying text to clipboard...');
					console.time('clipboard.writeText');
					await vscode.env.clipboard.writeText(lastTranscribedText);
					console.timeEnd('clipboard.writeText');
					console.log('üéØ [CHAT] Step 3: Text copied to clipboard successfully');
					
					console.log('üéØ [CHAT] Step 4: Executing paste action...');
					console.time('editor.action.clipboardPasteAction');
					await vscode.commands.executeCommand('editor.action.clipboardPasteAction');
					console.timeEnd('editor.action.clipboardPasteAction');
					console.log('üéØ [CHAT] Step 4: Paste action completed successfully');
					
					// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—Ö
					const truncatedText = lastTranscribedText.substring(0, 50) + (lastTranscribedText.length > 50 ? '...' : '');
					console.log('üéØ [CHAT] Step 5: Showing success messages...');
					statusBarManager.showSuccess(`Opened new chat: "${truncatedText}"`);
					vscode.window.showInformationMessage(`‚úÖ Transcribed and opened new chat: "${truncatedText}"`);
					console.log('üéØ [CHAT] Step 5: Success messages shown');
					
					// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∂–∏–º
					console.log('üéØ [CHAT] Step 6: Resetting recording state...');
					RecordingStateManager.resetState();
					console.log('üéØ [CHAT] Step 6: Recording state reset');
					console.log('üéØ [CHAT] NEW_CHAT mode processing completed successfully');
					return;
					
				} catch (error) {
					console.error('‚ùå [CHAT] Failed to open new chat:', error);
					console.error('‚ùå [CHAT] Error details:', {
						name: (error as Error).name,
						message: (error as Error).message,
						stack: (error as Error).stack
					});
					vscode.window.showErrorMessage(`Failed to open new chat: ${(error as Error).message}`);
					RecordingStateManager.resetState();
					return;
				}
			}
			
		} else {
			// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Å—Ç–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
			await errorHandler.handleError(ErrorType.TRANSCRIPTION_EMPTY, context);
		}
		
	} catch (error) {
		console.error('‚ùå Transcription failed:', error);
		await errorHandler.handleErrorFromException(error as Error, context);
	}
}

/**
 * –í—Å—Ç–∞–≤–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
 */
async function insertTranscribedTextWithErrorHandling(text: string, mode: string, parentContext: ErrorContext): Promise<void> {
	const context: ErrorContext = {
		operation: 'text_insertion',
		isHoldToRecordMode: parentContext.isHoldToRecordMode,
		timestamp: new Date(),
		additionalData: { 
			insertMode: mode, 
			textLength: text.length,
			parentOperation: parentContext.operation
		}
	};

	try {
		console.log(`üìù Inserting text with mode: ${mode}`);
		
		// –ò—Å–ø–æ–ª—å–∑—É–µ–º retry –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞
		const insertResult = await retryManager.retry(
			() => textInserter.insertText(text, { mode: mode as 'cursor' | 'comment' | 'replace' | 'newLine' | 'clipboard' }),
			'text_insertion'
		);

		if (!insertResult.success) {
			const error = insertResult.lastError || new Error('Text insertion failed after retries');
			await errorHandler.handleErrorFromException(error, context);
		}
		
	} catch (error) {
		console.error('‚ùå Text insertion failed:', error);
		await errorHandler.handleErrorFromException(error as Error, context);
	}
}

/**
 * –í—Å—Ç–∞–≤–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
 */
async function insertLastTranscription(mode: string): Promise<void> {
	if (!lastTranscribedText) {
		vscode.window.showWarningMessage('No transcribed text available');
		return;
	}

	const context: ErrorContext = {
		operation: 'insert_last_transcription',
		isHoldToRecordMode: false,
		timestamp: new Date(),
		additionalData: { insertMode: mode }
	};

	try {
		console.log(`üìù Inserting last transcription with mode: ${mode}`);
		
		if (mode === 'currentChat') {
			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Cursor —á–∞—Ç
			if (!cursorIntegration || !cursorIntegration.isIntegrationEnabled()) {
				throw new Error('Cursor integration not available');
			}
			
			await cursorIntegration.sendToChat(lastTranscribedText);
			console.log('‚úÖ Text sent to Cursor chat');
			
		} else if (mode === 'newChat') {
			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –Ω–æ–≤—ã–π —á–∞—Ç —á–µ—Ä–µ–∑ CursorIntegration
			await cursorIntegration.sendToChat(lastTranscribedText);
			console.log('‚úÖ Text sent to new chat');
			
		} else {
			// –í—Å—Ç–∞–≤–ª—è–µ–º –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä
			await insertTranscribedTextWithErrorHandling(lastTranscribedText, mode, context);
		}
		
	} catch (error) {
		console.error(`‚ùå Failed to insert last transcription (mode: ${mode}):`, error);
		await errorHandler.handleErrorFromException(error as Error, context);
	}
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WhisperClient
 */
function initializeWhisperClient(): void {
	console.log('üîß Initializing WhisperClient...');
	
	const whisperConfig = configurationManager.getWhisperConfiguration();
	
	if (!whisperConfig.apiKey) {
		console.warn('‚ö†Ô∏è OpenAI API key not configured');
		vscode.window.showWarningMessage(
			'OpenAI API key not configured. Please set it in settings.',
			'Open Settings'
		).then(selection => {
			if (selection === 'Open Settings') {
				vscode.commands.executeCommand('workbench.action.openSettings', 'speechToTextWhisper.apiKey');
			}
		});
		return;
	}
	
	try {
		whisperClient = new WhisperClient({
			apiKey: whisperConfig.apiKey,
			timeout: whisperConfig.timeout
		});
		
		console.log('‚úÖ WhisperClient initialized');
		
	} catch (error) {
		console.error('‚ùå Failed to initialize WhisperClient:', error);
		vscode.window.showErrorMessage(`Failed to initialize Whisper client: ${(error as Error).message}`);
	}
}

function showWelcomeMessage(): void {
	// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º StatusBar
	statusBarManager.show();
	
	const uiConfig = configurationManager.getUIConfiguration();
	
	if (!uiConfig.showStatusBar) {
		statusBarManager.hide();
	}
	
	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é —Å–ø—Ä–∞–≤–∫—É –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
	if (extensionContext && extensionContext.globalState) {
		const hasShownWelcome = extensionContext.globalState.get<boolean>('hasShownWelcome', false);
		if (!hasShownWelcome) {
			vscode.window.showInformationMessage(
				'üé§ Speech to Text with Whisper activated! Use F9 to record and send to chat, Ctrl+Shift+M to record to clipboard.',
				'Got it!'
			).then(() => {
				if (extensionContext && extensionContext.globalState) {
					extensionContext.globalState.update('hasShownWelcome', true);
				}
			});
		}
	}
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
 */
export function deactivate() {
	ExtensionLog.info('Extension deactivating...');
	
	// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–∞
	if (audioRecorder && audioRecorder.getIsRecording()) {
		audioRecorder.stopRecording();
	}

	// –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
	if (statusBarManager) {
		statusBarManager.dispose();
	}
	
	if (configurationManager) {
		configurationManager.dispose();
	}
	
	if (cursorIntegration) {
		cursorIntegration.dispose();
	}
	
	// –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
	disposeGlobalOutput();
	
	ExtensionLog.info('Extension deactivated');
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Cursor
 */
function initializeCursorIntegration(): void {
	console.log('üîß Initializing Cursor integration...');
	
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	const primaryStrategy = CursorIntegrationStrategy.AICHAT_COMMAND;
	
	console.log(`üéØ Using Cursor integration strategy: ${primaryStrategy}`);
	
	// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä CursorIntegration
	cursorIntegration = new CursorIntegration({
		primaryStrategy: primaryStrategy,
		fallbackStrategies: [
			CursorIntegrationStrategy.CLIPBOARD,
			CursorIntegrationStrategy.COMMAND_PALETTE
		],
		autoFocusChat: true,
		prefixText: '',
		suffixText: '',
		useMarkdownFormat: true,
		timeout: 5000
	}, {
		onChatSent: (text: string, strategy: CursorIntegrationStrategy) => {
			console.log(`‚úÖ Text sent to chat via ${strategy}: "${text.substring(0, 50)}..."`);
		},
		onFallbackUsed: (primary: CursorIntegrationStrategy, fallback: CursorIntegrationStrategy) => {
			console.log(`üîÑ Fallback used: ${primary} -> ${fallback}`);
			vscode.window.showWarningMessage(`Cursor chat: fell back to ${fallback} strategy`);
		},
		onError: (error: Error, strategy: CursorIntegrationStrategy) => {
			console.error(`‚ùå CursorIntegration error with ${strategy}:`, error);
		}
	});
	
	console.log(`‚úÖ CursorIntegration initialized, enabled: ${cursorIntegration.isIntegrationEnabled()}`);
}

/**
 * –ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø–∏—Å–∏ —Å –≤—Å—Ç–∞–≤–∫–æ–π –≤ –∫—É—Ä—Å–æ—Ä –∏–ª–∏ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ (Ctrl+Shift+M)
 */
async function recordAndInsertOrClipboard(): Promise<void> {
	console.log('üé§ recordAndInsertOrClipboard called! UNIQUE COMMAND MESSAGE 67890');
	console.log('üé§ recordAndInsertOrClipboard called! MODIFIED MESSAGE 99999');
	
	const context: ErrorContext = {
		operation: 'record_and_insert_or_clipboard',
		isHoldToRecordMode: false,
		timestamp: new Date()
	};

	try {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–¥–µ—Ç –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å
		if (RecordingStateManager.isRecording()) {
			// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å
			console.log('‚èπÔ∏è Stopping recording (recordAndInsertOrClipboard)');
			stopRecording();
			return;
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ó–î–ï–°–¨
		const now = Date.now();
		if (now - lastRecordingStartTime < MIN_RECORDING_INTERVAL) {
			console.log('‚ö†Ô∏è Too frequent recording attempts in command, skipping');
			vscode.window.showWarningMessage('Too frequent recording attempts. Please wait a moment.');
			return;
		}

		console.log('üé§ Starting record and insert or clipboard...');
		
		// –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å —Å —Ä–µ–∂–∏–º–æ–º INSERT_OR_CLIPBOARD
		if (RecordingStateManager.startRecording(RecordingMode.INSERT_OR_CLIPBOARD)) {
			// –û–±–Ω–æ–≤–ª—è–µ–º StatusBar —Å—Ä–∞–∑—É –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–ø–∏—Å–∏
			if (statusBarManager) {
				statusBarManager.updateRecordingState(true);
			}
			
			// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–ø–∏—Å–∏
			lastRecordingStartTime = now;
			
			await startRecording();
			vscode.window.showInformationMessage('üé§ Recording... Press Ctrl+Shift+M again to stop');
		} else {
			vscode.window.showWarningMessage('Recording already in progress or too frequent attempts');
		}
		
	} catch (error) {
		console.error('‚ùå Record and insert or clipboard failed:', error);
		RecordingStateManager.resetState();
		// –°–±—Ä–∞—Å—ã–≤–∞–µ–º StatusBar –ø—Ä–∏ –æ—à–∏–±–∫–µ
		if (statusBarManager) {
			statusBarManager.updateRecordingState(false);
		}
		await errorHandler.handleErrorFromException(error as Error, context);
	}
}

/**
 * –ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø–∏—Å–∏ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ —Ç–µ–∫—É—â–∏–π —á–∞—Ç Cursor (Ctrl+Shift+N)
 */
async function recordAndInsertToCurrentChat(): Promise<void> {
	console.log('üé§ [COMMAND] recordAndInsertToCurrentChat called!');
	console.log('üé§ [COMMAND] Current recording state:', RecordingStateManager.isRecording());
	console.log('üé§ [COMMAND] Current mode:', RecordingStateManager.getCurrentMode());
	
	const context: ErrorContext = {
		operation: 'record_and_insert_to_current_chat',
		isHoldToRecordMode: false,
		timestamp: new Date()
	};

	try {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–¥–µ—Ç –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å
		if (RecordingStateManager.isRecording()) {
			// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å
			console.log('‚èπÔ∏è [COMMAND] Stopping recording (recordAndInsertToCurrentChat)');
			stopRecording();
			return;
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ó–î–ï–°–¨
		const now = Date.now();
		console.log('üé§ [COMMAND] Checking recording interval, now:', now, 'last:', lastRecordingStartTime);
		if (now - lastRecordingStartTime < MIN_RECORDING_INTERVAL) {
			console.log('‚ö†Ô∏è [COMMAND] Too frequent recording attempts in command, skipping');
			vscode.window.showWarningMessage('Too frequent recording attempts. Please wait a moment.');
			return;
		}

		console.log('üé§ [COMMAND] Starting record and insert to current chat...');
		
		// –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å —Å —Ä–µ–∂–∏–º–æ–º CURRENT_CHAT
		console.log('üé§ [COMMAND] Attempting to start recording with CURRENT_CHAT mode');
		if (RecordingStateManager.startRecording(RecordingMode.CURRENT_CHAT)) {
			console.log('üé§ [COMMAND] Recording state started successfully');
			
			// –û–±–Ω–æ–≤–ª—è–µ–º StatusBar —Å—Ä–∞–∑—É –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–ø–∏—Å–∏
			if (statusBarManager) {
				console.log('üé§ [COMMAND] Updating status bar to recording state');
				statusBarManager.updateRecordingState(true);
			}
			
			// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–ø–∏—Å–∏
			lastRecordingStartTime = now;
			console.log('üé§ [COMMAND] Set lastRecordingStartTime to:', lastRecordingStartTime);
			
			console.log('üé§ [COMMAND] Calling startRecording()...');
			await startRecording();
			console.log('üé§ [COMMAND] startRecording() completed');
			vscode.window.showInformationMessage('üé§ Recording... Press Ctrl+Shift+N again to stop and send to chat');
		} else {
			console.log('‚ùå [COMMAND] Failed to start recording state');
			vscode.window.showWarningMessage('Recording already in progress or too frequent attempts');
		}
		
	} catch (error) {
		console.error('‚ùå [COMMAND] recordAndInsertToCurrentChat failed:', error);
		console.error('‚ùå [COMMAND] Error details:', {
			name: (error as Error).name,
			message: (error as Error).message,
			stack: (error as Error).stack
		});
		await errorHandler.handleErrorFromException(error as Error, context);
	}
}

/**
 * –ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø–∏—Å–∏ —Å –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞ (F9)
 */
async function recordAndOpenNewChat(): Promise<void> {
	// –°–ê–ú–û–ï –†–ê–ù–ù–ï–ï –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
	console.log('üî• === F9 COMMAND CALLED! ===');
	console.log('üî• Time:', new Date().toISOString());
	console.log('üî• console.log working:', true);
	
	// –¢–∞–∫–∂–µ –ø–æ–ø—Ä–æ–±—É–µ–º window.showInformationMessage
	vscode.window.showInformationMessage('üî• F9 COMMAND EXECUTED!');
	
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π output channel
	outputChannel.appendLine('üî• === F9 COMMAND CALLED! ===');
	outputChannel.appendLine('üî• Time: ' + new Date().toISOString());
	outputChannel.show();
	
	try {
		console.log('üé§ [COMMAND] recordAndOpenNewChat called!');
		outputChannel.appendLine('üé§ [COMMAND] recordAndOpenNewChat called!');
		
		console.log('üé§ [COMMAND] Step 1: Getting current recording state...');
		outputChannel.appendLine('üé§ [COMMAND] Step 1: Getting current recording state...');
		
		const isCurrentlyRecording = RecordingStateManager.isRecording();
		const currentMode = RecordingStateManager.getCurrentMode();
		
		console.log('üé§ [COMMAND] Current recording state:', isCurrentlyRecording);
		console.log('üé§ [COMMAND] Current mode:', currentMode);
		outputChannel.appendLine('üé§ [COMMAND] Current recording state: ' + isCurrentlyRecording);
		outputChannel.appendLine('üé§ [COMMAND] Current mode: ' + currentMode);
		
	} catch (error) {
		console.error('‚ùå [COMMAND] Error in step 1:', error);
		outputChannel.appendLine('‚ùå [COMMAND] Error in step 1: ' + error);
		return;
	}
	
	const context: ErrorContext = {
		operation: 'record_and_open_new_chat',
		isHoldToRecordMode: false,
		timestamp: new Date()
	};

	try {
		console.log('üé§ [COMMAND] Step 2: Creating error context...');
		outputChannel.appendLine('üé§ [COMMAND] Step 2: Creating error context...');
		
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–¥–µ—Ç –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å
		console.log('üé§ [COMMAND] Step 3: Checking if recording is in progress...');
		outputChannel.appendLine('üé§ [COMMAND] Step 3: Checking if recording is in progress...');
		
		if (RecordingStateManager.isRecording()) {
			// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å
			console.log('‚èπÔ∏è [COMMAND] Stopping recording (recordAndOpenNewChat)');
			outputChannel.appendLine('‚èπÔ∏è [COMMAND] Stopping recording (recordAndOpenNewChat)');
			stopRecording();
			return;
		}

		console.log('üé§ [COMMAND] Step 4: Getting current time...');
		outputChannel.appendLine('üé§ [COMMAND] Step 4: Getting current time...');
		
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ó–î–ï–°–¨
		const now = Date.now();
		console.log('üé§ [COMMAND] Checking recording interval, now:', now, 'last:', lastRecordingStartTime);
		outputChannel.appendLine('üé§ [COMMAND] Checking recording interval, now: ' + now + ' last: ' + lastRecordingStartTime);
		
		if (now - lastRecordingStartTime < MIN_RECORDING_INTERVAL) {
			console.log('‚ö†Ô∏è [COMMAND] Too frequent recording attempts in command, skipping');
			outputChannel.appendLine('‚ö†Ô∏è [COMMAND] Too frequent recording attempts in command, skipping');
			vscode.window.showWarningMessage('Too frequent recording attempts. Please wait a moment.');
			return;
		}

		console.log('üé§ [COMMAND] Step 5: Starting record and open new chat...');
		outputChannel.appendLine('üé§ [COMMAND] Step 5: Starting record and open new chat...');
		
		// –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å —Å —Ä–µ–∂–∏–º–æ–º NEW_CHAT
		console.log('üé§ [COMMAND] Step 6: Attempting to start recording with NEW_CHAT mode');
		outputChannel.appendLine('üé§ [COMMAND] Step 6: Attempting to start recording with NEW_CHAT mode');
		
		const startRecordingResult = RecordingStateManager.startRecording(RecordingMode.NEW_CHAT);
		console.log('üé§ [COMMAND] RecordingStateManager.startRecording result:', startRecordingResult);
		outputChannel.appendLine('üé§ [COMMAND] RecordingStateManager.startRecording result: ' + startRecordingResult);
		
		if (startRecordingResult) {
			console.log('üé§ [COMMAND] Step 7: Recording state started successfully');
			outputChannel.appendLine('üé§ [COMMAND] Step 7: Recording state started successfully');
			
			// –û–±–Ω–æ–≤–ª—è–µ–º StatusBar —Å—Ä–∞–∑—É –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–ø–∏—Å–∏
			console.log('üé§ [COMMAND] Step 8: Checking statusBarManager...');
			outputChannel.appendLine('üé§ [COMMAND] Step 8: Checking statusBarManager...');
			
			if (statusBarManager) {
				console.log('üé§ [COMMAND] Step 9: Updating status bar to recording state');
				outputChannel.appendLine('üé§ [COMMAND] Step 9: Updating status bar to recording state');
				statusBarManager.updateRecordingState(true);
				console.log('üé§ [COMMAND] Step 9: Status bar updated successfully');
				outputChannel.appendLine('üé§ [COMMAND] Step 9: Status bar updated successfully');
			} else {
				console.log('üé§ [COMMAND] Step 9: statusBarManager is null');
				outputChannel.appendLine('üé§ [COMMAND] Step 9: statusBarManager is null');
			}
			
			// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–ø–∏—Å–∏
			console.log('üé§ [COMMAND] Step 10: Setting lastRecordingStartTime...');
			outputChannel.appendLine('üé§ [COMMAND] Step 10: Setting lastRecordingStartTime...');
			lastRecordingStartTime = now;
			console.log('üé§ [COMMAND] Set lastRecordingStartTime to:', lastRecordingStartTime);
			outputChannel.appendLine('üé§ [COMMAND] Set lastRecordingStartTime to: ' + lastRecordingStartTime);
			
			console.log('üé§ [COMMAND] Step 11: About to call startRecording()...');
			outputChannel.appendLine('üé§ [COMMAND] Step 11: About to call startRecording()...');
			
			try {
				console.time('startRecording');
				await startRecording();
				console.timeEnd('startRecording');
				console.log('üé§ [COMMAND] Step 12: startRecording() completed successfully');
				outputChannel.appendLine('üé§ [COMMAND] Step 12: startRecording() completed successfully');
			} catch (startRecordingError) {
				console.error('‚ùå [COMMAND] Error in startRecording():', startRecordingError);
				outputChannel.appendLine('‚ùå [COMMAND] Error in startRecording(): ' + startRecordingError);
				throw startRecordingError;
			}
			
			console.log('üé§ [COMMAND] Step 13: Showing information message...');
			outputChannel.appendLine('üé§ [COMMAND] Step 13: Showing information message...');
			vscode.window.showInformationMessage('üé§ Recording... Press F9 again to stop and open new chat');
			console.log('üé§ [COMMAND] Step 14: Function completed successfully');
			outputChannel.appendLine('üé§ [COMMAND] Step 14: Function completed successfully');
			
		} else {
			console.log('‚ùå [COMMAND] Failed to start recording state');
			outputChannel.appendLine('‚ùå [COMMAND] Failed to start recording state');
			vscode.window.showWarningMessage('Recording already in progress or too frequent attempts');
		}
		
	} catch (error) {
		console.error('‚ùå [COMMAND] recordAndOpenNewChat failed:', error);
		outputChannel.appendLine('‚ùå [COMMAND] recordAndOpenNewChat failed: ' + error);
		console.error('‚ùå [COMMAND] Error details:', {
			name: (error as Error).name,
			message: (error as Error).message,
			stack: (error as Error).stack
		});
		outputChannel.appendLine('‚ùå [COMMAND] Error name: ' + (error as Error).name);
		outputChannel.appendLine('‚ùå [COMMAND] Error message: ' + (error as Error).message);
		
		// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
		console.log('üîÑ [COMMAND] Resetting recording state due to error...');
		outputChannel.appendLine('üîÑ [COMMAND] Resetting recording state due to error...');
		RecordingStateManager.resetState();
		
		// –°–±—Ä–∞—Å—ã–≤–∞–µ–º StatusBar –ø—Ä–∏ –æ—à–∏–±–∫–µ
		if (statusBarManager) {
			statusBarManager.updateRecordingState(false);
		}
		
		try {
			await errorHandler.handleErrorFromException(error as Error, context);
		} catch (handlerError) {
			console.error('‚ùå [COMMAND] Error in error handler:', handlerError);
			outputChannel.appendLine('‚ùå [COMMAND] Error in error handler: ' + handlerError);
		}
	}
}

/**
 * –ö–æ–º–∞–Ω–¥—ã –∑–∞–ø–∏—Å–∏
 */
async function startRecording(): Promise<void> {
	console.log('‚ñ∂Ô∏è [RECORDING] startRecording() called');
	outputChannel.appendLine('‚ñ∂Ô∏è [RECORDING] startRecording() called');
	
	console.log('‚ñ∂Ô∏è [RECORDING] Current recording state:', RecordingStateManager.isRecording());
	console.log('‚ñ∂Ô∏è [RECORDING] Current mode:', RecordingStateManager.getCurrentMode());
	console.log('‚ñ∂Ô∏è [RECORDING] audioRecorder initialized:', !!audioRecorder);
	outputChannel.appendLine('‚ñ∂Ô∏è [RECORDING] Current recording state: ' + RecordingStateManager.isRecording());
	outputChannel.appendLine('‚ñ∂Ô∏è [RECORDING] Current mode: ' + RecordingStateManager.getCurrentMode());
	outputChannel.appendLine('‚ñ∂Ô∏è [RECORDING] audioRecorder initialized: ' + !!audioRecorder);
	
	const context: ErrorContext = {
		operation: 'start_recording',
		isHoldToRecordMode: false,
		timestamp: new Date()
	};

	try {
		console.log('‚ñ∂Ô∏è [RECORDING] Starting recording process...');
		outputChannel.appendLine('‚ñ∂Ô∏è [RECORDING] Starting recording process...');
		
		// –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é FFmpeg Audio Recorder
		console.log('üîß [RECORDING] Step 1: Ensuring FFmpeg Audio Recorder initialization...');
		outputChannel.appendLine('üîß [RECORDING] Step 1: Ensuring FFmpeg Audio Recorder initialization...');
		
		console.time('ensureFFmpegAudioRecorder');
		
		try {
			await ensureFFmpegAudioRecorder();
			console.timeEnd('ensureFFmpegAudioRecorder');
			console.log('üîß [RECORDING] Step 1: ensureFFmpegAudioRecorder completed successfully');
			outputChannel.appendLine('üîß [RECORDING] Step 1: ensureFFmpegAudioRecorder completed successfully');
		} catch (ensureError) {
			console.timeEnd('ensureFFmpegAudioRecorder');
			console.error('‚ùå [RECORDING] Error in ensureFFmpegAudioRecorder:', ensureError);
			outputChannel.appendLine('‚ùå [RECORDING] Error in ensureFFmpegAudioRecorder: ' + ensureError);
			throw ensureError;
		}
		
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ audioRecorder –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
		console.log('üîß [RECORDING] Step 1.5: Checking audioRecorder after ensure...');
		outputChannel.appendLine('üîß [RECORDING] Step 1.5: Checking audioRecorder after ensure...');
		
		if (!audioRecorder) {
			console.error('‚ùå [RECORDING] audioRecorder is null after ensureFFmpegAudioRecorder');
			outputChannel.appendLine('‚ùå [RECORDING] audioRecorder is null after ensureFFmpegAudioRecorder');
			// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –µ—Å–ª–∏ audioRecorder –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
			RecordingStateManager.resetState();
			vscode.window.showErrorMessage('‚ùå Failed to initialize audio recorder');
			return;
		}
		
		console.log('‚úÖ [RECORDING] Step 2: audioRecorder is initialized, checking if already recording...');
		outputChannel.appendLine('‚úÖ [RECORDING] Step 2: audioRecorder is initialized, checking if already recording...');
		
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–¥–µ—Ç –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å
		const isCurrentlyRecording = audioRecorder.getIsRecording();
		console.log('‚úÖ [RECORDING] audioRecorder.getIsRecording():', isCurrentlyRecording);
		outputChannel.appendLine('‚úÖ [RECORDING] audioRecorder.getIsRecording(): ' + isCurrentlyRecording);
		
		if (isCurrentlyRecording) {
			console.log('‚ö†Ô∏è [RECORDING] Recording already in progress, skipping start');
			outputChannel.appendLine('‚ö†Ô∏è [RECORDING] Recording already in progress, skipping start');
			return;
		}
		
		console.log('üé§ [RECORDING] Step 3: audioRecorder not recording, checking microphone...');
		outputChannel.appendLine('üé§ [RECORDING] Step 3: audioRecorder not recording, checking microphone...');
		
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ —Å retry
		console.log('üîç [RECORDING] Step 3a: Starting microphone permission check...');
		outputChannel.appendLine('üîç [RECORDING] Step 3a: Starting microphone permission check...');
		
		console.time('microphone.permission.check');
		
		let microphoneResult;
		try {
			microphoneResult = await retryManager.retryMicrophoneOperation(
				async () => {
					console.log('üîç [RECORDING] Calling FFmpegAudioRecorder.checkMicrophonePermission...');
					outputChannel.appendLine('üîç [RECORDING] Calling FFmpegAudioRecorder.checkMicrophonePermission...');
					const hasPermission = await FFmpegAudioRecorder.checkMicrophonePermission();
					console.log('üîç [RECORDING] Microphone permission result:', JSON.stringify(hasPermission, null, 2));
					outputChannel.appendLine('üîç [RECORDING] Microphone permission result: ' + JSON.stringify(hasPermission, null, 2));
					if (hasPermission.state !== 'granted') {
						throw new Error('Microphone permission not granted');
					}
					return hasPermission;
				},
				'microphone_permission_check'
			);
			console.timeEnd('microphone.permission.check');
		} catch (micError) {
			console.timeEnd('microphone.permission.check');
			console.error('‚ùå [RECORDING] Error in microphone check:', micError);
			outputChannel.appendLine('‚ùå [RECORDING] Error in microphone check: ' + micError);
			throw micError;
		}

		console.log('üîç [RECORDING] Step 3b: Microphone operation result:', JSON.stringify(microphoneResult, null, 2));
		outputChannel.appendLine('üîç [RECORDING] Step 3b: Microphone operation result: ' + JSON.stringify(microphoneResult, null, 2));

		if (!microphoneResult.success) {
			const error = microphoneResult.lastError || new Error('Microphone access failed');
			console.error('‚ùå [RECORDING] Microphone check failed:', error);
			outputChannel.appendLine('‚ùå [RECORDING] Microphone check failed: ' + error);
			// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
			RecordingStateManager.resetState();
			await errorHandler.handleErrorFromException(error, context);
			return;
		}
		
		console.log('‚úÖ [RECORDING] Step 4: Microphone check passed, calling audioRecorder.startRecording()...');
		outputChannel.appendLine('‚úÖ [RECORDING] Step 4: Microphone check passed, calling audioRecorder.startRecording()...');
		
		console.time('audioRecorder.startRecording');
		
		try {
			await audioRecorder.startRecording();
			console.timeEnd('audioRecorder.startRecording');
			console.log('‚úÖ [RECORDING] Step 4: audioRecorder.startRecording() completed successfully');
			outputChannel.appendLine('‚úÖ [RECORDING] Step 4: audioRecorder.startRecording() completed successfully');
			console.log('‚úÖ [RECORDING] Recording process completed successfully');
			outputChannel.appendLine('‚úÖ [RECORDING] Recording process completed successfully');
		} catch (startError) {
			console.timeEnd('audioRecorder.startRecording');
			console.error('‚ùå [RECORDING] Error in audioRecorder.startRecording():', startError);
			outputChannel.appendLine('‚ùå [RECORDING] Error in audioRecorder.startRecording(): ' + startError);
			throw startError;
		}
		
	} catch (error) {
		console.error('‚ùå [RECORDING] Failed to start recording:', error);
		outputChannel.appendLine('‚ùå [RECORDING] Failed to start recording: ' + error);
		console.error('‚ùå [RECORDING] Error details:', {
			name: (error as Error).name,
			message: (error as Error).message,
			stack: (error as Error).stack
		});
		outputChannel.appendLine('‚ùå [RECORDING] Error name: ' + (error as Error).name);
		outputChannel.appendLine('‚ùå [RECORDING] Error message: ' + (error as Error).message);
		
		// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ
		console.log('üîÑ [RECORDING] Resetting state due to error...');
		outputChannel.appendLine('üîÑ [RECORDING] Resetting state due to error...');
		RecordingStateManager.resetState();
		
		try {
			await errorHandler.handleErrorFromException(error as Error, context);
		} catch (handlerError) {
			console.error('‚ùå [RECORDING] Error in error handler:', handlerError);
			outputChannel.appendLine('‚ùå [RECORDING] Error in error handler: ' + handlerError);
		}
	}
}

function stopRecording(): void {
	try {
		console.log('‚èπÔ∏è [RECORDING] stopRecording() called');
		console.log('‚èπÔ∏è [RECORDING] Current recording state:', RecordingStateManager.isRecording());
		console.log('‚èπÔ∏è [RECORDING] Current mode:', RecordingStateManager.getCurrentMode());
		console.log('‚èπÔ∏è [RECORDING] audioRecorder initialized:', !!audioRecorder);
		
		// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∂–∏–º –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
		console.log('‚èπÔ∏è [RECORDING] Step 1: Stopping recording but keeping mode for transcription...');
		const previousMode = RecordingStateManager.stopRecordingKeepMode();
		console.log(`‚èπÔ∏è [RECORDING] Step 1: Recording stopped, mode preserved for transcription: ${previousMode}`);
		
		// –û–±–Ω–æ–≤–ª—è–µ–º StatusBar —Å—Ä–∞–∑—É –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
		console.log('‚èπÔ∏è [RECORDING] Step 2: Updating status bar...');
		if (statusBarManager) {
			statusBarManager.updateRecordingState(false);
			console.log('‚èπÔ∏è [RECORDING] Step 2: Status bar updated to not recording');
		} else {
			console.log('‚èπÔ∏è [RECORDING] Step 2: statusBarManager not available');
		}
		
		if (!audioRecorder) {
			console.warn('‚ö†Ô∏è [RECORDING] Audio recorder not initialized, but mode was preserved');
			return;
		}
		
		console.log('‚èπÔ∏è [RECORDING] Step 3: Calling audioRecorder.stopRecording()...');
		console.log('‚èπÔ∏è [RECORDING] audioRecorder.getIsRecording() before stop:', audioRecorder.getIsRecording());
		console.time('audioRecorder.stopRecording');
		audioRecorder.stopRecording();
		console.timeEnd('audioRecorder.stopRecording');
		console.log('‚èπÔ∏è [RECORDING] Step 3: audioRecorder.stopRecording() completed');
		console.log('‚èπÔ∏è [RECORDING] audioRecorder.getIsRecording() after stop:', audioRecorder.getIsRecording());
		console.log('‚úÖ [RECORDING] stopRecording completed successfully');
		
	} catch (error) {
		console.error('‚ùå [RECORDING] Failed to stop recording:', error);
		console.error('‚ùå [RECORDING] Error details:', {
			name: (error as Error).name,
			message: (error as Error).message,
			stack: (error as Error).stack
		});
		// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—à–∏–±–∫–µ
		RecordingStateManager.resetState();
		// –û–±–Ω–æ–≤–ª—è–µ–º StatusBar –ø—Ä–∏ –æ—à–∏–±–∫–µ
		if (statusBarManager) {
			statusBarManager.updateRecordingState(false);
		}
		vscode.window.showErrorMessage(`Failed to stop recording: ${(error as Error).message}`);
	}
}

/**
 * –û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ FFmpeg Audio Recorder
 */
async function ensureFFmpegAudioRecorder(): Promise<void> {
	console.log('üîß ensureFFmpegAudioRecorder() called');
	
	if (audioRecorder) {
		console.log('‚úÖ audioRecorder already initialized');
		return; // –£–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
	}

	console.log('üîß Initializing FFmpeg Audio Recorder...');
	
	try {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å FFmpeg
		console.log('üîç Checking FFmpeg availability...');
		const ffmpegCheck = await FFmpegAudioRecorder.checkFFmpegAvailability();
		console.log('üîç FFmpeg check result:', JSON.stringify(ffmpegCheck, null, 2));
		
		if (!ffmpegCheck.available) {
			const errorMsg = `FFmpeg not available: ${ffmpegCheck.error || 'Unknown error'}`;
			console.error('‚ùå FFmpeg check failed:', errorMsg);
			vscode.window.showErrorMessage(`‚ùå FFmpeg Error: ${errorMsg}`);
			throw new Error(errorMsg);
		}
		
		console.log('‚úÖ FFmpeg is available, version:', ffmpegCheck.version);
		
		// –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É–¥–∏–æ
		console.log('‚öôÔ∏è Reading audio configuration...');
		const audioConfig = configurationManager.getAudioConfiguration();
		console.log('‚öôÔ∏è Audio quality setting:', audioConfig.audioQuality);
		
		// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞—á–µ—Å—Ç–≤–∞
		let sampleRate = 16000;
		let bitrate = '64k';
		
		switch (audioConfig.audioQuality) {
			case 'high':
				sampleRate = 44100;
				bitrate = '128k';
				break;
			case 'ultra':
				sampleRate = 48000;
				bitrate = '192k';
				break;
			default: // standard
				sampleRate = 16000;
				bitrate = '64k';
				break;
		}
		
		console.log(`‚öôÔ∏è Audio settings: ${audioConfig.audioQuality} quality, ${sampleRate}Hz sample rate`);
		
		// –°–æ–±—ã—Ç–∏—è –¥–ª—è AudioRecorder - —Å–æ–∑–¥–∞–µ–º –∑–¥–µ—Å—å –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å StatusBar
		const audioRecorderEvents: AudioRecorderEvents = {
			onRecordingStart: () => {
				console.log('üé§ AudioRecorder event: onRecordingStart');
				// –û–±–Ω–æ–≤–ª—è–µ–º StatusBar
				if (statusBarManager) {
					statusBarManager.updateRecordingState(true);
				}
				vscode.window.showInformationMessage('üé§ Recording started...');
			},
			onRecordingStop: async (audioBlob: Blob) => {
				console.log('‚èπÔ∏è AudioRecorder event: onRecordingStop, blob size:', audioBlob.size);
				console.log('‚èπÔ∏è AudioRecorder event: onRecordingStop, blob type:', audioBlob.type);
				console.log('‚èπÔ∏è AudioRecorder event: About to call handleTranscription...');
				
				// –û–±–Ω–æ–≤–ª—è–µ–º StatusBar
				if (statusBarManager) {
					statusBarManager.updateRecordingState(false);
				}
				
				try {
					// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é
					console.log('‚èπÔ∏è AudioRecorder event: Calling handleTranscription...');
					await handleTranscription(audioBlob);
					console.log('‚èπÔ∏è AudioRecorder event: handleTranscription completed successfully');
				} catch (error) {
					console.error('‚ùå AudioRecorder event: Error in handleTranscription:', error);
					console.error('‚ùå AudioRecorder event: Error details:', {
						name: (error as Error).name,
						message: (error as Error).message,
						stack: (error as Error).stack
					});
					// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
					vscode.window.showErrorMessage(`Transcription failed: ${(error as Error).message}`);
					// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
					RecordingStateManager.resetState();
				}
			},
			onError: (error: Error) => {
				console.error('‚ùå AudioRecorder event: onError:', error);
				// –û–±–Ω–æ–≤–ª—è–µ–º StatusBar
				if (statusBarManager) {
					statusBarManager.showError(`Recording error: ${error.message}`);
				}
				vscode.window.showErrorMessage(`Recording failed: ${error.message}`);
				// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
				RecordingStateManager.resetState();
			}
		};
		
		console.log('üîß Creating FFmpegAudioRecorder instance...');
		
		// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä FFmpegAudioRecorder
		const recorderOptions = {
			sampleRate: sampleRate,
			channelCount: 1, // –ú–æ–Ω–æ –¥–ª—è —Ä–µ—á–∏
			audioFormat: 'wav' as const,
			codec: 'pcm_s16le',
			maxDuration: audioConfig.maxRecordingDuration,
			ffmpegPath: audioConfig.ffmpegPath || undefined,
			silenceDetection: audioConfig.silenceDetection,
			silenceDuration: audioConfig.silenceDuration,
			silenceThreshold: -(audioConfig.silenceThreshold) // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–Ω—É—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
		};
		
		console.log('üîß Recorder options:', JSON.stringify(recorderOptions, null, 2));
		
		// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞—É–¥–∏–æ —Ä–µ–∫–æ—Ä–¥–µ—Ä–∞
		console.log('üé§ [RECORDING] Creating new FFmpegAudioRecorder instance...');
		outputChannel.appendLine('üé§ [RECORDING] Creating new FFmpegAudioRecorder instance...');
		
		audioRecorder = new FFmpegAudioRecorder(audioRecorderEvents, recorderOptions, outputChannel);
		console.log('üé§ [RECORDING] FFmpegAudioRecorder instance created successfully!');
		
	} catch (error) {
		console.error('‚ùå Failed to initialize FFmpeg Audio Recorder:', error);
		audioRecorder = null; // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –æ–Ω null –ø—Ä–∏ –æ—à–∏–±–∫–µ
		
		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
		const errorMessage = `Failed to initialize audio recorder: ${(error as Error).message}`;
		vscode.window.showErrorMessage(errorMessage);
		
		throw error;
	}
}